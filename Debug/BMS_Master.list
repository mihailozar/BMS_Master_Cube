
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cdc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08006e64  08006e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007100  08007100  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007108  08007108  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800710c  0800710c  0001710c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000000c  0800711c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  0800711c  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c677  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003893  00000000  00000000  0003c6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0003ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00041238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ff0  00000000  00000000  000423a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185d3  00000000  00000000  0006b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f75d4  00000000  00000000  00083963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017af37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  0017af8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e4c 	.word	0x08006e4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006e4c 	.word	0x08006e4c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
CANMsg *msg;

extern int prechargeFlag;
extern int ecuSHDReqFlag;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08e      	sub	sp, #56	; 0x38
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef pHeader;
	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pHeader, rxData);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	f107 021c 	add.w	r2, r7, #28
 80004e0:	2100      	movs	r1, #0
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f001 ff3c 	bl	8002360 <HAL_CAN_GetRxMessage>
//	canSend(pHeader.StdId, rxData);
	CANMsg msg={ &pHeader, rxData};
 80004e8:	f107 0308 	add.w	r3, r7, #8
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	721a      	strb	r2, [r3, #8]
 80004f4:	f107 031c 	add.w	r3, r7, #28
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	723b      	strb	r3, [r7, #8]
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	b2db      	uxtb	r3, r3
 8000502:	727b      	strb	r3, [r7, #9]
//	xQueueSendToBackFromISR(CAN_Rx_Queue,&(msg), portMAX_DELAY );
	 //From ECATU
	        if (pHeader.StdId == 0x097)
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	2b97      	cmp	r3, #151	; 0x97
 8000508:	d109      	bne.n	800051e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	        {
	            if (rxData[0] == 1)
 800050a:	7d3b      	ldrb	r3, [r7, #20]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d106      	bne.n	800051e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	            {
	                //start PrechargeProcess
	                if (prechargeFlag != 1)
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d002      	beq.n	800051e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	                    prechargeFlag = 1;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
	            }
	        }
	        //From ECATU
	        if (pHeader.StdId == 0x300)
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000524:	d10b      	bne.n	800053e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	        {
	            if (rxData[2] & 0x40)
 8000526:	7dbb      	ldrb	r3, [r7, #22]
 8000528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800052c:	2b00      	cmp	r3, #0
 800052e:	d006      	beq.n	800053e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	            {
	                //open SHUT DOWN Circuit
	                if (ecuSHDReqFlag != 1)
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d002      	beq.n	800053e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	                    ecuSHDReqFlag = 1;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
	            }
	        }

//	        canSend(pHeader.StdId, rxData);

}
 800053e:	bf00      	nop
 8000540:	3738      	adds	r7, #56	; 0x38
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000040 	.word	0x20000040
 800054c:	20000044 	.word	0x20000044

08000550 <Can_Init>:
//		CANMutex = xSemaphoreCreateMutex();
//
//
//}

void Can_Init(){
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0


	CAN_FilterTypeDef CanFilter;
	CanFilter.FilterIdHigh = 0x0000;
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
	CanFilter.FilterIdLow = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
	CanFilter.FilterMaskIdHigh = 0x0000;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
	CanFilter.FilterMaskIdLow = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
	CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
	CanFilter.FilterBank = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
	CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
	CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000572:	2301      	movs	r3, #1
 8000574:	61fb      	str	r3, [r7, #28]
	CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000576:	2301      	movs	r3, #1
 8000578:	623b      	str	r3, [r7, #32]


	HAL_CAN_ConfigFilter(&hcan1, &CanFilter);
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <Can_Init+0x4c>)
 8000580:	f001 fce1 	bl	8001f46 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000584:	2102      	movs	r1, #2
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <Can_Init+0x4c>)
 8000588:	f001 fffc 	bl	8002584 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <Can_Init+0x4c>)
 800058e:	f001 fda4 	bl	80020da <HAL_CAN_Start>

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000054 	.word	0x20000054

080005a0 <canSend>:


void canSend(uint16_t id, uint8_t* canMsg){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	80fb      	strh	r3, [r7, #6]

	CAN_TxHeaderTypeDef pHeader;
		pHeader.DLC = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	61bb      	str	r3, [r7, #24]
		pHeader.RTR = CAN_RTR_DATA;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
		pHeader.IDE = CAN_ID_STD;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
		pHeader.StdId = id;
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	60bb      	str	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1,&pHeader , canMsg, &TxMailbox);
 80005bc:	f107 0108 	add.w	r1, r7, #8
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <canSend+0x48>)
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <canSend+0x4c>)
 80005c6:	f001 fdcc 	bl	8002162 <HAL_CAN_AddTxMessage>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 80005ca:	bf00      	nop
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <canSend+0x48>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <canSend+0x4c>)
 80005d4:	f001 fea0 	bl	8002318 <HAL_CAN_IsTxMessagePending>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f6      	bne.n	80005cc <canSend+0x2c>
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000050 	.word	0x20000050
 80005ec:	20000054 	.word	0x20000054

080005f0 <HAL_TIM_IC_CaptureCallback>:
#include "PwmIn.h"
#include "tim.h"



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7f1b      	ldrb	r3, [r3, #28]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d130      	bne.n	8000662 <HAL_TIM_IC_CaptureCallback+0x72>
		// Read the IC value
		float ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000600:	2104      	movs	r1, #4
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f004 fcb6 	bl	8004f74 <HAL_TIM_ReadCapturedValue>
 8000608:	ee07 0a90 	vmov	s15, r0
 800060c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000610:	edc7 7a03 	vstr	s15, [r7, #12]
		if(ICValue!=0){
 8000614:	edd7 7a03 	vldr	s15, [r7, #12]
 8000618:	eef5 7a40 	vcmp.f32	s15, #0.0
 800061c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000620:	d01f      	beq.n	8000662 <HAL_TIM_IC_CaptureCallback+0x72>
			Duty = 100-(HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) *100)/ICValue;
 8000622:	2100      	movs	r1, #0
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f004 fca5 	bl	8004f74 <HAL_TIM_ReadCapturedValue>
 800062a:	4603      	mov	r3, r0
 800062c:	2264      	movs	r2, #100	; 0x64
 800062e:	fb02 f303 	mul.w	r3, r2, r3
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800063a:	ed97 7a03 	vldr	s14, [r7, #12]
 800063e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000642:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800066c <HAL_TIM_IC_CaptureCallback+0x7c>
 8000646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x80>)
 800064c:	edc3 7a00 	vstr	s15, [r3]
			Frequency = 4000000/ICValue;
 8000650:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000674 <HAL_TIM_IC_CaptureCallback+0x84>
 8000654:	ed97 7a03 	vldr	s14, [r7, #12]
 8000658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_TIM_IC_CaptureCallback+0x88>)
 800065e:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	42c80000 	.word	0x42c80000
 8000670:	20000028 	.word	0x20000028
 8000674:	4a742400 	.word	0x4a742400
 8000678:	2000002c 	.word	0x2000002c

0800067c <CRC16>:
uint8_t uartFault = 0;          //Uart fault - RECEIVE NOTHING
uint32_t boradFaults = 0;       //Information on which board fault has occurred

//*** CRC calcultaion
//Only used for sending
uint16_t CRC16(BYTE *pBuf, int nLen) {
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
	uint16_t wCRC = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	81fb      	strh	r3, [r7, #14]
	int i;

	for (i = 0; i < nLen; i++) {
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	e016      	b.n	80006be <CRC16+0x42>
		wCRC ^= (*pBuf++) & 0x00FF;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b21a      	sxth	r2, r3
 800069a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800069e:	4053      	eors	r3, r2
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	81fb      	strh	r3, [r7, #14]
		wCRC = crc16_table[wCRC & 0x00FF] ^ (wCRC >> 8);
 80006a4:	89fb      	ldrh	r3, [r7, #14]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <CRC16+0x58>)
 80006aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006ae:	89fb      	ldrh	r3, [r7, #14]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	4053      	eors	r3, r2
 80006b6:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < nLen; i++) {
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dbe4      	blt.n	8000690 <CRC16+0x14>
	}

	return wCRC;
 80006c6:	89fb      	ldrh	r3, [r7, #14]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	08006eb8 	.word	0x08006eb8

080006d8 <WakePL445>:

void WakePL445() {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, bmsWakeUp_Pin, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <WakePL445+0x2c>)
 80006e4:	f002 fcb0 	bl	8003048 <HAL_GPIO_WritePin>
//    ThisThread::sleep_for(50ms);
	HAL_Delay(50);
 80006e8:	2032      	movs	r0, #50	; 0x32
 80006ea:	f001 fb0d 	bl	8001d08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, bmsWakeUp_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <WakePL445+0x2c>)
 80006f6:	f002 fca7 	bl	8003048 <HAL_GPIO_WritePin>
//    ThisThread::sleep_for(10ms);
	HAL_Delay(50);
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f001 fb04 	bl	8001d08 <HAL_Delay>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	48000800 	.word	0x48000800

08000708 <setNumOfCellsAndTemps>:



uint64_t setNumOfCellsAndTemps(int numCell, int numTemp){
 8000708:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800070c:	b087      	sub	sp, #28
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	6039      	str	r1, [r7, #0]

    int posCell = 1;
 8000714:	2101      	movs	r1, #1
 8000716:	6179      	str	r1, [r7, #20]
    if(numCell == 0){
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	2900      	cmp	r1, #0
 800071c:	d10c      	bne.n	8000738 <setNumOfCellsAndTemps+0x30>
        posCell = 0;
 800071e:	2100      	movs	r1, #0
 8000720:	6179      	str	r1, [r7, #20]
 8000722:	e00c      	b.n	800073e <setNumOfCellsAndTemps+0x36>
    }else{
         while(numCell-1 !=0){
            posCell = posCell << 1;
 8000724:	6979      	ldr	r1, [r7, #20]
 8000726:	0049      	lsls	r1, r1, #1
 8000728:	6179      	str	r1, [r7, #20]
            posCell |= 0x01;
 800072a:	6979      	ldr	r1, [r7, #20]
 800072c:	f041 0101 	orr.w	r1, r1, #1
 8000730:	6179      	str	r1, [r7, #20]
            numCell--;
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	3901      	subs	r1, #1
 8000736:	6079      	str	r1, [r7, #4]
         while(numCell-1 !=0){
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	2901      	cmp	r1, #1
 800073c:	d1f2      	bne.n	8000724 <setNumOfCellsAndTemps+0x1c>
        }
    }

    int posTemp= 1;
 800073e:	2101      	movs	r1, #1
 8000740:	6139      	str	r1, [r7, #16]
    if(numTemp == 0){
 8000742:	6839      	ldr	r1, [r7, #0]
 8000744:	2900      	cmp	r1, #0
 8000746:	d10c      	bne.n	8000762 <setNumOfCellsAndTemps+0x5a>
         posTemp= 0;
 8000748:	2100      	movs	r1, #0
 800074a:	6139      	str	r1, [r7, #16]
 800074c:	e00c      	b.n	8000768 <setNumOfCellsAndTemps+0x60>
    }else{
        while(numTemp-1 !=0){
            posTemp = posTemp << 1;
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	0049      	lsls	r1, r1, #1
 8000752:	6139      	str	r1, [r7, #16]
            posTemp |= 0x01;
 8000754:	6939      	ldr	r1, [r7, #16]
 8000756:	f041 0101 	orr.w	r1, r1, #1
 800075a:	6139      	str	r1, [r7, #16]
            numTemp--;
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	3901      	subs	r1, #1
 8000760:	6039      	str	r1, [r7, #0]
        while(numTemp-1 !=0){
 8000762:	6839      	ldr	r1, [r7, #0]
 8000764:	2901      	cmp	r1, #1
 8000766:	d1f2      	bne.n	800074e <setNumOfCellsAndTemps+0x46>
        }
    }

    uint64_t value = (posCell & 0xFFFF) <<16;
 8000768:	6979      	ldr	r1, [r7, #20]
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	4608      	mov	r0, r1
 800076e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000772:	e9c7 0102 	strd	r0, r1, [r7, #8]
    value |= (posTemp & 0xFF) <<8;
 8000776:	6939      	ldr	r1, [r7, #16]
 8000778:	0209      	lsls	r1, r1, #8
 800077a:	4608      	mov	r0, r1
 800077c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000780:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8000784:	f04f 0900 	mov.w	r9, #0
 8000788:	ea00 0208 	and.w	r2, r0, r8
 800078c:	ea01 0309 	and.w	r3, r1, r9
 8000790:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000794:	ea40 0402 	orr.w	r4, r0, r2
 8000798:	ea41 0503 	orr.w	r5, r1, r3
 800079c:	e9c7 4502 	strd	r4, r5, [r7, #8]
    return value;
 80007a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80007a4:	4610      	mov	r0, r2
 80007a6:	4619      	mov	r1, r3
 80007a8:	371c      	adds	r7, #28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80007b0:	4770      	bx	lr

080007b2 <WriteFrame>:

int WriteFrame(BYTE bID, uint16_t wAddr, BYTE *pData, BYTE bLen,
		BYTE bWriteType) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b08e      	sub	sp, #56	; 0x38
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	603a      	str	r2, [r7, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4603      	mov	r3, r0
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	460b      	mov	r3, r1
 80007c2:	80bb      	strh	r3, [r7, #4]
 80007c4:	4613      	mov	r3, r2
 80007c6:	71bb      	strb	r3, [r7, #6]

	int bPktLen = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
	BYTE pFrame[32];
	BYTE *pBuf = pFrame;
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t wCRC;

	if (bLen == 7 || bLen > 8)
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	2b07      	cmp	r3, #7
 80007d6:	d002      	beq.n	80007de <WriteFrame+0x2c>
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d901      	bls.n	80007e2 <WriteFrame+0x30>
		return 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	e096      	b.n	8000910 <WriteFrame+0x15e>

	memset(pFrame, 0x7F, sizeof(pFrame));
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2220      	movs	r2, #32
 80007e8:	217f      	movs	r1, #127	; 0x7f
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 fb26 	bl	8006e3c <memset>
	if (wAddr > 255) {
 80007f0:	88bb      	ldrh	r3, [r7, #4]
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	d92f      	bls.n	8000856 <WriteFrame+0xa4>
		*pBuf++ = 0x88 | bWriteType | bLen; // use 16-bit address
 80007f6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000802:	1c59      	adds	r1, r3, #1
 8000804:	6379      	str	r1, [r7, #52]	; 0x34
 8000806:	f062 0277 	orn	r2, r2, #119	; 0x77
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	701a      	strb	r2, [r3, #0]
		if (bWriteType == FRMWRT_SGL_R || bWriteType == FRMWRT_SGL_NR
 800080e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00b      	beq.n	800082e <WriteFrame+0x7c>
 8000816:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800081a:	2b10      	cmp	r3, #16
 800081c:	d007      	beq.n	800082e <WriteFrame+0x7c>
				|| bWriteType == FRMWRT_GRP_R || bWriteType == FRMWRT_GRP_NR) { //(bWriteType != FRMWRT_ALL_NR)// || (bWriteType != FRMWRT_ALL_R))
 800081e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000822:	2b20      	cmp	r3, #32
 8000824:	d003      	beq.n	800082e <WriteFrame+0x7c>
 8000826:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800082a:	2b30      	cmp	r3, #48	; 0x30
 800082c:	d104      	bne.n	8000838 <WriteFrame+0x86>
			*pBuf++ = (bID & 0x00FF);
 800082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	637a      	str	r2, [r7, #52]	; 0x34
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	701a      	strb	r2, [r3, #0]
		}
		*pBuf++ = (wAddr & 0xFF00) >> 8;
 8000838:	88bb      	ldrh	r3, [r7, #4]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b299      	uxth	r1, r3
 800083e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	637a      	str	r2, [r7, #52]	; 0x34
 8000844:	b2ca      	uxtb	r2, r1
 8000846:	701a      	strb	r2, [r3, #0]
		*pBuf++ = wAddr & 0x00FF;
 8000848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	637a      	str	r2, [r7, #52]	; 0x34
 800084e:	88ba      	ldrh	r2, [r7, #4]
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e02f      	b.n	80008b6 <WriteFrame+0x104>
	} else {

		*pBuf++ = 0x80 | bWriteType | bLen; // use 8-bit address
 8000856:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	4313      	orrs	r3, r2
 800085e:	b2da      	uxtb	r2, r3
 8000860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000862:	1c59      	adds	r1, r3, #1
 8000864:	6379      	str	r1, [r7, #52]	; 0x34
 8000866:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	701a      	strb	r2, [r3, #0]
		if (bWriteType == FRMWRT_SGL_R || bWriteType == FRMWRT_SGL_NR
 800086e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00b      	beq.n	800088e <WriteFrame+0xdc>
 8000876:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800087a:	2b10      	cmp	r3, #16
 800087c:	d007      	beq.n	800088e <WriteFrame+0xdc>
				|| bWriteType == FRMWRT_GRP_R || bWriteType == FRMWRT_GRP_NR) {
 800087e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000882:	2b20      	cmp	r3, #32
 8000884:	d003      	beq.n	800088e <WriteFrame+0xdc>
 8000886:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800088a:	2b30      	cmp	r3, #48	; 0x30
 800088c:	d104      	bne.n	8000898 <WriteFrame+0xe6>
			*pBuf++ = (bID & 0x00FF);
 800088e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	637a      	str	r2, [r7, #52]	; 0x34
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	701a      	strb	r2, [r3, #0]
		}
		*pBuf++ = wAddr & 0x00FF;
 8000898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	637a      	str	r2, [r7, #52]	; 0x34
 800089e:	88ba      	ldrh	r2, [r7, #4]
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	701a      	strb	r2, [r3, #0]
	}

	while (bLen--)
 80008a4:	e007      	b.n	80008b6 <WriteFrame+0x104>
		*pBuf++ = *pData++;
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	1c53      	adds	r3, r2, #1
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ae:	1c59      	adds	r1, r3, #1
 80008b0:	6379      	str	r1, [r7, #52]	; 0x34
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	701a      	strb	r2, [r3, #0]
	while (bLen--)
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	71ba      	strb	r2, [r7, #6]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1f2      	bne.n	80008a6 <WriteFrame+0xf4>

	bPktLen = pBuf - pFrame;
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30

	wCRC = CRC16(pFrame, bPktLen);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fed3 	bl	800067c <CRC16>
 80008d6:	4603      	mov	r3, r0
 80008d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	*pBuf++ = wCRC & 0x00FF;
 80008da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	637a      	str	r2, [r7, #52]	; 0x34
 80008e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	701a      	strb	r2, [r3, #0]
	*pBuf++ = (wCRC & 0xFF00) >> 8;
 80008e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b299      	uxth	r1, r3
 80008ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	637a      	str	r2, [r7, #52]	; 0x34
 80008f2:	b2ca      	uxtb	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
	bPktLen += 2;
 80008f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008f8:	3302      	adds	r3, #2
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30

	UART_AsyncTransmitString(1,pFrame);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	2001      	movs	r0, #1
 8000904:	f000 ffc0 	bl	8001888 <UART_AsyncTransmitString>
	HAL_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f001 f9fd 	bl	8001d08 <HAL_Delay>

	return bPktLen;
 800090e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000910:	4618      	mov	r0, r3
 8000912:	3738      	adds	r7, #56	; 0x38
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <WriteReg>:
//Communication Direction: From BMS Master to Slaves

//*** Write to Register function, helper function
// Help to pack data for communication to specific register, WRITING process
int WriteReg(BYTE bID, uint16_t wAddr, uint64_t dwData, BYTE bLen,
		BYTE bWriteType) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af02      	add	r7, sp, #8
 800091e:	e9c7 2300 	strd	r2, r3, [r7]
 8000922:	4603      	mov	r3, r0
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	460b      	mov	r3, r1
 8000928:	81bb      	strh	r3, [r7, #12]
	int bRes = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
	BYTE bBuf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 800092e:	4ab9      	ldr	r2, [pc, #740]	; (8000c14 <WriteReg+0x2fc>)
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000938:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (bLen) {
 800093c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000940:	3b01      	subs	r3, #1
 8000942:	2b07      	cmp	r3, #7
 8000944:	f200 81c2 	bhi.w	8000ccc <WriteReg+0x3b4>
 8000948:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <WriteReg+0x38>)
 800094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094e:	bf00      	nop
 8000950:	08000971 	.word	0x08000971
 8000954:	0800098d 	.word	0x0800098d
 8000958:	080009c1 	.word	0x080009c1
 800095c:	08000a0d 	.word	0x08000a0d
 8000960:	08000a71 	.word	0x08000a71
 8000964:	08000ae9 	.word	0x08000ae9
 8000968:	08000b75 	.word	0x08000b75
 800096c:	08000c19 	.word	0x08000c19
	case 1:
		bBuf[0] = dwData & 0x00000000000000FF;
 8000970:	783b      	ldrb	r3, [r7, #0]
 8000972:	753b      	strb	r3, [r7, #20]

		bRes = WriteFrame(bID, wAddr, bBuf, 1, bWriteType);
 8000974:	f107 0214 	add.w	r2, r7, #20
 8000978:	89b9      	ldrh	r1, [r7, #12]
 800097a:	7bf8      	ldrb	r0, [r7, #15]
 800097c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	f7ff ff15 	bl	80007b2 <WriteFrame>
 8000988:	61f8      	str	r0, [r7, #28]
		break;
 800098a:	e1a0      	b.n	8000cce <WriteReg+0x3b6>
	case 2:
		bBuf[0] = (dwData & 0x000000000000FF00) >> 8;
 800098c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000990:	f04f 0200 	mov.w	r2, #0
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	0a02      	lsrs	r2, r0, #8
 800099a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800099e:	0a0b      	lsrs	r3, r1, #8
 80009a0:	b2d3      	uxtb	r3, r2
 80009a2:	753b      	strb	r3, [r7, #20]
		bBuf[1] = dwData & 0x00000000000000FF;
 80009a4:	783b      	ldrb	r3, [r7, #0]
 80009a6:	757b      	strb	r3, [r7, #21]

		bRes = WriteFrame(bID, wAddr, bBuf, 2, bWriteType);
 80009a8:	f107 0214 	add.w	r2, r7, #20
 80009ac:	89b9      	ldrh	r1, [r7, #12]
 80009ae:	7bf8      	ldrb	r0, [r7, #15]
 80009b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2302      	movs	r3, #2
 80009b8:	f7ff fefb 	bl	80007b2 <WriteFrame>
 80009bc:	61f8      	str	r0, [r7, #28]
		break;
 80009be:	e186      	b.n	8000cce <WriteReg+0x3b6>
	case 3:
		bBuf[0] = (dwData & 0x0000000000FF0000) >> 16;
 80009c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80009c4:	f04f 0200 	mov.w	r2, #0
 80009c8:	f04f 0300 	mov.w	r3, #0
 80009cc:	0c02      	lsrs	r2, r0, #16
 80009ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009d2:	0c0b      	lsrs	r3, r1, #16
 80009d4:	b2d3      	uxtb	r3, r2
 80009d6:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x000000000000FF00) >> 8;
 80009d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80009dc:	f04f 0200 	mov.w	r2, #0
 80009e0:	f04f 0300 	mov.w	r3, #0
 80009e4:	0a02      	lsrs	r2, r0, #8
 80009e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80009ea:	0a0b      	lsrs	r3, r1, #8
 80009ec:	b2d3      	uxtb	r3, r2
 80009ee:	757b      	strb	r3, [r7, #21]
		bBuf[2] = dwData & 0x00000000000000FF;
 80009f0:	783b      	ldrb	r3, [r7, #0]
 80009f2:	75bb      	strb	r3, [r7, #22]

		bRes = WriteFrame(bID, wAddr, bBuf, 3, bWriteType);
 80009f4:	f107 0214 	add.w	r2, r7, #20
 80009f8:	89b9      	ldrh	r1, [r7, #12]
 80009fa:	7bf8      	ldrb	r0, [r7, #15]
 80009fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2303      	movs	r3, #3
 8000a04:	f7ff fed5 	bl	80007b2 <WriteFrame>
 8000a08:	61f8      	str	r0, [r7, #28]
		break;
 8000a0a:	e160      	b.n	8000cce <WriteReg+0x3b6>
	case 4:
		bBuf[0] = (dwData & 0x00000000FF000000) >> 24;
 8000a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	0e02      	lsrs	r2, r0, #24
 8000a1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a1e:	0e0b      	lsrs	r3, r1, #24
 8000a20:	b2d3      	uxtb	r3, r2
 8000a22:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x0000000000FF0000) >> 16;
 8000a24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	f04f 0300 	mov.w	r3, #0
 8000a30:	0c02      	lsrs	r2, r0, #16
 8000a32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a36:	0c0b      	lsrs	r3, r1, #16
 8000a38:	b2d3      	uxtb	r3, r2
 8000a3a:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x000000000000FF00) >> 8;
 8000a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	f04f 0300 	mov.w	r3, #0
 8000a48:	0a02      	lsrs	r2, r0, #8
 8000a4a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a4e:	0a0b      	lsrs	r3, r1, #8
 8000a50:	b2d3      	uxtb	r3, r2
 8000a52:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = dwData & 0x00000000000000FF;
 8000a54:	783b      	ldrb	r3, [r7, #0]
 8000a56:	75fb      	strb	r3, [r7, #23]

		bRes = WriteFrame(bID, wAddr, bBuf, 4, bWriteType);
 8000a58:	f107 0214 	add.w	r2, r7, #20
 8000a5c:	89b9      	ldrh	r1, [r7, #12]
 8000a5e:	7bf8      	ldrb	r0, [r7, #15]
 8000a60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2304      	movs	r3, #4
 8000a68:	f7ff fea3 	bl	80007b2 <WriteFrame>
 8000a6c:	61f8      	str	r0, [r7, #28]
		break;
 8000a6e:	e12e      	b.n	8000cce <WriteReg+0x3b6>
	case 5:
		bBuf[0] = (dwData & 0x000000FF00000000) >> 32;
 8000a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2300      	movs	r3, #0
 8000a80:	b2d3      	uxtb	r3, r2
 8000a82:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x00000000FF000000) >> 24;
 8000a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	0e02      	lsrs	r2, r0, #24
 8000a92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a96:	0e0b      	lsrs	r3, r1, #24
 8000a98:	b2d3      	uxtb	r3, r2
 8000a9a:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x0000000000FF0000) >> 16;
 8000a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	0c02      	lsrs	r2, r0, #16
 8000aaa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000aae:	0c0b      	lsrs	r3, r1, #16
 8000ab0:	b2d3      	uxtb	r3, r2
 8000ab2:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = (dwData & 0x000000000000FF00) >> 8;
 8000ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	0a02      	lsrs	r2, r0, #8
 8000ac2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ac6:	0a0b      	lsrs	r3, r1, #8
 8000ac8:	b2d3      	uxtb	r3, r2
 8000aca:	75fb      	strb	r3, [r7, #23]
		bBuf[4] = dwData & 0x00000000000000FF;
 8000acc:	783b      	ldrb	r3, [r7, #0]
 8000ace:	763b      	strb	r3, [r7, #24]

		bRes = WriteFrame(bID, wAddr, bBuf, 5, bWriteType);
 8000ad0:	f107 0214 	add.w	r2, r7, #20
 8000ad4:	89b9      	ldrh	r1, [r7, #12]
 8000ad6:	7bf8      	ldrb	r0, [r7, #15]
 8000ad8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2305      	movs	r3, #5
 8000ae0:	f7ff fe67 	bl	80007b2 <WriteFrame>
 8000ae4:	61f8      	str	r0, [r7, #28]
		break;
 8000ae6:	e0f2      	b.n	8000cce <WriteReg+0x3b6>
	case 6:
		bBuf[0] = (dwData & 0x0000FF0000000000) >> 40;
 8000ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	0a0a      	lsrs	r2, r1, #8
 8000af6:	2300      	movs	r3, #0
 8000af8:	b2d3      	uxtb	r3, r2
 8000afa:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x000000FF00000000) >> 32;
 8000afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	000a      	movs	r2, r1
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	b2d3      	uxtb	r3, r2
 8000b0e:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x00000000FF000000) >> 24;
 8000b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	0e02      	lsrs	r2, r0, #24
 8000b1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b22:	0e0b      	lsrs	r3, r1, #24
 8000b24:	b2d3      	uxtb	r3, r2
 8000b26:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = (dwData & 0x0000000000FF0000) >> 16;
 8000b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	0c02      	lsrs	r2, r0, #16
 8000b36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b3a:	0c0b      	lsrs	r3, r1, #16
 8000b3c:	b2d3      	uxtb	r3, r2
 8000b3e:	75fb      	strb	r3, [r7, #23]
		bBuf[4] = (dwData & 0x000000000000FF00) >> 8;
 8000b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b44:	f04f 0200 	mov.w	r2, #0
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	0a02      	lsrs	r2, r0, #8
 8000b4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000b52:	0a0b      	lsrs	r3, r1, #8
 8000b54:	b2d3      	uxtb	r3, r2
 8000b56:	763b      	strb	r3, [r7, #24]
		bBuf[5] = dwData & 0x00000000000000FF;
 8000b58:	783b      	ldrb	r3, [r7, #0]
 8000b5a:	767b      	strb	r3, [r7, #25]

		bRes = WriteFrame(bID, wAddr, bBuf, 6, bWriteType);
 8000b5c:	f107 0214 	add.w	r2, r7, #20
 8000b60:	89b9      	ldrh	r1, [r7, #12]
 8000b62:	7bf8      	ldrb	r0, [r7, #15]
 8000b64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	f7ff fe21 	bl	80007b2 <WriteFrame>
 8000b70:	61f8      	str	r0, [r7, #28]
		break;
 8000b72:	e0ac      	b.n	8000cce <WriteReg+0x3b6>
	case 7:
		bBuf[0] = (dwData & 0x00FF000000000000) >> 48;
 8000b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	f04f 0300 	mov.w	r3, #0
 8000b80:	0c0a      	lsrs	r2, r1, #16
 8000b82:	2300      	movs	r3, #0
 8000b84:	b2d3      	uxtb	r3, r2
 8000b86:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x0000FF0000000000) >> 40;
 8000b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	0a0a      	lsrs	r2, r1, #8
 8000b96:	2300      	movs	r3, #0
 8000b98:	b2d3      	uxtb	r3, r2
 8000b9a:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x000000FF00000000) >> 32;
 8000b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	000a      	movs	r2, r1
 8000baa:	2300      	movs	r3, #0
 8000bac:	b2d3      	uxtb	r3, r2
 8000bae:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = (dwData & 0x00000000FF000000) >> 24;
 8000bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	0e02      	lsrs	r2, r0, #24
 8000bbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000bc2:	0e0b      	lsrs	r3, r1, #24
 8000bc4:	b2d3      	uxtb	r3, r2
 8000bc6:	75fb      	strb	r3, [r7, #23]
		bBuf[4] = (dwData & 0x0000000000FF0000) >> 16;
 8000bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	0c02      	lsrs	r2, r0, #16
 8000bd6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bda:	0c0b      	lsrs	r3, r1, #16
 8000bdc:	b2d3      	uxtb	r3, r2
 8000bde:	763b      	strb	r3, [r7, #24]
		bBuf[5] = (dwData & 0x000000000000FF00) >> 8;
 8000be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	0a02      	lsrs	r2, r0, #8
 8000bee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000bf2:	0a0b      	lsrs	r3, r1, #8
 8000bf4:	b2d3      	uxtb	r3, r2
 8000bf6:	767b      	strb	r3, [r7, #25]
		bBuf[6] = dwData & 0x00000000000000FF;
 8000bf8:	783b      	ldrb	r3, [r7, #0]
 8000bfa:	76bb      	strb	r3, [r7, #26]
		;

		bRes = WriteFrame(bID, wAddr, bBuf, 7, bWriteType);
 8000bfc:	f107 0214 	add.w	r2, r7, #20
 8000c00:	89b9      	ldrh	r1, [r7, #12]
 8000c02:	7bf8      	ldrb	r0, [r7, #15]
 8000c04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	f7ff fdd1 	bl	80007b2 <WriteFrame>
 8000c10:	61f8      	str	r0, [r7, #28]
		break;
 8000c12:	e05c      	b.n	8000cce <WriteReg+0x3b6>
 8000c14:	08006e64 	.word	0x08006e64
	case 8:
		bBuf[0] = (dwData & 0xFF00000000000000) >> 56;
 8000c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	0e0a      	lsrs	r2, r1, #24
 8000c26:	2300      	movs	r3, #0
 8000c28:	b2d3      	uxtb	r3, r2
 8000c2a:	753b      	strb	r3, [r7, #20]
		bBuf[1] = (dwData & 0x00FF000000000000) >> 48;
 8000c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c30:	f04f 0200 	mov.w	r2, #0
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	0c0a      	lsrs	r2, r1, #16
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	b2d3      	uxtb	r3, r2
 8000c3e:	757b      	strb	r3, [r7, #21]
		bBuf[2] = (dwData & 0x0000FF0000000000) >> 40;
 8000c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	0a0a      	lsrs	r2, r1, #8
 8000c4e:	2300      	movs	r3, #0
 8000c50:	b2d3      	uxtb	r3, r2
 8000c52:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = (dwData & 0x000000FF00000000) >> 32;
 8000c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	000a      	movs	r2, r1
 8000c62:	2300      	movs	r3, #0
 8000c64:	b2d3      	uxtb	r3, r2
 8000c66:	75fb      	strb	r3, [r7, #23]
		bBuf[4] = (dwData & 0x00000000FF000000) >> 24;
 8000c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c6c:	f04f 0200 	mov.w	r2, #0
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	0e02      	lsrs	r2, r0, #24
 8000c76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c7a:	0e0b      	lsrs	r3, r1, #24
 8000c7c:	b2d3      	uxtb	r3, r2
 8000c7e:	763b      	strb	r3, [r7, #24]
		bBuf[5] = (dwData & 0x0000000000FF0000) >> 16;
 8000c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c84:	f04f 0200 	mov.w	r2, #0
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	0c02      	lsrs	r2, r0, #16
 8000c8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c92:	0c0b      	lsrs	r3, r1, #16
 8000c94:	b2d3      	uxtb	r3, r2
 8000c96:	767b      	strb	r3, [r7, #25]
		bBuf[6] = (dwData & 0x000000000000FF00) >> 8;
 8000c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	0a02      	lsrs	r2, r0, #8
 8000ca6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000caa:	0a0b      	lsrs	r3, r1, #8
 8000cac:	b2d3      	uxtb	r3, r2
 8000cae:	76bb      	strb	r3, [r7, #26]
		bBuf[7] = dwData & 0x00000000000000FF;
 8000cb0:	783b      	ldrb	r3, [r7, #0]
 8000cb2:	76fb      	strb	r3, [r7, #27]

		bRes = WriteFrame(bID, wAddr, bBuf, 8, bWriteType);
 8000cb4:	f107 0214 	add.w	r2, r7, #20
 8000cb8:	89b9      	ldrh	r1, [r7, #12]
 8000cba:	7bf8      	ldrb	r0, [r7, #15]
 8000cbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	f7ff fd75 	bl	80007b2 <WriteFrame>
 8000cc8:	61f8      	str	r0, [r7, #28]
		break;
 8000cca:	e000      	b.n	8000cce <WriteReg+0x3b6>
	default:
		break;
 8000ccc:	bf00      	nop
	}
	return bRes;
 8000cce:	69fb      	ldr	r3, [r7, #28]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <InitPL455>:

void InitPL455() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8

	//Flag Reset
	fatalError = 0;                         //fatal error flag
 8000cde:	4b84      	ldr	r3, [pc, #528]	; (8000ef0 <InitPL455+0x218>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
	uartFault = 0;                          //uart error flag
 8000ce4:	4b83      	ldr	r3, [pc, #524]	; (8000ef4 <InitPL455+0x21c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
	boradFaults = 0;                        //Detection board error flag
 8000cea:	4b83      	ldr	r3, [pc, #524]	; (8000ef8 <InitPL455+0x220>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]

	//Inital Wake
	WakePL445();
 8000cf0:	f7ff fcf2 	bl	80006d8 <WakePL445>

	// Wake all devices
	// The wake tone will awaken any device that is already in shutdown and the pwrdown will shutdown any device
	// that is already awake. The least number of times to sequence wake and pwrdown will be half the number of
	// boards to cover the worst case combination of boards already awake or shutdown.
	for (int nDev_ID = 0; nDev_ID < TOTALBOARDS >> 1; nDev_ID++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e017      	b.n	8000d2a <InitPL455+0x52>
		WriteReg(nDev_ID, DEVICE_CONTROL, 0x40, 1, FRMWRT_ALL_NR); // send out broadcast pwrdown command
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	b2d8      	uxtb	r0, r3
 8000cfe:	2370      	movs	r3, #112	; 0x70
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	2301      	movs	r3, #1
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	f04f 0240 	mov.w	r2, #64	; 0x40
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	210c      	movs	r1, #12
 8000d10:	f7ff fe02 	bl	8000918 <WriteReg>
//		ThisThread::sleep_for(20ms);
		HAL_Delay(20);
 8000d14:	2014      	movs	r0, #20
 8000d16:	f000 fff7 	bl	8001d08 <HAL_Delay>
		WakePL445();
 8000d1a:	f7ff fcdd 	bl	80006d8 <WakePL445>
//		ThisThread::sleep_for(20ms);
		HAL_Delay(20);
 8000d1e:	2014      	movs	r0, #20
 8000d20:	f000 fff2 	bl	8001d08 <HAL_Delay>
	for (int nDev_ID = 0; nDev_ID < TOTALBOARDS >> 1; nDev_ID++) {
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	dde4      	ble.n	8000cfa <InitPL455+0x22>
	}

	// Mask Customer Checksum Fault bit
	WriteReg(0, FAULT_MASK_DEV, 0x8000, 2, FRMWRT_ALL_NR); // clear all fault summary flags
 8000d30:	2370      	movs	r3, #112	; 0x70
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	216b      	movs	r1, #107	; 0x6b
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fde8 	bl	8000918 <WriteReg>

	// Clear all faults
	WriteReg(0, FAULT_SUM, 0xFFC0, 2, FRMWRT_ALL_NR); // clear all fault summary flags
 8000d48:	2370      	movs	r3, #112	; 0x70
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	2152      	movs	r1, #82	; 0x52
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fddc 	bl	8000918 <WriteReg>
	WriteReg(0, DEVICE_STATUS, 0x38, 1, FRMWRT_ALL_NR); // clear fault flags in the system status register
 8000d60:	2370      	movs	r3, #112	; 0x70
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	2301      	movs	r3, #1
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	f04f 0238 	mov.w	r2, #56	; 0x38
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	2151      	movs	r1, #81	; 0x51
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fdd0 	bl	8000918 <WriteReg>

	// Auto-address all boards (section 1.2.2)
	WriteReg(0, DEVICE_CONFIG, 0x19, 1, FRMWRT_ALL_NR); // set auto-address mode on all boards
 8000d78:	2370      	movs	r3, #112	; 0x70
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	f04f 0219 	mov.w	r2, #25
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	210e      	movs	r1, #14
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fdc4 	bl	8000918 <WriteReg>
	WriteReg(0, DEVICE_CONTROL, 0x08, 1, FRMWRT_ALL_NR); // enter auto address mode on all boards, the next write to this ID will be its address
 8000d90:	2370      	movs	r3, #112	; 0x70
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	2301      	movs	r3, #1
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	f04f 0208 	mov.w	r2, #8
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	210c      	movs	r1, #12
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fdb8 	bl	8000918 <WriteReg>

	// Set addresses for all boards in daisy-chain (section 1.2.3)
	for (int nDev_ID = 0; nDev_ID < TOTALBOARDS; nDev_ID++) {
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	e00f      	b.n	8000dce <InitPL455+0xf6>
		WriteReg(nDev_ID, DEVICE_ADDR, nDev_ID, 1, FRMWRT_ALL_NR); // send address to each board
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	b2d8      	uxtb	r0, r3
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	461a      	mov	r2, r3
 8000db6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000dba:	2170      	movs	r1, #112	; 0x70
 8000dbc:	9101      	str	r1, [sp, #4]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	9100      	str	r1, [sp, #0]
 8000dc2:	210a      	movs	r1, #10
 8000dc4:	f7ff fda8 	bl	8000918 <WriteReg>
	for (int nDev_ID = 0; nDev_ID < TOTALBOARDS; nDev_ID++) {
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b09      	cmp	r3, #9
 8000dd2:	ddec      	ble.n	8000dae <InitPL455+0xd6>
	}

	// Enable all communication interfaces on all boards in the stack (section 1.2.1)
	//default 250k bound, Communication Diresction: BMS Master to Slaves
	WriteReg(0, DEVICE_COMCONFIG, 0x10F8, 2, FRMWRT_ALL_NR); // set communications baud rate and enable all interfaces on all boards in stack
 8000dd4:	2370      	movs	r3, #112	; 0x70
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	2302      	movs	r3, #2
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	f241 02f8 	movw	r2, #4344	; 0x10f8
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	2110      	movs	r1, #16
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fd96 	bl	8000918 <WriteReg>

	uint32_t wTemp = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
//
//
////		ThisThread::sleep_for(50ms);
//	}

	HAL_Delay(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 ff89 	bl	8001d08 <HAL_Delay>

	// Clear all faults
	WriteReg(0, FAULT_SUM, 0xFFC0, 2, FRMWRT_ALL_NR); // clear all fault summary flags
 8000df6:	2370      	movs	r3, #112	; 0x70
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	2152      	movs	r1, #82	; 0x52
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fd85 	bl	8000918 <WriteReg>
	WriteReg(0, DEVICE_STATUS, 0x38, 1, FRMWRT_ALL_NR); // clear fault flags in the system status register
 8000e0e:	2370      	movs	r3, #112	; 0x70
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	2301      	movs	r3, #1
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	f04f 0238 	mov.w	r2, #56	; 0x38
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	2151      	movs	r1, #81	; 0x51
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fd79 	bl	8000918 <WriteReg>

	HAL_Delay(10);
 8000e26:	200a      	movs	r0, #10
 8000e28:	f000 ff6e 	bl	8001d08 <HAL_Delay>

// Configure AFE (section 2.2.1)

	int nDev_ID = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
	WriteReg(nDev_ID, DEVICE_RESERVED, 0x00, 1, FRMWRT_SGL_NR); // set 0 mux delay
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2d8      	uxtb	r0, r3
 8000e34:	2310      	movs	r3, #16
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	213c      	movs	r1, #60	; 0x3c
 8000e46:	f7ff fd67 	bl	8000918 <WriteReg>
	WriteReg(nDev_ID, DEVICE_SMPLDELAY, 0x00, 1, FRMWRT_SGL_NR); // set 0 initial delay
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2d8      	uxtb	r0, r3
 8000e4e:	2310      	movs	r3, #16
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	2301      	movs	r3, #1
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	213d      	movs	r1, #61	; 0x3d
 8000e60:	f7ff fd5a 	bl	8000918 <WriteReg>

// Configure voltage and internal sample period (section 2.2.2)
	WriteReg(nDev_ID, DEVICE_CELL_SPER, 0xCC, 1, FRMWRT_SGL_NR); // set 99.92us ADC sampling period
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2d8      	uxtb	r0, r3
 8000e68:	2310      	movs	r3, #16
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	f04f 02cc 	mov.w	r2, #204	; 0xcc
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	213e      	movs	r1, #62	; 0x3e
 8000e7a:	f7ff fd4d 	bl	8000918 <WriteReg>

// Configure the oversampling rate (section 2.2.3)
	WriteReg(nDev_ID, DEVICE_OVERSMPL, 0x00, 1, FRMWRT_SGL_NR); // set no oversampling period
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2d8      	uxtb	r0, r3
 8000e82:	2310      	movs	r3, #16
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	2107      	movs	r1, #7
 8000e94:	f7ff fd40 	bl	8000918 <WriteReg>

// select all cell channels 1-8, AUX channels 0 and 1, and internal digital die and internal analog die temperatures
	WriteReg(0, DEVICE_CHANNELS, setNumOfCellsAndTemps(TOTALCELLS, TOTALTEMP),4, FRMWRT_ALL_NR);
 8000e98:	2107      	movs	r1, #7
 8000e9a:	200e      	movs	r0, #14
 8000e9c:	f7ff fc34 	bl	8000708 <setNumOfCellsAndTemps>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	2170      	movs	r1, #112	; 0x70
 8000ea6:	9101      	str	r1, [sp, #4]
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	9100      	str	r1, [sp, #0]
 8000eac:	2103      	movs	r1, #3
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fd32 	bl	8000918 <WriteReg>

// * * * * Thresholds Note: if you don't set the Threshold limis for specific fault,
//the bq chip will not report specific fault

// Set cell over-voltage and cell under-voltage thresholds on a single board (section 2.2.6.1)
	nDev_ID = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
// Set cell over-voltage and cell under-voltage thresholds on all boards simultaneously (section 2.2.6.2)

	WriteReg(0, DEVICE_CELL_UV, 0xD1EC, 2, FRMWRT_ALL_NR); // set OV threshold = 4.1000V
 8000eb8:	2370      	movs	r3, #112	; 0x70
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	f24d 12ec 	movw	r2, #53740	; 0xd1ec
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	2190      	movs	r1, #144	; 0x90
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fd24 	bl	8000918 <WriteReg>
	WriteReg(0, DEVICE_CELL_OV, 0x6148, 2, FRMWRT_ALL_NR); // set UV threshold = 1.9000V
 8000ed0:	2370      	movs	r3, #112	; 0x70
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	f246 1248 	movw	r2, #24904	; 0x6148
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	218e      	movs	r1, #142	; 0x8e
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fd18 	bl	8000918 <WriteReg>

}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000030 	.word	0x20000030
 8000ef4:	20000031 	.word	0x20000031
 8000ef8:	20000034 	.word	0x20000034

08000efc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f02:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <MX_CAN1_Init+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f1a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000f1e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_CAN1_Init+0x64>)
 8000f4c:	f000 ff00 	bl	8001d50 <HAL_CAN_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f56:	f000 f950 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000054 	.word	0x20000054
 8000f64:	40006400 	.word	0x40006400

08000f68 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a20      	ldr	r2, [pc, #128]	; (8001008 <HAL_CAN_MspInit+0xa0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d139      	bne.n	8000ffe <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_CAN_MspInit+0xa4>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a1f      	ldr	r2, [pc, #124]	; (800100c <HAL_CAN_MspInit+0xa4>)
 8000f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_CAN_MspInit+0xa4>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_CAN_MspInit+0xa4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_CAN_MspInit+0xa4>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_CAN_MspInit+0xa4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fcc:	2309      	movs	r3, #9
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f001 fe8b 	bl	8002cf4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2014      	movs	r0, #20
 8000fe4:	f001 fddc 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f001 fdf5 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2015      	movs	r0, #21
 8000ff4:	f001 fdd4 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ff8:	2015      	movs	r0, #21
 8000ffa:	f001 fded 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40006400 	.word	0x40006400
 800100c:	40021000 	.word	0x40021000

08001010 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <MX_GPIO_Init+0x124>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <MX_GPIO_Init+0x124>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b40      	ldr	r3, [pc, #256]	; (8001134 <MX_GPIO_Init+0x124>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <MX_GPIO_Init+0x124>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a3c      	ldr	r2, [pc, #240]	; (8001134 <MX_GPIO_Init+0x124>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <MX_GPIO_Init+0x124>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b37      	ldr	r3, [pc, #220]	; (8001134 <MX_GPIO_Init+0x124>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a36      	ldr	r2, [pc, #216]	; (8001134 <MX_GPIO_Init+0x124>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <MX_GPIO_Init+0x124>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <MX_GPIO_Init+0x124>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a30      	ldr	r2, [pc, #192]	; (8001134 <MX_GPIO_Init+0x124>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <MX_GPIO_Init+0x124>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7123 	mov.w	r1, #652	; 0x28c
 800108c:	482a      	ldr	r0, [pc, #168]	; (8001138 <MX_GPIO_Init+0x128>)
 800108e:	f001 ffdb 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f001 ffd4 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Uhvacc_Measurement_Pin|Ihvacc_Measurement_Pin;
 80010a0:	2303      	movs	r3, #3
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_GPIO_Init+0x128>)
 80010b4:	f001 fe1e 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin;
 80010b8:	f44f 7323 	mov.w	r3, #652	; 0x28c
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4819      	ldr	r0, [pc, #100]	; (8001138 <MX_GPIO_Init+0x128>)
 80010d2:	f001 fe0f 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AirPlusStatus_Pin|AirMinusStatus_Pin;
 80010d6:	23c0      	movs	r3, #192	; 0xc0
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f001 fe02 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Precharge_Relay_Status_Pin|SHD_Status_Pin|bmsFault_Pin;
 80010f0:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_GPIO_Init+0x128>)
 8001106:	f001 fdf5 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_SHD_Control_Pin;
 800110a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_SHD_Control_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f001 fde5 	bl	8002cf4 <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	48000800 	.word	0x48000800

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f000 fdbd 	bl	8001cbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f813 	bl	800116e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f7ff ff62 	bl	8001010 <MX_GPIO_Init>
  MX_TIM2_Init();
 800114c:	f000 f9ae 	bl	80014ac <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001150:	f000 fc16 	bl	8001980 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8001154:	f000 fbe4 	bl	8001920 <MX_UART5_Init>
  MX_CAN1_Init();
 8001158:	f7ff fed0 	bl	8000efc <MX_CAN1_Init>
  MX_TIM4_Init();
 800115c:	f000 fa26 	bl	80015ac <MX_TIM4_Init>
  MX_TIM5_Init();
 8001160:	f000 fa7c 	bl	800165c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  userMainInit();
 8001164:	f000 fd12 	bl	8001b8c <userMainInit>
  userMain();
 8001168:	f000 fd52 	bl	8001c10 <userMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
 800116c:	e7fe      	b.n	800116c <main+0x30>

0800116e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b096      	sub	sp, #88	; 0x58
 8001172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2244      	movs	r2, #68	; 0x44
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f005 fe5d 	bl	8006e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001190:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001194:	f001 ff7e 	bl	8003094 <HAL_PWREx_ControlVoltageScaling>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800119e:	f000 f82c 	bl	80011fa <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011a2:	2310      	movs	r3, #16
 80011a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011a6:	2301      	movs	r3, #1
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011ae:	2360      	movs	r3, #96	; 0x60
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 ffc0 	bl	8003140 <HAL_RCC_OscConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011c6:	f000 f818 	bl	80011fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fb92 	bl	800390c <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011ee:	f000 f804 	bl	80011fa <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3758      	adds	r7, #88	; 0x58
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fe:	b672      	cpsid	i
}
 8001200:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001202:	e7fe      	b.n	8001202 <Error_Handler+0x8>

08001204 <closeAirMinus>:

	HAL_GPIO_WritePin(CloseAirMinus_GPIO_Port, CloseAirMinus_Pin, 1);

}
void closeAirMinus()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CloseAirMinus_GPIO_Port, CloseAirMinus_Pin, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2108      	movs	r1, #8
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <closeAirMinus+0x14>)
 800120e:	f001 ff1b 	bl	8003048 <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	48000800 	.word	0x48000800

0800121c <closeAirPlus>:
void openAirPlus()
{
	HAL_GPIO_WritePin(CloseAirPlus_GPIO_Port, CloseAirPlus_Pin, 1);
}
void closeAirPlus()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CloseAirPlus_GPIO_Port, CloseAirPlus_Pin, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2104      	movs	r1, #4
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <closeAirPlus+0x14>)
 8001226:	f001 ff0f 	bl	8003048 <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	48000800 	.word	0x48000800

08001234 <closePrChgRelay>:
void openPrChgRelay()
{
	HAL_GPIO_WritePin(Prechrage_Control_GPIO_Port, Prechrage_Control_Pin, 1);
}
void closePrChgRelay()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Prechrage_Control_GPIO_Port, Prechrage_Control_Pin, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <closePrChgRelay+0x14>)
 800123e:	f001 ff03 	bl	8003048 <HAL_GPIO_WritePin>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	48000800 	.word	0x48000800

0800124c <closeSHD>:
void openSHD()
{
	HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, 0);
}
void closeSHD()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f001 fef5 	bl	8003048 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <masterInit>:




void masterInit()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    closeAirMinus();
 8001268:	f7ff ffcc 	bl	8001204 <closeAirMinus>
    closeAirPlus();
 800126c:	f7ff ffd6 	bl	800121c <closeAirPlus>
    closePrChgRelay();
 8001270:	f7ff ffe0 	bl	8001234 <closePrChgRelay>
    //TO DO: openSHD, then check
    closeSHD();
 8001274:	f7ff ffea 	bl	800124c <closeSHD>

    //CAN Flags Initialization
    airPlus = 0;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <masterInit+0x38>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
    airMinus = 0;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <masterInit+0x3c>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    prchStatus = 0;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <masterInit+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
    shdStatus = 0;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <masterInit+0x44>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

    //Clear successful Precharge sequence flag
    prechargeStatus = 0;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <masterInit+0x48>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000038 	.word	0x20000038
 80012a0:	20000039 	.word	0x20000039
 80012a4:	2000003a 	.word	0x2000003a
 80012a8:	2000003b 	.word	0x2000003b
 80012ac:	2000007c 	.word	0x2000007c

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_MspInit+0x44>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_MspInit+0x44>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6613      	str	r3, [r2, #96]	; 0x60
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_MspInit+0x44>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_MspInit+0x44>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_MspInit+0x44>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6593      	str	r3, [r2, #88]	; 0x58
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_MspInit+0x44>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	2019      	movs	r0, #25
 800130e:	f001 fc47 	bl	8002ba0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001312:	2019      	movs	r0, #25
 8001314:	f001 fc60 	bl	8002bd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_InitTick+0x9c>)
 800131a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_InitTick+0x9c>)
 800131e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001322:	6613      	str	r3, [r2, #96]	; 0x60
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_InitTick+0x9c>)
 8001326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001330:	f107 0210 	add.w	r2, r7, #16
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fc8c 	bl	8003c58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001340:	f002 fc74 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8001344:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <HAL_InitTick+0xa0>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9b      	lsrs	r3, r3, #18
 8001350:	3b01      	subs	r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_InitTick+0xa4>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_InitTick+0xa8>)
 8001358:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_InitTick+0xa4>)
 800135c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001360:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_InitTick+0xa4>)
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_InitTick+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_InitTick+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <HAL_InitTick+0xa4>)
 8001376:	f003 f9bd 	bl	80046f4 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d104      	bne.n	800138a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <HAL_InitTick+0xa4>)
 8001382:	f003 fa0f 	bl	80047a4 <HAL_TIM_Base_Start_IT>
 8001386:	4603      	mov	r3, r0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3730      	adds	r7, #48	; 0x30
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	431bde83 	.word	0x431bde83
 800139c:	20000080 	.word	0x20000080
 80013a0:	40012c00 	.word	0x40012c00

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <CAN1_RX0_IRQHandler+0x10>)
 8001402:	f001 f8e5 	bl	80025d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000054 	.word	0x20000054

08001410 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <CAN1_RX1_IRQHandler+0x10>)
 8001416:	f001 f8db 	bl	80025d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000054 	.word	0x20000054

08001424 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800142a:	f003 fadc 	bl	80049e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000080 	.word	0x20000080

08001438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <TIM2_IRQHandler+0x10>)
 800143e:	f003 fad2 	bl	80049e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000164 	.word	0x20000164

0800144c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <USART1_IRQHandler+0x10>)
 8001452:	f004 fabb 	bl	80059cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000280 	.word	0x20000280

08001460 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM5_IRQHandler+0x10>)
 8001466:	f003 fabe 	bl	80049e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000118 	.word	0x20000118

08001474 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <UART5_IRQHandler+0x10>)
 800147a:	f004 faa7 	bl	80059cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001fc 	.word	0x200001fc

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001502:	4829      	ldr	r0, [pc, #164]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001504:	f003 f9be 	bl	8004884 <HAL_TIM_IC_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800150e:	f7ff fe74 	bl	80011fa <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001512:	2304      	movs	r3, #4
 8001514:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001516:	2360      	movs	r3, #96	; 0x60
 8001518:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800151a:	2302      	movs	r3, #2
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	481e      	ldr	r0, [pc, #120]	; (80015a8 <MX_TIM2_Init+0xfc>)
 800152e:	f003 fcde 	bl	8004eee <HAL_TIM_SlaveConfigSynchro>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001538:	f7ff fe5f 	bl	80011fa <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001556:	f003 fb65 	bl	8004c24 <HAL_TIM_IC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001560:	f7ff fe4b 	bl	80011fa <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001564:	2302      	movs	r3, #2
 8001566:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001568:	2301      	movs	r3, #1
 800156a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2204      	movs	r2, #4
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001576:	f003 fb55 	bl	8004c24 <HAL_TIM_IC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001580:	f7ff fe3b 	bl	80011fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001592:	f004 f83d 	bl	8005610 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800159c:	f7ff fe2d 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000164 	.word	0x20000164

080015ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_TIM4_Init+0xa8>)
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <MX_TIM4_Init+0xac>)
 80015ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_TIM4_Init+0xa8>)
 80015d2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80015d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MX_TIM4_Init+0xa8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_TIM4_Init+0xa8>)
 80015e0:	2264      	movs	r2, #100	; 0x64
 80015e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_TIM4_Init+0xa8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_TIM4_Init+0xa8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015f0:	4818      	ldr	r0, [pc, #96]	; (8001654 <MX_TIM4_Init+0xa8>)
 80015f2:	f003 f87f 	bl	80046f4 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80015fc:	f7ff fdfd 	bl	80011fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001604:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4619      	mov	r1, r3
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <MX_TIM4_Init+0xa8>)
 800160e:	f003 fba5 	bl	8004d5c <HAL_TIM_ConfigClockSource>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001618:	f7ff fdef 	bl	80011fa <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 800161c:	2108      	movs	r1, #8
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_TIM4_Init+0xa8>)
 8001620:	f003 f987 	bl	8004932 <HAL_TIM_OnePulse_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800162a:	f7ff fde6 	bl	80011fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_TIM4_Init+0xa8>)
 800163c:	f003 ffe8 	bl	8005610 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001646:	f7ff fdd8 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200000cc 	.word	0x200000cc
 8001658:	40000800 	.word	0x40000800

0800165c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_TIM5_Init+0x94>)
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <MX_TIM5_Init+0x98>)
 800167e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2000;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_TIM5_Init+0x94>)
 8001682:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001686:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_TIM5_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_TIM5_Init+0x94>)
 8001690:	2264      	movs	r2, #100	; 0x64
 8001692:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_TIM5_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_TIM5_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_TIM5_Init+0x94>)
 80016a2:	f003 f827 	bl	80046f4 <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80016ac:	f7ff fda5 	bl	80011fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_TIM5_Init+0x94>)
 80016be:	f003 fb4d 	bl	8004d5c <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80016c8:	f7ff fd97 	bl	80011fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_TIM5_Init+0x94>)
 80016da:	f003 ff99 	bl	8005610 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f7ff fd89 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000118 	.word	0x20000118
 80016f4:	40000c00 	.word	0x40000c00

080016f8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d12f      	bne.n	800177a <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_TIM_IC_MspInit+0x8c>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_TIM_IC_MspInit+0x8c>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_TIM_IC_MspInit+0x8c>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_TIM_IC_MspInit+0x8c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <HAL_TIM_IC_MspInit+0x8c>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_TIM_IC_MspInit+0x8c>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800174a:	2308      	movs	r3, #8
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175a:	2301      	movs	r3, #1
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4808      	ldr	r0, [pc, #32]	; (8001788 <HAL_TIM_IC_MspInit+0x90>)
 8001766:	f001 fac5 	bl	8002cf4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	201c      	movs	r0, #28
 8001770:	f001 fa16 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001774:	201c      	movs	r0, #28
 8001776:	f001 fa2f 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	48000400 	.word	0x48000400

0800178c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <HAL_TIM_Base_MspInit+0x68>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10c      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6593      	str	r3, [r2, #88]	; 0x58
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80017b6:	e018      	b.n	80017ea <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM5)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <HAL_TIM_Base_MspInit+0x70>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d113      	bne.n	80017ea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6593      	str	r3, [r2, #88]	; 0x58
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_TIM_Base_MspInit+0x6c>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2032      	movs	r0, #50	; 0x32
 80017e0:	f001 f9de 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017e4:	2032      	movs	r0, #50	; 0x32
 80017e6:	f001 f9f7 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40000800 	.word	0x40000800
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40000c00 	.word	0x40000c00

08001800 <HAL_UART_RxCpltCallback>:

uint8_t recBuf1[32];
uint8_t recBuf5[32];

volatile int receiveCnt=0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

	if(huart->Instance==&htim5.Instance){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_UART_RxCpltCallback+0x6c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d125      	bne.n	800185e <HAL_UART_RxCpltCallback+0x5e>
		voltageBuff[receiveCnt]=recBuf1;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_UART_RxCpltCallback+0x70>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_UART_RxCpltCallback+0x74>)
 8001818:	4917      	ldr	r1, [pc, #92]	; (8001878 <HAL_UART_RxCpltCallback+0x78>)
 800181a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		receiveCnt=(receiveCnt+1)%10;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_RxCpltCallback+0x70>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_UART_RxCpltCallback+0x7c>)
 8001826:	fb83 2301 	smull	r2, r3, r3, r1
 800182a:	109a      	asrs	r2, r3, #2
 800182c:	17cb      	asrs	r3, r1, #31
 800182e:	1ad2      	subs	r2, r2, r3
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	1aca      	subs	r2, r1, r3
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_UART_RxCpltCallback+0x70>)
 800183c:	601a      	str	r2, [r3, #0]
		if(abs(receiveCnt-counter)>1){
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_UART_RxCpltCallback+0x70>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_UART_RxCpltCallback+0x80>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	bfb8      	it	lt
 800184c:	425b      	neglt	r3, r3
 800184e:	2b01      	cmp	r3, #1
 8001850:	dd05      	ble.n	800185e <HAL_UART_RxCpltCallback+0x5e>
			voltageBuff[receiveCnt]="greska";
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_UART_RxCpltCallback+0x70>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_UART_RxCpltCallback+0x74>)
 8001858:	490a      	ldr	r1, [pc, #40]	; (8001884 <HAL_UART_RxCpltCallback+0x84>)
 800185a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000118 	.word	0x20000118
 8001870:	2000003c 	.word	0x2000003c
 8001874:	20000304 	.word	0x20000304
 8001878:	200001b8 	.word	0x200001b8
 800187c:	66666667 	.word	0x66666667
 8001880:	20000048 	.word	0x20000048
 8001884:	08006e6c 	.word	0x08006e6c

08001888 <UART_AsyncTransmitString>:

uartMsg tmp ;
void UART_AsyncTransmitString(int id, uint8_t const trStr[]) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	if (trStr != NULL) {
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d017      	beq.n	80018c8 <UART_AsyncTransmitString+0x40>
		if(id==1){
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10a      	bne.n	80018b4 <UART_AsyncTransmitString+0x2c>
			HAL_UART_Transmit(&huart1, trStr, sizeof(uint8_t)*strlen(trStr), 100);
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f7fe fc92 	bl	80001c8 <strlen>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	4808      	ldr	r0, [pc, #32]	; (80018d0 <UART_AsyncTransmitString+0x48>)
 80018ae:	f003 ffa3 	bl	80057f8 <HAL_UART_Transmit>
		}else{
			HAL_UART_Transmit(&huart5, trStr, sizeof(uint8_t)*strlen(trStr), 100);
		}
	}
}
 80018b2:	e009      	b.n	80018c8 <UART_AsyncTransmitString+0x40>
			HAL_UART_Transmit(&huart5, trStr, sizeof(uint8_t)*strlen(trStr), 100);
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f7fe fc87 	bl	80001c8 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b29a      	uxth	r2, r3
 80018be:	2364      	movs	r3, #100	; 0x64
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <UART_AsyncTransmitString+0x4c>)
 80018c4:	f003 ff98 	bl	80057f8 <HAL_UART_Transmit>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000280 	.word	0x20000280
 80018d4:	200001fc 	.word	0x200001fc

080018d8 <UART_Receive>:

// RECEIVE UTIL
// -----------------------------------------------------------------------------

void UART_Receive(int id,int len){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	if(id==1){
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <UART_Receive+0x20>
		HAL_UART_Receive_IT(&huart1, recBuf1, len);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <UART_Receive+0x38>)
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <UART_Receive+0x3c>)
 80018f2:	f004 f815 	bl	8005920 <HAL_UART_Receive_IT>
	}else{
		HAL_UART_Receive_IT(&huart5, recBuf5, len);
	}
}
 80018f6:	e006      	b.n	8001906 <UART_Receive+0x2e>
		HAL_UART_Receive_IT(&huart5, recBuf5, len);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4906      	ldr	r1, [pc, #24]	; (8001918 <UART_Receive+0x40>)
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <UART_Receive+0x44>)
 8001902:	f004 f80d 	bl	8005920 <HAL_UART_Receive_IT>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001b8 	.word	0x200001b8
 8001914:	20000280 	.word	0x20000280
 8001918:	200001dc 	.word	0x200001dc
 800191c:	200001fc 	.word	0x200001fc

08001920 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_UART5_Init+0x58>)
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <MX_UART5_Init+0x5c>)
 8001928:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_UART5_Init+0x58>)
 800192c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001930:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_UART5_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_UART5_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_UART5_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_UART5_Init+0x58>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_UART5_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_UART5_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_UART5_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_UART5_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_UART5_Init+0x58>)
 8001964:	f003 fefa 	bl	800575c <HAL_UART_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800196e:	f7ff fc44 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200001fc 	.word	0x200001fc
 800197c:	40005000 	.word	0x40005000

08001980 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <MX_USART1_UART_Init+0x58>)
 8001988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 800198c:	4a13      	ldr	r2, [pc, #76]	; (80019dc <MX_USART1_UART_Init+0x5c>)
 800198e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 80019a4:	220c      	movs	r2, #12
 80019a6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 80019bc:	2200      	movs	r2, #0
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 80019c2:	f003 fecb 	bl	800575c <HAL_UART_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80019cc:	f7ff fc15 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000280 	.word	0x20000280
 80019d8:	40013800 	.word	0x40013800
 80019dc:	0003d090 	.word	0x0003d090

080019e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0ae      	sub	sp, #184	; 0xb8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2288      	movs	r2, #136	; 0x88
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 fa1b 	bl	8006e3c <memset>
  if(uartHandle->Instance==UART5)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_UART_MspInit+0x198>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d165      	bne.n	8001adc <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001a10:	2310      	movs	r3, #16
 8001a12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 f9ad 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a28:	f7ff fbe7 	bl	80011fa <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a2c:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a36:	6593      	str	r3, [r2, #88]	; 0x58
 8001a38:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	4a4c      	ldr	r2, [pc, #304]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a50:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4839      	ldr	r0, [pc, #228]	; (8001b80 <HAL_UART_MspInit+0x1a0>)
 8001a9c:	f001 f92a 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001abe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	482f      	ldr	r0, [pc, #188]	; (8001b84 <HAL_UART_MspInit+0x1a4>)
 8001ac6:	f001 f915 	bl	8002cf4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2035      	movs	r0, #53	; 0x35
 8001ad0:	f001 f866 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ad4:	2035      	movs	r0, #53	; 0x35
 8001ad6:	f001 f87f 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ada:	e049      	b.n	8001b70 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <HAL_UART_MspInit+0x1a8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d144      	bne.n	8001b70 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aea:	2300      	movs	r3, #0
 8001aec:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 f942 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001afe:	f7ff fb7c 	bl	80011fa <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_UART_MspInit+0x19c>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f001 f8ca 	bl	8002cf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2025      	movs	r0, #37	; 0x25
 8001b66:	f001 f81b 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b6a:	2025      	movs	r0, #37	; 0x25
 8001b6c:	f001 f834 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
}
 8001b70:	bf00      	nop
 8001b72:	37b8      	adds	r7, #184	; 0xb8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40005000 	.word	0x40005000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000800 	.word	0x48000800
 8001b84:	48000c00 	.word	0x48000c00
 8001b88:	40013800 	.word	0x40013800

08001b8c <userMainInit>:
extern int WriteReg(char bID, uint16_t wAddr, uint64_t dwData, char bLen, char bWriteType) ;
#define DEVICE_COMMAND          2       //Command Register
#define FRMWRT_SGL_R            0x00    // single device write with response
extern uint8_t* voltageBuff[10];

void userMainInit(){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

	Can_Init();
 8001b90:	f7fe fcde 	bl	8000550 <Can_Init>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_TIM_PeriodElapsedCallback>:

volatile int counter=0;

uint8_t* voltageBuff[10];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	6078      	str	r0, [r7, #4]

	WriteReg(counter, DEVICE_COMMAND, 0x00, 1, FRMWRT_SGL_R); //Current Value
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b2d8      	uxtb	r0, r3
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2301      	movs	r3, #1
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	f7fe feae 	bl	8000918 <WriteReg>
	WriteReg(counter, DEVICE_COMMAND, 0x20, 1, FRMWRT_SGL_R); //Volatge request
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b2d8      	uxtb	r0, r3
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	f04f 0220 	mov.w	r2, #32
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	f7fe fea0 	bl	8000918 <WriteReg>
	counter=(counter+1)%10;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1c59      	adds	r1, r3, #1
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001be0:	fb83 2301 	smull	r2, r3, r3, r1
 8001be4:	109a      	asrs	r2, r3, #2
 8001be6:	17cb      	asrs	r3, r1, #31
 8001be8:	1ad2      	subs	r2, r2, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	1aca      	subs	r2, r1, r3
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bf6:	601a      	str	r2, [r3, #0]
	UART_Receive(1, 17);
 8001bf8:	2111      	movs	r1, #17
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff fe6c 	bl	80018d8 <UART_Receive>



}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000048 	.word	0x20000048
 8001c0c:	66666667 	.word	0x66666667

08001c10 <userMain>:

int userMain(void){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0

//	PwmInInit();

	masterInit();
 8001c16:	f7ff fb25 	bl	8001264 <masterInit>
	InitPL455();
 8001c1a:	f7ff f85d 	bl	8000cd8 <InitPL455>
	HAL_TIM_Base_Start_IT(&htim5);
 8001c1e:	480f      	ldr	r0, [pc, #60]	; (8001c5c <userMain+0x4c>)
 8001c20:	f002 fdc0 	bl	80047a4 <HAL_TIM_Base_Start_IT>
//	vTaskDelay(pdMS_TO_TICKS(1000));
//	shutDownSlavesCommand();

char* desavanje="desio se prijem\n";
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <userMain+0x50>)
 8001c26:	617b      	str	r3, [r7, #20]
char* posle="posle ifa\n";
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <userMain+0x54>)
 8001c2a:	613b      	str	r3, [r7, #16]
char* test="mnbvcxzasdfghjklpoiuytrewqzxcva\n";
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <userMain+0x58>)
 8001c2e:	60fb      	str	r3, [r7, #12]
	while(1){

			;

		HAL_Delay(500);
 8001c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c34:	f000 f868 	bl	8001d08 <HAL_Delay>
		UART_AsyncTransmitString(5, posle);
 8001c38:	6939      	ldr	r1, [r7, #16]
 8001c3a:	2005      	movs	r0, #5
 8001c3c:	f7ff fe24 	bl	8001888 <UART_AsyncTransmitString>

		HAL_Delay(1000);
 8001c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c44:	f000 f860 	bl	8001d08 <HAL_Delay>
		uint8_t rxData[8] = {0};
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]

		canSend(0x10, rxData);
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	2010      	movs	r0, #16
 8001c56:	f7fe fca3 	bl	80005a0 <canSend>
	while(1){
 8001c5a:	e7e9      	b.n	8001c30 <userMain+0x20>
 8001c5c:	20000118 	.word	0x20000118
 8001c60:	08006e74 	.word	0x08006e74
 8001c64:	08006e88 	.word	0x08006e88
 8001c68:	08006e94 	.word	0x08006e94

08001c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c70:	f7ff fc0a 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c76:	490d      	ldr	r1, [pc, #52]	; (8001cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <LoopForever+0xe>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c8c:	4c0a      	ldr	r4, [pc, #40]	; (8001cb8 <LoopForever+0x16>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f005 f8ab 	bl	8006df4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9e:	f7ff fa4d 	bl	800113c <main>

08001ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ca2:	e7fe      	b.n	8001ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ca4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001cb0:	08007110 	.word	0x08007110
  ldr r2, =_sbss
 8001cb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001cb8:	20000330 	.word	0x20000330

08001cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC1_2_IRQHandler>

08001cbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 ff5e 	bl	8002b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f7ff fb12 	bl	80012f8 <HAL_InitTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	71fb      	strb	r3, [r7, #7]
 8001cde:	e001      	b.n	8001ce4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ce0:	f7ff fae6 	bl	80012b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2000032c 	.word	0x2000032c

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008

08001d50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e0ed      	b.n	8001f3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff f8fa 	bl	8000f68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d84:	f7ff ffb4 	bl	8001cf0 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d8a:	e012      	b.n	8001db2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d8c:	f7ff ffb0 	bl	8001cf0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b0a      	cmp	r3, #10
 8001d98:	d90b      	bls.n	8001db2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2205      	movs	r2, #5
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0c5      	b.n	8001f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0e5      	beq.n	8001d8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0202 	bic.w	r2, r2, #2
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd0:	f7ff ff8e 	bl	8001cf0 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dd6:	e012      	b.n	8001dfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dd8:	f7ff ff8a 	bl	8001cf0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d90b      	bls.n	8001dfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2205      	movs	r2, #5
 8001df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e09f      	b.n	8001f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e5      	bne.n	8001dd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7e1b      	ldrb	r3, [r3, #24]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d108      	bne.n	8001e26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e007      	b.n	8001e36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7e5b      	ldrb	r3, [r3, #25]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d108      	bne.n	8001e50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e007      	b.n	8001e60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e9b      	ldrb	r3, [r3, #26]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d108      	bne.n	8001e7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e007      	b.n	8001e8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0220 	bic.w	r2, r2, #32
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7edb      	ldrb	r3, [r3, #27]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d108      	bne.n	8001ea4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0210 	bic.w	r2, r2, #16
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e007      	b.n	8001eb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0210 	orr.w	r2, r2, #16
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7f1b      	ldrb	r3, [r3, #28]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0208 	orr.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e007      	b.n	8001ede <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0208 	bic.w	r2, r2, #8
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7f5b      	ldrb	r3, [r3, #29]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d108      	bne.n	8001ef8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0204 	orr.w	r2, r2, #4
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e007      	b.n	8001f08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	ea42 0103 	orr.w	r1, r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b087      	sub	sp, #28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f5e:	7cfb      	ldrb	r3, [r7, #19]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d003      	beq.n	8001f6c <HAL_CAN_ConfigFilter+0x26>
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	f040 80aa 	bne.w	80020c0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2201      	movs	r2, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d123      	bne.n	8001fee <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fc8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3248      	adds	r2, #72	; 0x48
 8001fce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fe4:	6979      	ldr	r1, [r7, #20]
 8001fe6:	3348      	adds	r3, #72	; 0x48
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d122      	bne.n	800203c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002016:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3248      	adds	r2, #72	; 0x48
 800201c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002030:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002032:	6979      	ldr	r1, [r7, #20]
 8002034:	3348      	adds	r3, #72	; 0x48
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002056:	e007      	b.n	8002068 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	431a      	orrs	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002082:	e007      	b.n	8002094 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020b2:	f023 0201 	bic.w	r2, r3, #1
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	e006      	b.n	80020ce <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
  }
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12e      	bne.n	800214c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002106:	f7ff fdf3 	bl	8001cf0 <HAL_GetTick>
 800210a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800210c:	e012      	b.n	8002134 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800210e:	f7ff fdef 	bl	8001cf0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b0a      	cmp	r3, #10
 800211a:	d90b      	bls.n	8002134 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2205      	movs	r2, #5
 800212c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e012      	b.n	800215a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1e5      	bne.n	800210e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e006      	b.n	800215a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002162:	b480      	push	{r7}
 8002164:	b089      	sub	sp, #36	; 0x24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002176:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d003      	beq.n	800218e <HAL_CAN_AddTxMessage+0x2c>
 8002186:	7ffb      	ldrb	r3, [r7, #31]
 8002188:	2b02      	cmp	r3, #2
 800218a:	f040 80b8 	bne.w	80022fe <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a0 	beq.w	80022ee <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	0e1b      	lsrs	r3, r3, #24
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d907      	bls.n	80021ce <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e09e      	b.n	800230c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021ea:	68f9      	ldr	r1, [r7, #12]
 80021ec:	6809      	ldr	r1, [r1, #0]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3318      	adds	r3, #24
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	440b      	add	r3, r1
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e00f      	b.n	800221c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002206:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002210:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3318      	adds	r3, #24
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	440b      	add	r3, r1
 800221a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3318      	adds	r3, #24
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	440b      	add	r3, r1
 800222c:	3304      	adds	r3, #4
 800222e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	7d1b      	ldrb	r3, [r3, #20]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d111      	bne.n	800225c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3318      	adds	r3, #24
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	6811      	ldr	r1, [r2, #0]
 800224c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3318      	adds	r3, #24
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	440b      	add	r3, r1
 8002258:	3304      	adds	r3, #4
 800225a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3307      	adds	r3, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	061a      	lsls	r2, r3, #24
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3306      	adds	r3, #6
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	041b      	lsls	r3, r3, #16
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3305      	adds	r3, #5
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	4313      	orrs	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	3204      	adds	r2, #4
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	4610      	mov	r0, r2
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	6811      	ldr	r1, [r2, #0]
 8002284:	ea43 0200 	orr.w	r2, r3, r0
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	440b      	add	r3, r1
 800228e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002292:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3303      	adds	r3, #3
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	061a      	lsls	r2, r3, #24
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3302      	adds	r3, #2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3301      	adds	r3, #1
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	4313      	orrs	r3, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	4610      	mov	r0, r2
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6811      	ldr	r1, [r2, #0]
 80022ba:	ea43 0200 	orr.w	r2, r3, r0
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3318      	adds	r3, #24
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	4413      	add	r3, r2
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	6811      	ldr	r1, [r2, #0]
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3318      	adds	r3, #24
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	440b      	add	r3, r1
 80022e8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e00e      	b.n	800230c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e006      	b.n	800230c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
  }
}
 800230c:	4618      	mov	r0, r3
 800230e:	3724      	adds	r7, #36	; 0x24
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800232c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800232e:	7afb      	ldrb	r3, [r7, #11]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d002      	beq.n	800233a <HAL_CAN_IsTxMessagePending+0x22>
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d10b      	bne.n	8002352 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	069b      	lsls	r3, r3, #26
 8002344:	401a      	ands	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	069b      	lsls	r3, r3, #26
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800234e:	2301      	movs	r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002374:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d003      	beq.n	8002384 <HAL_CAN_GetRxMessage+0x24>
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b02      	cmp	r3, #2
 8002380:	f040 80f3 	bne.w	800256a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10e      	bne.n	80023a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d116      	bne.n	80023c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0e7      	b.n	8002578 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0d8      	b.n	8002578 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	331b      	adds	r3, #27
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	4413      	add	r3, r2
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0204 	and.w	r2, r3, #4
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10c      	bne.n	80023fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	331b      	adds	r3, #27
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e00b      	b.n	8002416 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	331b      	adds	r3, #27
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	331b      	adds	r3, #27
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4413      	add	r3, r2
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0202 	and.w	r2, r3, #2
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	331b      	adds	r3, #27
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	331b      	adds	r3, #27
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	b2da      	uxtb	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	331b      	adds	r3, #27
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	4413      	add	r3, r2
 8002494:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	0a1a      	lsrs	r2, r3, #8
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0c1a      	lsrs	r2, r3, #16
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	3302      	adds	r3, #2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e1a      	lsrs	r2, r3, #24
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	3303      	adds	r3, #3
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3304      	adds	r3, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0a1a      	lsrs	r2, r3, #8
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	3305      	adds	r3, #5
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	4413      	add	r3, r2
 8002514:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0c1a      	lsrs	r2, r3, #16
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	3306      	adds	r3, #6
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	4413      	add	r3, r2
 800252e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e1a      	lsrs	r2, r3, #24
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	3307      	adds	r3, #7
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d108      	bne.n	8002556 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0220 	orr.w	r2, r2, #32
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	e007      	b.n	8002566 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0220 	orr.w	r2, r2, #32
 8002564:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e006      	b.n	8002578 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
  }
}
 8002578:	4618      	mov	r0, r3
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002594:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d002      	beq.n	80025a2 <HAL_CAN_ActivateNotification+0x1e>
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d109      	bne.n	80025b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6959      	ldr	r1, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e006      	b.n	80025c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d07c      	beq.n	8002710 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d023      	beq.n	8002668 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f983 	bl	800293e <HAL_CAN_TxMailbox0CompleteCallback>
 8002638:	e016      	b.n	8002668 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
 800264c:	e00c      	b.n	8002668 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	e002      	b.n	8002668 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f989 	bl	800297a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d024      	beq.n	80026bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f963 	bl	8002952 <HAL_CAN_TxMailbox1CompleteCallback>
 800268c:	e016      	b.n	80026bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	e00c      	b.n	80026bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
 80026b4:	e002      	b.n	80026bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f969 	bl	800298e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d024      	beq.n	8002710 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f943 	bl	8002966 <HAL_CAN_TxMailbox2CompleteCallback>
 80026e0:	e016      	b.n	8002710 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	e00c      	b.n	8002710 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
 8002708:	e002      	b.n	8002710 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f949 	bl	80029a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2210      	movs	r2, #16
 8002732:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2208      	movs	r2, #8
 800274e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f930 	bl	80029b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fd feae 	bl	80004d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00c      	beq.n	8002798 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2210      	movs	r2, #16
 8002796:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f912 	bl	80029de <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8f9 	bl	80029ca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2210      	movs	r2, #16
 80027f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f8fc 	bl	80029f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2208      	movs	r2, #8
 8002814:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8f5 	bl	8002a06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d07b      	beq.n	800291e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d072      	beq.n	8002916 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288a:	2b00      	cmp	r3, #0
 800288c:	d043      	beq.n	8002916 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002894:	2b00      	cmp	r3, #0
 8002896:	d03e      	beq.n	8002916 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800289e:	2b60      	cmp	r3, #96	; 0x60
 80028a0:	d02b      	beq.n	80028fa <HAL_CAN_IRQHandler+0x32a>
 80028a2:	2b60      	cmp	r3, #96	; 0x60
 80028a4:	d82e      	bhi.n	8002904 <HAL_CAN_IRQHandler+0x334>
 80028a6:	2b50      	cmp	r3, #80	; 0x50
 80028a8:	d022      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x320>
 80028aa:	2b50      	cmp	r3, #80	; 0x50
 80028ac:	d82a      	bhi.n	8002904 <HAL_CAN_IRQHandler+0x334>
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d019      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x316>
 80028b2:	2b40      	cmp	r3, #64	; 0x40
 80028b4:	d826      	bhi.n	8002904 <HAL_CAN_IRQHandler+0x334>
 80028b6:	2b30      	cmp	r3, #48	; 0x30
 80028b8:	d010      	beq.n	80028dc <HAL_CAN_IRQHandler+0x30c>
 80028ba:	2b30      	cmp	r3, #48	; 0x30
 80028bc:	d822      	bhi.n	8002904 <HAL_CAN_IRQHandler+0x334>
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d002      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x2f8>
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d005      	beq.n	80028d2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028c6:	e01d      	b.n	8002904 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028d0:	e019      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028da:	e014      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f043 0320 	orr.w	r3, r3, #32
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028e4:	e00f      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028ee:	e00a      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f8:	e005      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002902:	e000      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            break;
 8002904:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002914:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2204      	movs	r2, #4
 800291c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f872 	bl	8002a1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff4c 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb2:	f7ff ff61 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7ff ffb1 	bl	8002b24 <NVIC_EncodePriority>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff80 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002bd0:	bf00      	nop
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff54 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d008      	beq.n	8002c1e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e022      	b.n	8002c64 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 020e 	bic.w	r2, r2, #14
 8002c2c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f003 021c 	and.w	r2, r3, #28
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d005      	beq.n	8002c94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	e029      	b.n	8002ce8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 020e 	bic.w	r2, r2, #14
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f003 021c 	and.w	r2, r3, #28
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
  }
  return status;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d02:	e17f      	b.n	8003004 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8171 	beq.w	8002ffe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d005      	beq.n	8002d34 <HAL_GPIO_Init+0x40>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d130      	bne.n	8002d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0201 	and.w	r2, r3, #1
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d118      	bne.n	8002dd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002da8:	2201      	movs	r2, #1
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	f003 0201 	and.w	r2, r3, #1
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d017      	beq.n	8002e10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d123      	bne.n	8002e64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	08da      	lsrs	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3208      	adds	r2, #8
 8002e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	220f      	movs	r2, #15
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	08da      	lsrs	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	6939      	ldr	r1, [r7, #16]
 8002e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0203 	and.w	r2, r3, #3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80ac 	beq.w	8002ffe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <HAL_GPIO_Init+0x330>)
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	4a5e      	ldr	r2, [pc, #376]	; (8003024 <HAL_GPIO_Init+0x330>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8002eb2:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <HAL_GPIO_Init+0x330>)
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ebe:	4a5a      	ldr	r2, [pc, #360]	; (8003028 <HAL_GPIO_Init+0x334>)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x242>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4f      	ldr	r2, [pc, #316]	; (800302c <HAL_GPIO_Init+0x338>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x23e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4e      	ldr	r2, [pc, #312]	; (8003030 <HAL_GPIO_Init+0x33c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x23a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_GPIO_Init+0x340>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x236>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_GPIO_Init+0x344>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x232>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4b      	ldr	r2, [pc, #300]	; (800303c <HAL_GPIO_Init+0x348>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x22e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4a      	ldr	r2, [pc, #296]	; (8003040 <HAL_GPIO_Init+0x34c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x22a>
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	e00c      	b.n	8002f38 <HAL_GPIO_Init+0x244>
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e00a      	b.n	8002f38 <HAL_GPIO_Init+0x244>
 8002f22:	2305      	movs	r3, #5
 8002f24:	e008      	b.n	8002f38 <HAL_GPIO_Init+0x244>
 8002f26:	2304      	movs	r3, #4
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x244>
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e004      	b.n	8002f38 <HAL_GPIO_Init+0x244>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_Init+0x244>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_GPIO_Init+0x244>
 8002f36:	2300      	movs	r3, #0
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	f002 0203 	and.w	r2, r2, #3
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	4093      	lsls	r3, r2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f48:	4937      	ldr	r1, [pc, #220]	; (8003028 <HAL_GPIO_Init+0x334>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f7a:	4a32      	ldr	r2, [pc, #200]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f80:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fa4:	4a27      	ldr	r2, [pc, #156]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff8:	4a12      	ldr	r2, [pc, #72]	; (8003044 <HAL_GPIO_Init+0x350>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	f47f ae78 	bne.w	8002d04 <HAL_GPIO_Init+0x10>
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	40010000 	.word	0x40010000
 800302c:	48000400 	.word	0x48000400
 8003030:	48000800 	.word	0x48000800
 8003034:	48000c00 	.word	0x48000c00
 8003038:	48001000 	.word	0x48001000
 800303c:	48001400 	.word	0x48001400
 8003040:	48001800 	.word	0x48001800
 8003044:	40010400 	.word	0x40010400

08003048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003064:	e002      	b.n	800306c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_PWREx_GetVoltageRange+0x18>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40007000 	.word	0x40007000

08003094 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a2:	d130      	bne.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a4:	4b23      	ldr	r3, [pc, #140]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b0:	d038      	beq.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ba:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2232      	movs	r2, #50	; 0x32
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0c9b      	lsrs	r3, r3, #18
 80030d4:	3301      	adds	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d8:	e002      	b.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3b01      	subs	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e0:	4b14      	ldr	r3, [pc, #80]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ec:	d102      	bne.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f2      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003100:	d110      	bne.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e00f      	b.n	8003126 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d007      	beq.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003122:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40007000 	.word	0x40007000
 8003138:	20000000 	.word	0x20000000
 800313c:	431bde83 	.word	0x431bde83

08003140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e3d4      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003152:	4ba1      	ldr	r3, [pc, #644]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315c:	4b9e      	ldr	r3, [pc, #632]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80e4 	beq.w	800333c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_RCC_OscConfig+0x4a>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	f040 808b 	bne.w	8003298 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 8087 	bne.w	8003298 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800318a:	4b93      	ldr	r3, [pc, #588]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x62>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e3ac      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	4b8c      	ldr	r3, [pc, #560]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d004      	beq.n	80031bc <HAL_RCC_OscConfig+0x7c>
 80031b2:	4b89      	ldr	r3, [pc, #548]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ba:	e005      	b.n	80031c8 <HAL_RCC_OscConfig+0x88>
 80031bc:	4b86      	ldr	r3, [pc, #536]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d223      	bcs.n	8003214 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fd73 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e38d      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e0:	4b7d      	ldr	r3, [pc, #500]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7c      	ldr	r2, [pc, #496]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80031e6:	f043 0308 	orr.w	r3, r3, #8
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4977      	ldr	r1, [pc, #476]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031fe:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	4972      	ldr	r1, [pc, #456]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
 8003212:	e025      	b.n	8003260 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003214:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6f      	ldr	r2, [pc, #444]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800321a:	f043 0308 	orr.w	r3, r3, #8
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	496a      	ldr	r1, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003232:	4b69      	ldr	r3, [pc, #420]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	4965      	ldr	r1, [pc, #404]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fd33 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e34d      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003260:	f000 fc36 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	495a      	ldr	r1, [pc, #360]	; (80033dc <HAL_RCC_OscConfig+0x29c>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <HAL_RCC_OscConfig+0x2a0>)
 800327e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003280:	4b58      	ldr	r3, [pc, #352]	; (80033e4 <HAL_RCC_OscConfig+0x2a4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe f837 	bl	80012f8 <HAL_InitTick>
 800328a:	4603      	mov	r3, r0
 800328c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d052      	beq.n	800333a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	e331      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d032      	beq.n	8003306 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032a0:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032ac:	f7fe fd20 	bl	8001cf0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032b4:	f7fe fd1c 	bl	8001cf0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e31a      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c6:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d2:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a40      	ldr	r2, [pc, #256]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	493b      	ldr	r1, [pc, #236]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f0:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	4936      	ldr	r1, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	e01a      	b.n	800333c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003312:	f7fe fced 	bl	8001cf0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800331a:	f7fe fce9 	bl	8001cf0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e2e7      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x1da>
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800333a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d074      	beq.n	8003432 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b08      	cmp	r3, #8
 800334c:	d005      	beq.n	800335a <HAL_RCC_OscConfig+0x21a>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d10e      	bne.n	8003372 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d10b      	bne.n	8003372 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d064      	beq.n	8003430 <HAL_RCC_OscConfig+0x2f0>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d160      	bne.n	8003430 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e2c4      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337a:	d106      	bne.n	800338a <HAL_RCC_OscConfig+0x24a>
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	e01d      	b.n	80033c6 <HAL_RCC_OscConfig+0x286>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x26e>
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 800339a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0x286>
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <HAL_RCC_OscConfig+0x298>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01c      	beq.n	8003408 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe fc8f 	bl	8001cf0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d4:	e011      	b.n	80033fa <HAL_RCC_OscConfig+0x2ba>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	080070b8 	.word	0x080070b8
 80033e0:	20000000 	.word	0x20000000
 80033e4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fc82 	bl	8001cf0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e280      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fa:	4baf      	ldr	r3, [pc, #700]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x2a8>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fc72 	bl	8001cf0 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fc6e 	bl	8001cf0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e26c      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003422:	4ba5      	ldr	r3, [pc, #660]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x2d0>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d060      	beq.n	8003500 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d005      	beq.n	8003450 <HAL_RCC_OscConfig+0x310>
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d119      	bne.n	800347e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d116      	bne.n	800347e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003450:	4b99      	ldr	r3, [pc, #612]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_OscConfig+0x328>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e249      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b93      	ldr	r3, [pc, #588]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	4990      	ldr	r1, [pc, #576]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347c:	e040      	b.n	8003500 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d023      	beq.n	80034ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003486:	4b8c      	ldr	r3, [pc, #560]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a8b      	ldr	r2, [pc, #556]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fe fc2d 	bl	8001cf0 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349a:	f7fe fc29 	bl	8001cf0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e227      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ac:	4b82      	ldr	r3, [pc, #520]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	4b7f      	ldr	r3, [pc, #508]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	497c      	ldr	r1, [pc, #496]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
 80034cc:	e018      	b.n	8003500 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ce:	4b7a      	ldr	r3, [pc, #488]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a79      	ldr	r2, [pc, #484]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80034d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fe fc09 	bl	8001cf0 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe fc05 	bl	8001cf0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e203      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f4:	4b70      	ldr	r3, [pc, #448]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d03c      	beq.n	8003586 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01c      	beq.n	800354e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003514:	4b68      	ldr	r3, [pc, #416]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351a:	4a67      	ldr	r2, [pc, #412]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fe fbe4 	bl	8001cf0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352c:	f7fe fbe0 	bl	8001cf0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1de      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800353e:	4b5e      	ldr	r3, [pc, #376]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCC_OscConfig+0x3ec>
 800354c:	e01b      	b.n	8003586 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354e:	4b5a      	ldr	r3, [pc, #360]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355e:	f7fe fbc7 	bl	8001cf0 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003566:	f7fe fbc3 	bl	8001cf0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e1c1      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003578:	4b4f      	ldr	r3, [pc, #316]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800357a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ef      	bne.n	8003566 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80a6 	beq.w	80036e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003598:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	4b44      	ldr	r3, [pc, #272]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	4a43      	ldr	r2, [pc, #268]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ae:	6593      	str	r3, [r2, #88]	; 0x58
 80035b0:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035bc:	2301      	movs	r3, #1
 80035be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c0:	4b3e      	ldr	r3, [pc, #248]	; (80036bc <HAL_RCC_OscConfig+0x57c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d118      	bne.n	80035fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035cc:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCC_OscConfig+0x57c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3a      	ldr	r2, [pc, #232]	; (80036bc <HAL_RCC_OscConfig+0x57c>)
 80035d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d8:	f7fe fb8a 	bl	8001cf0 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fe fb86 	bl	8001cf0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e184      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f2:	4b32      	ldr	r3, [pc, #200]	; (80036bc <HAL_RCC_OscConfig+0x57c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d108      	bne.n	8003618 <HAL_RCC_OscConfig+0x4d8>
 8003606:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	4a2a      	ldr	r2, [pc, #168]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003616:	e024      	b.n	8003662 <HAL_RCC_OscConfig+0x522>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d110      	bne.n	8003642 <HAL_RCC_OscConfig+0x502>
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003628:	f043 0304 	orr.w	r3, r3, #4
 800362c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003640:	e00f      	b.n	8003662 <HAL_RCC_OscConfig+0x522>
 8003642:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800365a:	f023 0304 	bic.w	r3, r3, #4
 800365e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fe fb41 	bl	8001cf0 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fb3d 	bl	8001cf0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e139      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_OscConfig+0x578>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ed      	beq.n	8003672 <HAL_RCC_OscConfig+0x532>
 8003696:	e01a      	b.n	80036ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fe fb2a 	bl	8001cf0 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800369e:	e00f      	b.n	80036c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe fb26 	bl	8001cf0 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d906      	bls.n	80036c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e122      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c0:	4b90      	ldr	r3, [pc, #576]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e8      	bne.n	80036a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b8b      	ldr	r3, [pc, #556]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4a8a      	ldr	r2, [pc, #552]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8108 	beq.w	80038fa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	f040 80d0 	bne.w	8003894 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036f4:	4b83      	ldr	r3, [pc, #524]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	429a      	cmp	r2, r3
 8003706:	d130      	bne.n	800376a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	3b01      	subs	r3, #1
 8003714:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d127      	bne.n	800376a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d11f      	bne.n	800376a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003734:	2a07      	cmp	r2, #7
 8003736:	bf14      	ite	ne
 8003738:	2201      	movne	r2, #1
 800373a:	2200      	moveq	r2, #0
 800373c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800373e:	4293      	cmp	r3, r2
 8003740:	d113      	bne.n	800376a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d109      	bne.n	800376a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d06e      	beq.n	8003848 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d069      	beq.n	8003844 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003770:	4b64      	ldr	r3, [pc, #400]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800377c:	4b61      	ldr	r3, [pc, #388]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0b7      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800378c:	4b5d      	ldr	r3, [pc, #372]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5c      	ldr	r2, [pc, #368]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003796:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003798:	f7fe faaa 	bl	8001cf0 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe faa6 	bl	8001cf0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0a4      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b2:	4b54      	ldr	r3, [pc, #336]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037be:	4b51      	ldr	r3, [pc, #324]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	4b51      	ldr	r3, [pc, #324]	; (8003908 <HAL_RCC_OscConfig+0x7c8>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ce:	3a01      	subs	r2, #1
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037d8:	0212      	lsls	r2, r2, #8
 80037da:	4311      	orrs	r1, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037e0:	0852      	lsrs	r2, r2, #1
 80037e2:	3a01      	subs	r2, #1
 80037e4:	0552      	lsls	r2, r2, #21
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037ec:	0852      	lsrs	r2, r2, #1
 80037ee:	3a01      	subs	r2, #1
 80037f0:	0652      	lsls	r2, r2, #25
 80037f2:	4311      	orrs	r1, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037f8:	0912      	lsrs	r2, r2, #4
 80037fa:	0452      	lsls	r2, r2, #17
 80037fc:	430a      	orrs	r2, r1
 80037fe:	4941      	ldr	r1, [pc, #260]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003804:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a3e      	ldr	r2, [pc, #248]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 800380a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003810:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a3b      	ldr	r2, [pc, #236]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800381c:	f7fe fa68 	bl	8001cf0 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fa64 	bl	8001cf0 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e062      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	4b33      	ldr	r3, [pc, #204]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003842:	e05a      	b.n	80038fa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e059      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d152      	bne.n	80038fa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a27      	ldr	r2, [pc, #156]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800386c:	f7fe fa40 	bl	8001cf0 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe fa3c 	bl	8001cf0 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e03a      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x734>
 8003892:	e032      	b.n	80038fa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d02d      	beq.n	80038f6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80038a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80038b8:	f023 0303 	bic.w	r3, r3, #3
 80038bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80038c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe fa0f 	bl	8001cf0 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe fa0b 	bl	8001cf0 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e009      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_OscConfig+0x7c4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x796>
 80038f4:	e001      	b.n	80038fa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	f99d808c 	.word	0xf99d808c

0800390c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0c8      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b66      	ldr	r3, [pc, #408]	; (8003abc <HAL_RCC_ClockConfig+0x1b0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d910      	bls.n	8003950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b63      	ldr	r3, [pc, #396]	; (8003abc <HAL_RCC_ClockConfig+0x1b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4961      	ldr	r1, [pc, #388]	; (8003abc <HAL_RCC_ClockConfig+0x1b0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_ClockConfig+0x1b0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b0      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d04c      	beq.n	80039f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003964:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d121      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e09e      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d107      	bne.n	800398c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397c:	4b50      	ldr	r3, [pc, #320]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d115      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e092      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003994:	4b4a      	ldr	r3, [pc, #296]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e086      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a4:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e07e      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b4:	4b42      	ldr	r3, [pc, #264]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f023 0203 	bic.w	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	493f      	ldr	r1, [pc, #252]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c6:	f7fe f993 	bl	8001cf0 <HAL_GetTick>
 80039ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ce:	f7fe f98f 	bl	8001cf0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e066      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e4:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 020c 	and.w	r2, r3, #12
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d1eb      	bne.n	80039ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a02:	4b2f      	ldr	r3, [pc, #188]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	492c      	ldr	r1, [pc, #176]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_RCC_ClockConfig+0x1b0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d210      	bcs.n	8003a44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCC_ClockConfig+0x1b0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4924      	ldr	r1, [pc, #144]	; (8003abc <HAL_RCC_ClockConfig+0x1b0>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_RCC_ClockConfig+0x1b0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e036      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4918      	ldr	r1, [pc, #96]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4910      	ldr	r1, [pc, #64]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a82:	f000 f825 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003a86:	4602      	mov	r2, r0
 8003a88:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	490c      	ldr	r1, [pc, #48]	; (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	5ccb      	ldrb	r3, [r1, r3]
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fc26 	bl	80012f8 <HAL_InitTick>
 8003aac:	4603      	mov	r3, r0
 8003aae:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40022000 	.word	0x40022000
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	080070b8 	.word	0x080070b8
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	20000004 	.word	0x20000004

08003ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	; 0x24
 8003ad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ade:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x34>
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d121      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d11e      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b10:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e005      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b20:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	e004      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d134      	bne.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d003      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0xac>
 8003b74:	e005      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b76:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b78:	617b      	str	r3, [r7, #20]
      break;
 8003b7a:	e005      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b7e:	617b      	str	r3, [r7, #20]
      break;
 8003b80:	e002      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	617b      	str	r3, [r7, #20]
      break;
 8003b86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	3301      	adds	r3, #1
 8003b94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	fb02 f203 	mul.w	r2, r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	0e5b      	lsrs	r3, r3, #25
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	080070d0 	.word	0x080070d0
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	007a1200 	.word	0x007a1200

08003be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000000 	.word	0x20000000

08003c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c04:	f7ff fff0 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4904      	ldr	r1, [pc, #16]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	080070c8 	.word	0x080070c8

08003c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c30:	f7ff ffda 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0adb      	lsrs	r3, r3, #11
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4904      	ldr	r1, [pc, #16]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	080070c8 	.word	0x080070c8

08003c58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	220f      	movs	r2, #15
 8003c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c68:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0203 	and.w	r2, r3, #3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c8c:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	08db      	lsrs	r3, r3, #3
 8003c92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCC_GetClockConfig+0x60>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0207 	and.w	r2, r3, #7
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	601a      	str	r2, [r3, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40022000 	.word	0x40022000

08003cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cd4:	f7ff f9d0 	bl	8003078 <HAL_PWREx_GetVoltageRange>
 8003cd8:	6178      	str	r0, [r7, #20]
 8003cda:	e014      	b.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	4a24      	ldr	r2, [pc, #144]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce8:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cf4:	f7ff f9c0 	bl	8003078 <HAL_PWREx_GetVoltageRange>
 8003cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d10b      	bne.n	8003d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d919      	bls.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2ba0      	cmp	r3, #160	; 0xa0
 8003d18:	d902      	bls.n	8003d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	e013      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	e010      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b80      	cmp	r3, #128	; 0x80
 8003d2a:	d902      	bls.n	8003d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	e00a      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b80      	cmp	r3, #128	; 0x80
 8003d36:	d102      	bne.n	8003d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d38:	2302      	movs	r3, #2
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e004      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b70      	cmp	r3, #112	; 0x70
 8003d42:	d101      	bne.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d44:	2301      	movs	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 0207 	bic.w	r2, r3, #7
 8003d50:	4909      	ldr	r1, [pc, #36]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40022000 	.word	0x40022000

08003d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d84:	2300      	movs	r3, #0
 8003d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d88:	2300      	movs	r3, #0
 8003d8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d041      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003da0:	d02a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003da2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003da6:	d824      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003db2:	d81e      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbc:	d010      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dbe:	e018      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc0:	4b86      	ldr	r3, [pc, #536]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a85      	ldr	r2, [pc, #532]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dcc:	e015      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fabb 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dde:	e00c      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3320      	adds	r3, #32
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fba6 	bl	8004538 <RCCEx_PLLSAI2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	74fb      	strb	r3, [r7, #19]
      break;
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e00:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e0e:	4973      	ldr	r1, [pc, #460]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d041      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e30:	d02a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e36:	d824      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e42:	d81e      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e4c:	d010      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e4e:	e018      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e50:	4b62      	ldr	r3, [pc, #392]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a61      	ldr	r2, [pc, #388]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e5c:	e015      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fa73 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e6e:	e00c      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3320      	adds	r3, #32
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fb5e 	bl	8004538 <RCCEx_PLLSAI2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	74fb      	strb	r3, [r7, #19]
      break;
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e90:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e9e:	494f      	ldr	r1, [pc, #316]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ea6:	e001      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80a0 	beq.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed4:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ede:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee0:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eec:	2301      	movs	r3, #1
 8003eee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003efc:	f7fd fef8 	bl	8001cf0 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f02:	e009      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7fd fef4 	bl	8001cf0 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	74fb      	strb	r3, [r7, #19]
        break;
 8003f16:	e005      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0ef      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d15c      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01f      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d019      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f48:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f54:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fd feb3 	bl	8001cf0 <HAL_GetTick>
 8003f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8c:	e00b      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd feaf 	bl	8001cf0 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d902      	bls.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8003fa4:	e006      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ec      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fca:	4904      	ldr	r1, [pc, #16]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fd2:	e009      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe8:	7c7b      	ldrb	r3, [r7, #17]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b9e      	ldr	r3, [pc, #632]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	4a9d      	ldr	r2, [pc, #628]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004006:	4b98      	ldr	r3, [pc, #608]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	4994      	ldr	r1, [pc, #592]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004028:	4b8f      	ldr	r3, [pc, #572]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 020c 	bic.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	498c      	ldr	r1, [pc, #560]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404a:	4b87      	ldr	r3, [pc, #540]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	4983      	ldr	r1, [pc, #524]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800406c:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	497b      	ldr	r1, [pc, #492]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800408e:	4b76      	ldr	r3, [pc, #472]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409c:	4972      	ldr	r1, [pc, #456]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b0:	4b6d      	ldr	r3, [pc, #436]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	496a      	ldr	r1, [pc, #424]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d2:	4b65      	ldr	r3, [pc, #404]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	4961      	ldr	r1, [pc, #388]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040f4:	4b5c      	ldr	r3, [pc, #368]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004102:	4959      	ldr	r1, [pc, #356]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004116:	4b54      	ldr	r3, [pc, #336]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	4950      	ldr	r1, [pc, #320]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004138:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	4948      	ldr	r1, [pc, #288]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800415a:	4b43      	ldr	r3, [pc, #268]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	493f      	ldr	r1, [pc, #252]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d028      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800417c:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418a:	4937      	ldr	r1, [pc, #220]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800419a:	d106      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800419c:	4b32      	ldr	r3, [pc, #200]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a31      	ldr	r2, [pc, #196]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a6:	60d3      	str	r3, [r2, #12]
 80041a8:	e011      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041b2:	d10c      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f8c8 	bl	8004350 <RCCEx_PLLSAI1_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d028      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041da:	4b23      	ldr	r3, [pc, #140]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	491f      	ldr	r1, [pc, #124]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f8:	d106      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041fa:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004204:	60d3      	str	r3, [r2, #12]
 8004206:	e011      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004210:	d10c      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f899 	bl	8004350 <RCCEx_PLLSAI1_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02b      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	4908      	ldr	r1, [pc, #32]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004256:	d109      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a02      	ldr	r2, [pc, #8]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
 8004264:	e014      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004274:	d10c      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f867 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800429c:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042aa:	4928      	ldr	r1, [pc, #160]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ba:	d10d      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f844 	bl	8004350 <RCCEx_PLLSAI1_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d014      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	74bb      	strb	r3, [r7, #18]
 80042d6:	e011      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3320      	adds	r3, #32
 80042e6:	2102      	movs	r1, #2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f925 	bl	8004538 <RCCEx_PLLSAI2_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004308:	4b10      	ldr	r3, [pc, #64]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004316:	490d      	ldr	r1, [pc, #52]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433a:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004342:	7cbb      	ldrb	r3, [r7, #18]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000

08004350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800435e:	4b75      	ldr	r3, [pc, #468]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d018      	beq.n	800439c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800436a:	4b72      	ldr	r3, [pc, #456]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0203 	and.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
       ||
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004382:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
       ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d047      	beq.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e044      	b.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d018      	beq.n	80043d6 <RCCEx_PLLSAI1_Config+0x86>
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d825      	bhi.n	80043f4 <RCCEx_PLLSAI1_Config+0xa4>
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d002      	beq.n	80043b2 <RCCEx_PLLSAI1_Config+0x62>
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d009      	beq.n	80043c4 <RCCEx_PLLSAI1_Config+0x74>
 80043b0:	e020      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b2:	4b60      	ldr	r3, [pc, #384]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d11d      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c2:	e01a      	b.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c4:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d4:	e013      	b.n	80043fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043d6:	4b57      	ldr	r3, [pc, #348]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e2:	4b54      	ldr	r3, [pc, #336]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f2:	e006      	b.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      break;
 80043f8:	e004      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004402:	bf00      	nop
    }

    if(status == HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800440a:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	430b      	orrs	r3, r1
 8004420:	4944      	ldr	r1, [pc, #272]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d17d      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800442c:	4b41      	ldr	r3, [pc, #260]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a40      	ldr	r2, [pc, #256]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd fc5a 	bl	8001cf0 <HAL_GetTick>
 800443c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800443e:	e009      	b.n	8004454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004440:	f7fd fc56 	bl	8001cf0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d902      	bls.n	8004454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	73fb      	strb	r3, [r7, #15]
        break;
 8004452:	e005      	b.n	8004460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004454:	4b37      	ldr	r3, [pc, #220]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ef      	bne.n	8004440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d160      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800446c:	4b31      	ldr	r3, [pc, #196]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6892      	ldr	r2, [r2, #8]
 800447c:	0211      	lsls	r1, r2, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	0912      	lsrs	r2, r2, #4
 8004484:	0452      	lsls	r2, r2, #17
 8004486:	430a      	orrs	r2, r1
 8004488:	492a      	ldr	r1, [pc, #168]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	610b      	str	r3, [r1, #16]
 800448e:	e027      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d112      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004496:	4b27      	ldr	r3, [pc, #156]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800449e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6892      	ldr	r2, [r2, #8]
 80044a6:	0211      	lsls	r1, r2, #8
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6912      	ldr	r2, [r2, #16]
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0552      	lsls	r2, r2, #21
 80044b2:	430a      	orrs	r2, r1
 80044b4:	491f      	ldr	r1, [pc, #124]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	610b      	str	r3, [r1, #16]
 80044ba:	e011      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6892      	ldr	r2, [r2, #8]
 80044cc:	0211      	lsls	r1, r2, #8
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6952      	ldr	r2, [r2, #20]
 80044d2:	0852      	lsrs	r2, r2, #1
 80044d4:	3a01      	subs	r2, #1
 80044d6:	0652      	lsls	r2, r2, #25
 80044d8:	430a      	orrs	r2, r1
 80044da:	4916      	ldr	r1, [pc, #88]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd fc00 	bl	8001cf0 <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044f2:	e009      	b.n	8004508 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044f4:	f7fd fbfc 	bl	8001cf0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d902      	bls.n	8004508 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	73fb      	strb	r3, [r7, #15]
          break;
 8004506:	e005      	b.n	8004514 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ef      	beq.n	80044f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	4904      	ldr	r1, [pc, #16]	; (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000

08004538 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004546:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d018      	beq.n	8004584 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0203 	and.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d10d      	bne.n	800457e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
       ||
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800456a:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
       ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d047      	beq.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e044      	b.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d018      	beq.n	80045be <RCCEx_PLLSAI2_Config+0x86>
 800458c:	2b03      	cmp	r3, #3
 800458e:	d825      	bhi.n	80045dc <RCCEx_PLLSAI2_Config+0xa4>
 8004590:	2b01      	cmp	r3, #1
 8004592:	d002      	beq.n	800459a <RCCEx_PLLSAI2_Config+0x62>
 8004594:	2b02      	cmp	r3, #2
 8004596:	d009      	beq.n	80045ac <RCCEx_PLLSAI2_Config+0x74>
 8004598:	e020      	b.n	80045dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800459a:	4b55      	ldr	r3, [pc, #340]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d11d      	bne.n	80045e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045aa:	e01a      	b.n	80045e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045ac:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d116      	bne.n	80045e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045bc:	e013      	b.n	80045e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045be:	4b4c      	ldr	r3, [pc, #304]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ca:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045da:	e006      	b.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      break;
 80045e0:	e004      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6819      	ldr	r1, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	430b      	orrs	r3, r1
 8004608:	4939      	ldr	r1, [pc, #228]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d167      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004620:	f7fd fb66 	bl	8001cf0 <HAL_GetTick>
 8004624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004626:	e009      	b.n	800463c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004628:	f7fd fb62 	bl	8001cf0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d902      	bls.n	800463c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	73fb      	strb	r3, [r7, #15]
        break;
 800463a:	e005      	b.n	8004648 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463c:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ef      	bne.n	8004628 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14a      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d111      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004654:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800465c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	0211      	lsls	r1, r2, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68d2      	ldr	r2, [r2, #12]
 800466a:	0912      	lsrs	r2, r2, #4
 800466c:	0452      	lsls	r2, r2, #17
 800466e:	430a      	orrs	r2, r1
 8004670:	491f      	ldr	r1, [pc, #124]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	614b      	str	r3, [r1, #20]
 8004676:	e011      	b.n	800469c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6892      	ldr	r2, [r2, #8]
 8004688:	0211      	lsls	r1, r2, #8
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6912      	ldr	r2, [r2, #16]
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	3a01      	subs	r2, #1
 8004692:	0652      	lsls	r2, r2, #25
 8004694:	430a      	orrs	r2, r1
 8004696:	4916      	ldr	r1, [pc, #88]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800469c:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd fb22 	bl	8001cf0 <HAL_GetTick>
 80046ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046ae:	e009      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046b0:	f7fd fb1e 	bl	8001cf0 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d902      	bls.n	80046c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	73fb      	strb	r3, [r7, #15]
          break;
 80046c2:	e005      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4904      	ldr	r1, [pc, #16]	; (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e049      	b.n	800479a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fd f836 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 fc80 	bl	8005038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d001      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e04f      	b.n	800485c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a23      	ldr	r2, [pc, #140]	; (8004868 <HAL_TIM_Base_Start_IT+0xc4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01d      	beq.n	800481a <HAL_TIM_Base_Start_IT+0x76>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e6:	d018      	beq.n	800481a <HAL_TIM_Base_Start_IT+0x76>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	; (800486c <HAL_TIM_Base_Start_IT+0xc8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_TIM_Base_Start_IT+0x76>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <HAL_TIM_Base_Start_IT+0xcc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_TIM_Base_Start_IT+0x76>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <HAL_TIM_Base_Start_IT+0xd0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_TIM_Base_Start_IT+0x76>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <HAL_TIM_Base_Start_IT+0xd4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_TIM_Base_Start_IT+0x76>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a19      	ldr	r2, [pc, #100]	; (800487c <HAL_TIM_Base_Start_IT+0xd8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d115      	bne.n	8004846 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	4b17      	ldr	r3, [pc, #92]	; (8004880 <HAL_TIM_Base_Start_IT+0xdc>)
 8004822:	4013      	ands	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b06      	cmp	r3, #6
 800482a:	d015      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0xb4>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004832:	d011      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	e008      	b.n	8004858 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e000      	b.n	800485a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40013400 	.word	0x40013400
 800487c:	40014000 	.word	0x40014000
 8004880:	00010007 	.word	0x00010007

08004884 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e049      	b.n	800492a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc ff24 	bl	80016f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f000 fbb8 	bl	8005038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e041      	b.n	80049ca <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f839 	bl	80049d2 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 fb60 	bl	8005038 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0208 	bic.w	r2, r2, #8
 8004986:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6819      	ldr	r1, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d122      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d11b      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0202 	mvn.w	r2, #2
 8004a12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fb fde1 	bl	80005f0 <HAL_TIM_IC_CaptureCallback>
 8004a2e:	e005      	b.n	8004a3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fae3 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 faea 	bl	8005010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d122      	bne.n	8004a96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d11b      	bne.n	8004a96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f06f 0204 	mvn.w	r2, #4
 8004a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fb fdb7 	bl	80005f0 <HAL_TIM_IC_CaptureCallback>
 8004a82:	e005      	b.n	8004a90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fab9 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fac0 	bl	8005010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d122      	bne.n	8004aea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d11b      	bne.n	8004aea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0208 	mvn.w	r2, #8
 8004aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fb fd8d 	bl	80005f0 <HAL_TIM_IC_CaptureCallback>
 8004ad6:	e005      	b.n	8004ae4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fa8f 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa96 	bl	8005010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d122      	bne.n	8004b3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d11b      	bne.n	8004b3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f06f 0210 	mvn.w	r2, #16
 8004b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2208      	movs	r2, #8
 8004b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fb fd63 	bl	80005f0 <HAL_TIM_IC_CaptureCallback>
 8004b2a:	e005      	b.n	8004b38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fa65 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fa6c 	bl	8005010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d10e      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d107      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f06f 0201 	mvn.w	r2, #1
 8004b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fd f817 	bl	8001b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d10e      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	d107      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fdcf 	bl	8005734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb0:	2b80      	cmp	r3, #128	; 0x80
 8004bb2:	d107      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fdc2 	bl	8005748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa1a 	bl	8005024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d10e      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d107      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0220 	mvn.w	r2, #32
 8004c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fd82 	bl	8005720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e088      	b.n	8004d54 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d11b      	bne.n	8004c88 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6819      	ldr	r1, [r3, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f000 fb18 	bl	8005294 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 020c 	bic.w	r2, r2, #12
 8004c72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6999      	ldr	r1, [r3, #24]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	619a      	str	r2, [r3, #24]
 8004c86:	e060      	b.n	8004d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d11c      	bne.n	8004cc8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6819      	ldr	r1, [r3, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f000 fb96 	bl	80053ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cb0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6999      	ldr	r1, [r3, #24]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	021a      	lsls	r2, r3, #8
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	619a      	str	r2, [r3, #24]
 8004cc6:	e040      	b.n	8004d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d11b      	bne.n	8004d06 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f000 fbe3 	bl	80054a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 020c 	bic.w	r2, r2, #12
 8004cf0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	61da      	str	r2, [r3, #28]
 8004d04:	e021      	b.n	8004d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b0c      	cmp	r3, #12
 8004d0a:	d11c      	bne.n	8004d46 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6819      	ldr	r1, [r3, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f000 fc00 	bl	8005520 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d2e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69d9      	ldr	r1, [r3, #28]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	021a      	lsls	r2, r3, #8
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
 8004d44:	e001      	b.n	8004d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0b6      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x18a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db4:	d03e      	beq.n	8004e34 <HAL_TIM_ConfigClockSource+0xd8>
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dba:	f200 8087 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x170>
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc2:	f000 8086 	beq.w	8004ed2 <HAL_TIM_ConfigClockSource+0x176>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dca:	d87f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x170>
 8004dcc:	2b70      	cmp	r3, #112	; 0x70
 8004dce:	d01a      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0xaa>
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d87b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x170>
 8004dd4:	2b60      	cmp	r3, #96	; 0x60
 8004dd6:	d050      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x11e>
 8004dd8:	2b60      	cmp	r3, #96	; 0x60
 8004dda:	d877      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x170>
 8004ddc:	2b50      	cmp	r3, #80	; 0x50
 8004dde:	d03c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0xfe>
 8004de0:	2b50      	cmp	r3, #80	; 0x50
 8004de2:	d873      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x170>
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d058      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x13e>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d86f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x170>
 8004dec:	2b30      	cmp	r3, #48	; 0x30
 8004dee:	d064      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15e>
 8004df0:	2b30      	cmp	r3, #48	; 0x30
 8004df2:	d86b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x170>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d060      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15e>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d867      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x170>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05c      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15e>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d05a      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15e>
 8004e04:	e062      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6899      	ldr	r1, [r3, #8]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f000 fbdb 	bl	80055d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	609a      	str	r2, [r3, #8]
      break;
 8004e32:	e04f      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f000 fbc4 	bl	80055d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e56:	609a      	str	r2, [r3, #8]
      break;
 8004e58:	e03c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f000 fa82 	bl	8005370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2150      	movs	r1, #80	; 0x50
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fb91 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004e78:	e02c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 fade 	bl	8005448 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2160      	movs	r1, #96	; 0x60
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fb81 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004e98:	e01c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 fa62 	bl	8005370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2140      	movs	r1, #64	; 0x40
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb71 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e00c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f000 fb68 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004eca:	e003      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e031      	b.n	8004f6a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f927 	bl	800516c <TIM_SlaveTimer_SetConfig>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e018      	b.n	8004f6a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f46:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f56:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	d831      	bhi.n	8004fec <HAL_TIM_ReadCapturedValue+0x78>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fc5 	.word	0x08004fc5
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004fed 	.word	0x08004fed
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fed 	.word	0x08004fed
 8004fb8:	08004fed 	.word	0x08004fed
 8004fbc:	08004fed 	.word	0x08004fed
 8004fc0:	08004fe3 	.word	0x08004fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fca:	60fb      	str	r3, [r7, #12]

      break;
 8004fcc:	e00f      	b.n	8004fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	60fb      	str	r3, [r7, #12]

      break;
 8004fd6:	e00a      	b.n	8004fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	60fb      	str	r3, [r7, #12]

      break;
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	60fb      	str	r3, [r7, #12]

      break;
 8004fea:	e000      	b.n	8004fee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004fec:	bf00      	nop
  }

  return tmpreg;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a40      	ldr	r2, [pc, #256]	; (800514c <TIM_Base_SetConfig+0x114>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d00f      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3d      	ldr	r2, [pc, #244]	; (8005150 <TIM_Base_SetConfig+0x118>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00b      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3c      	ldr	r2, [pc, #240]	; (8005154 <TIM_Base_SetConfig+0x11c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3b      	ldr	r2, [pc, #236]	; (8005158 <TIM_Base_SetConfig+0x120>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3a      	ldr	r2, [pc, #232]	; (800515c <TIM_Base_SetConfig+0x124>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d108      	bne.n	800508a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2f      	ldr	r2, [pc, #188]	; (800514c <TIM_Base_SetConfig+0x114>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01f      	beq.n	80050d2 <TIM_Base_SetConfig+0x9a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005098:	d01b      	beq.n	80050d2 <TIM_Base_SetConfig+0x9a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2c      	ldr	r2, [pc, #176]	; (8005150 <TIM_Base_SetConfig+0x118>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d017      	beq.n	80050d2 <TIM_Base_SetConfig+0x9a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2b      	ldr	r2, [pc, #172]	; (8005154 <TIM_Base_SetConfig+0x11c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <TIM_Base_SetConfig+0x9a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2a      	ldr	r2, [pc, #168]	; (8005158 <TIM_Base_SetConfig+0x120>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00f      	beq.n	80050d2 <TIM_Base_SetConfig+0x9a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a29      	ldr	r2, [pc, #164]	; (800515c <TIM_Base_SetConfig+0x124>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <TIM_Base_SetConfig+0x9a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a28      	ldr	r2, [pc, #160]	; (8005160 <TIM_Base_SetConfig+0x128>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <TIM_Base_SetConfig+0x9a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a27      	ldr	r2, [pc, #156]	; (8005164 <TIM_Base_SetConfig+0x12c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_Base_SetConfig+0x9a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a26      	ldr	r2, [pc, #152]	; (8005168 <TIM_Base_SetConfig+0x130>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d108      	bne.n	80050e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a10      	ldr	r2, [pc, #64]	; (800514c <TIM_Base_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00f      	beq.n	8005130 <TIM_Base_SetConfig+0xf8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a12      	ldr	r2, [pc, #72]	; (800515c <TIM_Base_SetConfig+0x124>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_Base_SetConfig+0xf8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a11      	ldr	r2, [pc, #68]	; (8005160 <TIM_Base_SetConfig+0x128>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_Base_SetConfig+0xf8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a10      	ldr	r2, [pc, #64]	; (8005164 <TIM_Base_SetConfig+0x12c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0xf8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0f      	ldr	r2, [pc, #60]	; (8005168 <TIM_Base_SetConfig+0x130>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d103      	bne.n	8005138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	615a      	str	r2, [r3, #20]
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b70      	cmp	r3, #112	; 0x70
 80051b8:	d01a      	beq.n	80051f0 <TIM_SlaveTimer_SetConfig+0x84>
 80051ba:	2b70      	cmp	r3, #112	; 0x70
 80051bc:	d860      	bhi.n	8005280 <TIM_SlaveTimer_SetConfig+0x114>
 80051be:	2b60      	cmp	r3, #96	; 0x60
 80051c0:	d054      	beq.n	800526c <TIM_SlaveTimer_SetConfig+0x100>
 80051c2:	2b60      	cmp	r3, #96	; 0x60
 80051c4:	d85c      	bhi.n	8005280 <TIM_SlaveTimer_SetConfig+0x114>
 80051c6:	2b50      	cmp	r3, #80	; 0x50
 80051c8:	d046      	beq.n	8005258 <TIM_SlaveTimer_SetConfig+0xec>
 80051ca:	2b50      	cmp	r3, #80	; 0x50
 80051cc:	d858      	bhi.n	8005280 <TIM_SlaveTimer_SetConfig+0x114>
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d019      	beq.n	8005206 <TIM_SlaveTimer_SetConfig+0x9a>
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d854      	bhi.n	8005280 <TIM_SlaveTimer_SetConfig+0x114>
 80051d6:	2b30      	cmp	r3, #48	; 0x30
 80051d8:	d055      	beq.n	8005286 <TIM_SlaveTimer_SetConfig+0x11a>
 80051da:	2b30      	cmp	r3, #48	; 0x30
 80051dc:	d850      	bhi.n	8005280 <TIM_SlaveTimer_SetConfig+0x114>
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d051      	beq.n	8005286 <TIM_SlaveTimer_SetConfig+0x11a>
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d84c      	bhi.n	8005280 <TIM_SlaveTimer_SetConfig+0x114>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04d      	beq.n	8005286 <TIM_SlaveTimer_SetConfig+0x11a>
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d04b      	beq.n	8005286 <TIM_SlaveTimer_SetConfig+0x11a>
 80051ee:	e047      	b.n	8005280 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68d9      	ldr	r1, [r3, #12]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f000 f9e6 	bl	80055d0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005204:	e040      	b.n	8005288 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d101      	bne.n	8005212 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e03b      	b.n	800528a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005238:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	4313      	orrs	r3, r2
 8005244:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]
      break;
 8005256:	e017      	b.n	8005288 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	6899      	ldr	r1, [r3, #8]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	461a      	mov	r2, r3
 8005266:	f000 f883 	bl	8005370 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800526a:	e00d      	b.n	8005288 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	461a      	mov	r2, r3
 800527a:	f000 f8e5 	bl	8005448 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800527e:	e003      	b.n	8005288 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
      break;
 8005284:	e000      	b.n	8005288 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005286:	bf00      	nop
  }

  return status;
 8005288:	7dfb      	ldrb	r3, [r7, #23]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0201 	bic.w	r2, r3, #1
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4a26      	ldr	r2, [pc, #152]	; (8005358 <TIM_TI1_SetConfig+0xc4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d017      	beq.n	80052f2 <TIM_TI1_SetConfig+0x5e>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d013      	beq.n	80052f2 <TIM_TI1_SetConfig+0x5e>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4a23      	ldr	r2, [pc, #140]	; (800535c <TIM_TI1_SetConfig+0xc8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00f      	beq.n	80052f2 <TIM_TI1_SetConfig+0x5e>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a22      	ldr	r2, [pc, #136]	; (8005360 <TIM_TI1_SetConfig+0xcc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00b      	beq.n	80052f2 <TIM_TI1_SetConfig+0x5e>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4a21      	ldr	r2, [pc, #132]	; (8005364 <TIM_TI1_SetConfig+0xd0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <TIM_TI1_SetConfig+0x5e>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a20      	ldr	r2, [pc, #128]	; (8005368 <TIM_TI1_SetConfig+0xd4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_TI1_SetConfig+0x5e>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <TIM_TI1_SetConfig+0xd8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d101      	bne.n	80052f6 <TIM_TI1_SetConfig+0x62>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <TIM_TI1_SetConfig+0x64>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e003      	b.n	8005316 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800531c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	b2db      	uxtb	r3, r3
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f023 030a 	bic.w	r3, r3, #10
 8005330:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 030a 	and.w	r3, r3, #10
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40014000 	.word	0x40014000

08005370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 030a 	bic.w	r3, r3, #10
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f023 0210 	bic.w	r2, r3, #16
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800540c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	b29b      	uxth	r3, r3
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005420:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f023 0210 	bic.w	r2, r3, #16
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005472:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	031b      	lsls	r3, r3, #12
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005484:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 0303 	bic.w	r3, r3, #3
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80054f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800555e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	031b      	lsls	r3, r3, #12
 8005564:	b29b      	uxth	r3, r3
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005572:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	031b      	lsls	r3, r3, #12
 8005578:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f043 0307 	orr.w	r3, r3, #7
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	021a      	lsls	r2, r3, #8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005624:	2302      	movs	r3, #2
 8005626:	e068      	b.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2e      	ldr	r2, [pc, #184]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2d      	ldr	r2, [pc, #180]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d108      	bne.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569a:	d018      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a13      	ldr	r2, [pc, #76]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a14      	ldr	r2, [pc, #80]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d10c      	bne.n	80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40013400 	.word	0x40013400
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800
 8005718:	40000c00 	.word	0x40000c00
 800571c:	40014000 	.word	0x40014000

08005720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e040      	b.n	80057f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fc f92e 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2224      	movs	r2, #36	; 0x24
 8005788:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fc18 	bl	8005fd0 <UART_SetConfig>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e022      	b.n	80057f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fe96 	bl	80064e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 ff1d 	bl	8006628 <UART_CheckIdleState>
 80057ee:	4603      	mov	r3, r0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580c:	2b20      	cmp	r3, #32
 800580e:	f040 8082 	bne.w	8005916 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_UART_Transmit+0x26>
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e07a      	b.n	8005918 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_UART_Transmit+0x38>
 800582c:	2302      	movs	r3, #2
 800582e:	e073      	b.n	8005918 <HAL_UART_Transmit+0x120>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2221      	movs	r2, #33	; 0x21
 8005844:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005846:	f7fc fa53 	bl	8001cf0 <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005864:	d108      	bne.n	8005878 <HAL_UART_Transmit+0x80>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	e003      	b.n	8005880 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005888:	e02d      	b.n	80058e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2200      	movs	r2, #0
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 ff10 	bl	80066ba <UART_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e039      	b.n	8005918 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	881a      	ldrh	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b6:	b292      	uxth	r2, r2
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	3302      	adds	r3, #2
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	e008      	b.n	80058d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	b292      	uxth	r2, r2
 80058cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	3301      	adds	r3, #1
 80058d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1cb      	bne.n	800588a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2140      	movs	r1, #64	; 0x40
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fedc 	bl	80066ba <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e005      	b.n	8005918 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	e000      	b.n	8005918 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
  }
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	; 0x28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005932:	2b20      	cmp	r3, #32
 8005934:	d142      	bne.n	80059bc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_UART_Receive_IT+0x22>
 800593c:	88fb      	ldrh	r3, [r7, #6]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e03b      	b.n	80059be <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_UART_Receive_IT+0x34>
 8005950:	2302      	movs	r3, #2
 8005952:	e034      	b.n	80059be <HAL_UART_Receive_IT+0x9e>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <HAL_UART_Receive_IT+0xa8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d01f      	beq.n	80059ac <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d018      	beq.n	80059ac <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	613b      	str	r3, [r7, #16]
   return(result);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	623b      	str	r3, [r7, #32]
 800599a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	69f9      	ldr	r1, [r7, #28]
 800599e:	6a3a      	ldr	r2, [r7, #32]
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e6      	bne.n	800597a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	461a      	mov	r2, r3
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 ff46 	bl	8006844 <UART_Start_Receive_IT>
 80059b8:	4603      	mov	r3, r0
 80059ba:	e000      	b.n	80059be <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80059bc:	2302      	movs	r3, #2
  }
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3728      	adds	r7, #40	; 0x28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40008000 	.word	0x40008000

080059cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b0ba      	sub	sp, #232	; 0xe8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80059fa:	4013      	ands	r3, r2
 80059fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d115      	bne.n	8005a34 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00f      	beq.n	8005a34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 82a6 	beq.w	8005f76 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
      }
      return;
 8005a32:	e2a0      	b.n	8005f76 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8117 	beq.w	8005c6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a4e:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <HAL_UART_IRQHandler+0x298>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 810a 	beq.w	8005c6c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <HAL_UART_IRQHandler+0xbc>
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2201      	movs	r2, #1
 8005a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a7e:	f043 0201 	orr.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xec>
 8005a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aae:	f043 0204 	orr.w	r2, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d011      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x11c>
 8005ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ade:	f043 0202 	orr.w	r2, r3, #2
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d017      	beq.n	8005b24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d105      	bne.n	8005b0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2208      	movs	r2, #8
 8005b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1a:	f043 0208 	orr.w	r2, r3, #8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <HAL_UART_IRQHandler+0x18a>
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00c      	beq.n	8005b56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 820c 	beq.w	8005f7a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d005      	beq.n	8005bae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d04f      	beq.n	8005c4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 ff12 	bl	80069d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d141      	bne.n	8005c46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1d9      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d013      	beq.n	8005c3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1a:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <HAL_UART_IRQHandler+0x29c>)
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fd f824 	bl	8002c70 <HAL_DMA_Abort_IT>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d017      	beq.n	8005c5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3c:	e00f      	b.n	8005c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f9b0 	bl	8005fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c44:	e00b      	b.n	8005c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f9ac 	bl	8005fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c4c:	e007      	b.n	8005c5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f9a8 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005c5c:	e18d      	b.n	8005f7a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5e:	bf00      	nop
    return;
 8005c60:	e18b      	b.n	8005f7a <HAL_UART_IRQHandler+0x5ae>
 8005c62:	bf00      	nop
 8005c64:	04000120 	.word	0x04000120
 8005c68:	08006a9f 	.word	0x08006a9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	f040 8146 	bne.w	8005f02 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 813f 	beq.w	8005f02 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8138 	beq.w	8005f02 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2210      	movs	r2, #16
 8005c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	f040 80b4 	bne.w	8005e12 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 815f 	beq.w	8005f7e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	f080 8157 	bcs.w	8005f7e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 8085 	bne.w	8005df6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1da      	bne.n	8005cec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e1      	bne.n	8005d36 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3308      	adds	r3, #8
 8005d78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3308      	adds	r3, #8
 8005d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e3      	bne.n	8005d72 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc6:	f023 0310 	bic.w	r3, r3, #16
 8005dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e4      	bne.n	8005db6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fc feff 	bl	8002bf4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8d4 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e10:	e0b5      	b.n	8005f7e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80a7 	beq.w	8005f82 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80a2 	beq.w	8005f82 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e60:	647b      	str	r3, [r7, #68]	; 0x44
 8005e62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e4      	bne.n	8005e3e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3308      	adds	r3, #8
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	623b      	str	r3, [r7, #32]
   return(result);
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3308      	adds	r3, #8
 8005e94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e98:	633a      	str	r2, [r7, #48]	; 0x30
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e3      	bne.n	8005e74 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0310 	bic.w	r3, r3, #16
 8005ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ee0:	61fb      	str	r3, [r7, #28]
 8005ee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	69b9      	ldr	r1, [r7, #24]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	617b      	str	r3, [r7, #20]
   return(result);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e4      	bne.n	8005ebe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f85c 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f00:	e03f      	b.n	8005f82 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00e      	beq.n	8005f2c <HAL_UART_IRQHandler+0x560>
 8005f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 ff5a 	bl	8006dde <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f2a:	e02d      	b.n	8005f88 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01c      	beq.n	8005f86 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
    }
    return;
 8005f54:	e017      	b.n	8005f86 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d012      	beq.n	8005f88 <HAL_UART_IRQHandler+0x5bc>
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00c      	beq.n	8005f88 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fdab 	bl	8006aca <UART_EndTransmit_IT>
    return;
 8005f74:	e008      	b.n	8005f88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005f76:	bf00      	nop
 8005f78:	e006      	b.n	8005f88 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005f7a:	bf00      	nop
 8005f7c:	e004      	b.n	8005f88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005f86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005f88:	37e8      	adds	r7, #232	; 0xe8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop

08005f90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fd0:	b5b0      	push	{r4, r5, r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4bad      	ldr	r3, [pc, #692]	; (80062b0 <UART_SetConfig+0x2e0>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	69f9      	ldr	r1, [r7, #28]
 8006004:	430b      	orrs	r3, r1
 8006006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4aa2      	ldr	r2, [pc, #648]	; (80062b4 <UART_SetConfig+0x2e4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	4313      	orrs	r3, r2
 8006036:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	430a      	orrs	r2, r1
 800604a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a99      	ldr	r2, [pc, #612]	; (80062b8 <UART_SetConfig+0x2e8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d121      	bne.n	800609a <UART_SetConfig+0xca>
 8006056:	4b99      	ldr	r3, [pc, #612]	; (80062bc <UART_SetConfig+0x2ec>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	2b03      	cmp	r3, #3
 8006062:	d817      	bhi.n	8006094 <UART_SetConfig+0xc4>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <UART_SetConfig+0x9c>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	0800607d 	.word	0x0800607d
 8006070:	08006089 	.word	0x08006089
 8006074:	08006083 	.word	0x08006083
 8006078:	0800608f 	.word	0x0800608f
 800607c:	2301      	movs	r3, #1
 800607e:	76fb      	strb	r3, [r7, #27]
 8006080:	e0e7      	b.n	8006252 <UART_SetConfig+0x282>
 8006082:	2302      	movs	r3, #2
 8006084:	76fb      	strb	r3, [r7, #27]
 8006086:	e0e4      	b.n	8006252 <UART_SetConfig+0x282>
 8006088:	2304      	movs	r3, #4
 800608a:	76fb      	strb	r3, [r7, #27]
 800608c:	e0e1      	b.n	8006252 <UART_SetConfig+0x282>
 800608e:	2308      	movs	r3, #8
 8006090:	76fb      	strb	r3, [r7, #27]
 8006092:	e0de      	b.n	8006252 <UART_SetConfig+0x282>
 8006094:	2310      	movs	r3, #16
 8006096:	76fb      	strb	r3, [r7, #27]
 8006098:	e0db      	b.n	8006252 <UART_SetConfig+0x282>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a88      	ldr	r2, [pc, #544]	; (80062c0 <UART_SetConfig+0x2f0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d132      	bne.n	800610a <UART_SetConfig+0x13a>
 80060a4:	4b85      	ldr	r3, [pc, #532]	; (80062bc <UART_SetConfig+0x2ec>)
 80060a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b0c      	cmp	r3, #12
 80060b0:	d828      	bhi.n	8006104 <UART_SetConfig+0x134>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0xe8>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060ed 	.word	0x080060ed
 80060bc:	08006105 	.word	0x08006105
 80060c0:	08006105 	.word	0x08006105
 80060c4:	08006105 	.word	0x08006105
 80060c8:	080060f9 	.word	0x080060f9
 80060cc:	08006105 	.word	0x08006105
 80060d0:	08006105 	.word	0x08006105
 80060d4:	08006105 	.word	0x08006105
 80060d8:	080060f3 	.word	0x080060f3
 80060dc:	08006105 	.word	0x08006105
 80060e0:	08006105 	.word	0x08006105
 80060e4:	08006105 	.word	0x08006105
 80060e8:	080060ff 	.word	0x080060ff
 80060ec:	2300      	movs	r3, #0
 80060ee:	76fb      	strb	r3, [r7, #27]
 80060f0:	e0af      	b.n	8006252 <UART_SetConfig+0x282>
 80060f2:	2302      	movs	r3, #2
 80060f4:	76fb      	strb	r3, [r7, #27]
 80060f6:	e0ac      	b.n	8006252 <UART_SetConfig+0x282>
 80060f8:	2304      	movs	r3, #4
 80060fa:	76fb      	strb	r3, [r7, #27]
 80060fc:	e0a9      	b.n	8006252 <UART_SetConfig+0x282>
 80060fe:	2308      	movs	r3, #8
 8006100:	76fb      	strb	r3, [r7, #27]
 8006102:	e0a6      	b.n	8006252 <UART_SetConfig+0x282>
 8006104:	2310      	movs	r3, #16
 8006106:	76fb      	strb	r3, [r7, #27]
 8006108:	e0a3      	b.n	8006252 <UART_SetConfig+0x282>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a6d      	ldr	r2, [pc, #436]	; (80062c4 <UART_SetConfig+0x2f4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d120      	bne.n	8006156 <UART_SetConfig+0x186>
 8006114:	4b69      	ldr	r3, [pc, #420]	; (80062bc <UART_SetConfig+0x2ec>)
 8006116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800611e:	2b30      	cmp	r3, #48	; 0x30
 8006120:	d013      	beq.n	800614a <UART_SetConfig+0x17a>
 8006122:	2b30      	cmp	r3, #48	; 0x30
 8006124:	d814      	bhi.n	8006150 <UART_SetConfig+0x180>
 8006126:	2b20      	cmp	r3, #32
 8006128:	d009      	beq.n	800613e <UART_SetConfig+0x16e>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d810      	bhi.n	8006150 <UART_SetConfig+0x180>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <UART_SetConfig+0x168>
 8006132:	2b10      	cmp	r3, #16
 8006134:	d006      	beq.n	8006144 <UART_SetConfig+0x174>
 8006136:	e00b      	b.n	8006150 <UART_SetConfig+0x180>
 8006138:	2300      	movs	r3, #0
 800613a:	76fb      	strb	r3, [r7, #27]
 800613c:	e089      	b.n	8006252 <UART_SetConfig+0x282>
 800613e:	2302      	movs	r3, #2
 8006140:	76fb      	strb	r3, [r7, #27]
 8006142:	e086      	b.n	8006252 <UART_SetConfig+0x282>
 8006144:	2304      	movs	r3, #4
 8006146:	76fb      	strb	r3, [r7, #27]
 8006148:	e083      	b.n	8006252 <UART_SetConfig+0x282>
 800614a:	2308      	movs	r3, #8
 800614c:	76fb      	strb	r3, [r7, #27]
 800614e:	e080      	b.n	8006252 <UART_SetConfig+0x282>
 8006150:	2310      	movs	r3, #16
 8006152:	76fb      	strb	r3, [r7, #27]
 8006154:	e07d      	b.n	8006252 <UART_SetConfig+0x282>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a5b      	ldr	r2, [pc, #364]	; (80062c8 <UART_SetConfig+0x2f8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d120      	bne.n	80061a2 <UART_SetConfig+0x1d2>
 8006160:	4b56      	ldr	r3, [pc, #344]	; (80062bc <UART_SetConfig+0x2ec>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800616a:	2bc0      	cmp	r3, #192	; 0xc0
 800616c:	d013      	beq.n	8006196 <UART_SetConfig+0x1c6>
 800616e:	2bc0      	cmp	r3, #192	; 0xc0
 8006170:	d814      	bhi.n	800619c <UART_SetConfig+0x1cc>
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d009      	beq.n	800618a <UART_SetConfig+0x1ba>
 8006176:	2b80      	cmp	r3, #128	; 0x80
 8006178:	d810      	bhi.n	800619c <UART_SetConfig+0x1cc>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <UART_SetConfig+0x1b4>
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d006      	beq.n	8006190 <UART_SetConfig+0x1c0>
 8006182:	e00b      	b.n	800619c <UART_SetConfig+0x1cc>
 8006184:	2300      	movs	r3, #0
 8006186:	76fb      	strb	r3, [r7, #27]
 8006188:	e063      	b.n	8006252 <UART_SetConfig+0x282>
 800618a:	2302      	movs	r3, #2
 800618c:	76fb      	strb	r3, [r7, #27]
 800618e:	e060      	b.n	8006252 <UART_SetConfig+0x282>
 8006190:	2304      	movs	r3, #4
 8006192:	76fb      	strb	r3, [r7, #27]
 8006194:	e05d      	b.n	8006252 <UART_SetConfig+0x282>
 8006196:	2308      	movs	r3, #8
 8006198:	76fb      	strb	r3, [r7, #27]
 800619a:	e05a      	b.n	8006252 <UART_SetConfig+0x282>
 800619c:	2310      	movs	r3, #16
 800619e:	76fb      	strb	r3, [r7, #27]
 80061a0:	e057      	b.n	8006252 <UART_SetConfig+0x282>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a49      	ldr	r2, [pc, #292]	; (80062cc <UART_SetConfig+0x2fc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d125      	bne.n	80061f8 <UART_SetConfig+0x228>
 80061ac:	4b43      	ldr	r3, [pc, #268]	; (80062bc <UART_SetConfig+0x2ec>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ba:	d017      	beq.n	80061ec <UART_SetConfig+0x21c>
 80061bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c0:	d817      	bhi.n	80061f2 <UART_SetConfig+0x222>
 80061c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c6:	d00b      	beq.n	80061e0 <UART_SetConfig+0x210>
 80061c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061cc:	d811      	bhi.n	80061f2 <UART_SetConfig+0x222>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <UART_SetConfig+0x20a>
 80061d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d6:	d006      	beq.n	80061e6 <UART_SetConfig+0x216>
 80061d8:	e00b      	b.n	80061f2 <UART_SetConfig+0x222>
 80061da:	2300      	movs	r3, #0
 80061dc:	76fb      	strb	r3, [r7, #27]
 80061de:	e038      	b.n	8006252 <UART_SetConfig+0x282>
 80061e0:	2302      	movs	r3, #2
 80061e2:	76fb      	strb	r3, [r7, #27]
 80061e4:	e035      	b.n	8006252 <UART_SetConfig+0x282>
 80061e6:	2304      	movs	r3, #4
 80061e8:	76fb      	strb	r3, [r7, #27]
 80061ea:	e032      	b.n	8006252 <UART_SetConfig+0x282>
 80061ec:	2308      	movs	r3, #8
 80061ee:	76fb      	strb	r3, [r7, #27]
 80061f0:	e02f      	b.n	8006252 <UART_SetConfig+0x282>
 80061f2:	2310      	movs	r3, #16
 80061f4:	76fb      	strb	r3, [r7, #27]
 80061f6:	e02c      	b.n	8006252 <UART_SetConfig+0x282>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2d      	ldr	r2, [pc, #180]	; (80062b4 <UART_SetConfig+0x2e4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d125      	bne.n	800624e <UART_SetConfig+0x27e>
 8006202:	4b2e      	ldr	r3, [pc, #184]	; (80062bc <UART_SetConfig+0x2ec>)
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800620c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006210:	d017      	beq.n	8006242 <UART_SetConfig+0x272>
 8006212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006216:	d817      	bhi.n	8006248 <UART_SetConfig+0x278>
 8006218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621c:	d00b      	beq.n	8006236 <UART_SetConfig+0x266>
 800621e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006222:	d811      	bhi.n	8006248 <UART_SetConfig+0x278>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <UART_SetConfig+0x260>
 8006228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622c:	d006      	beq.n	800623c <UART_SetConfig+0x26c>
 800622e:	e00b      	b.n	8006248 <UART_SetConfig+0x278>
 8006230:	2300      	movs	r3, #0
 8006232:	76fb      	strb	r3, [r7, #27]
 8006234:	e00d      	b.n	8006252 <UART_SetConfig+0x282>
 8006236:	2302      	movs	r3, #2
 8006238:	76fb      	strb	r3, [r7, #27]
 800623a:	e00a      	b.n	8006252 <UART_SetConfig+0x282>
 800623c:	2304      	movs	r3, #4
 800623e:	76fb      	strb	r3, [r7, #27]
 8006240:	e007      	b.n	8006252 <UART_SetConfig+0x282>
 8006242:	2308      	movs	r3, #8
 8006244:	76fb      	strb	r3, [r7, #27]
 8006246:	e004      	b.n	8006252 <UART_SetConfig+0x282>
 8006248:	2310      	movs	r3, #16
 800624a:	76fb      	strb	r3, [r7, #27]
 800624c:	e001      	b.n	8006252 <UART_SetConfig+0x282>
 800624e:	2310      	movs	r3, #16
 8006250:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a17      	ldr	r2, [pc, #92]	; (80062b4 <UART_SetConfig+0x2e4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	f040 8087 	bne.w	800636c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800625e:	7efb      	ldrb	r3, [r7, #27]
 8006260:	2b08      	cmp	r3, #8
 8006262:	d837      	bhi.n	80062d4 <UART_SetConfig+0x304>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0x29c>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	08006291 	.word	0x08006291
 8006270:	080062d5 	.word	0x080062d5
 8006274:	08006299 	.word	0x08006299
 8006278:	080062d5 	.word	0x080062d5
 800627c:	0800629f 	.word	0x0800629f
 8006280:	080062d5 	.word	0x080062d5
 8006284:	080062d5 	.word	0x080062d5
 8006288:	080062d5 	.word	0x080062d5
 800628c:	080062a7 	.word	0x080062a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006290:	f7fd fcb6 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 8006294:	6178      	str	r0, [r7, #20]
        break;
 8006296:	e022      	b.n	80062de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <UART_SetConfig+0x300>)
 800629a:	617b      	str	r3, [r7, #20]
        break;
 800629c:	e01f      	b.n	80062de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629e:	f7fd fc17 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 80062a2:	6178      	str	r0, [r7, #20]
        break;
 80062a4:	e01b      	b.n	80062de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062aa:	617b      	str	r3, [r7, #20]
        break;
 80062ac:	e017      	b.n	80062de <UART_SetConfig+0x30e>
 80062ae:	bf00      	nop
 80062b0:	efff69f3 	.word	0xefff69f3
 80062b4:	40008000 	.word	0x40008000
 80062b8:	40013800 	.word	0x40013800
 80062bc:	40021000 	.word	0x40021000
 80062c0:	40004400 	.word	0x40004400
 80062c4:	40004800 	.word	0x40004800
 80062c8:	40004c00 	.word	0x40004c00
 80062cc:	40005000 	.word	0x40005000
 80062d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	76bb      	strb	r3, [r7, #26]
        break;
 80062dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 80f1 	beq.w	80064c8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	4413      	add	r3, r2
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d305      	bcc.n	8006302 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d902      	bls.n	8006308 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	76bb      	strb	r3, [r7, #26]
 8006306:	e0df      	b.n	80064c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4618      	mov	r0, r3
 800630c:	f04f 0100 	mov.w	r1, #0
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	020b      	lsls	r3, r1, #8
 800631a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800631e:	0202      	lsls	r2, r0, #8
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	6849      	ldr	r1, [r1, #4]
 8006324:	0849      	lsrs	r1, r1, #1
 8006326:	4608      	mov	r0, r1
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	1814      	adds	r4, r2, r0
 800632e:	eb43 0501 	adc.w	r5, r3, r1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	461a      	mov	r2, r3
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	4620      	mov	r0, r4
 800633e:	4629      	mov	r1, r5
 8006340:	f7f9 ff4a 	bl	80001d8 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4613      	mov	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006352:	d308      	bcc.n	8006366 <UART_SetConfig+0x396>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800635a:	d204      	bcs.n	8006366 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	60da      	str	r2, [r3, #12]
 8006364:	e0b0      	b.n	80064c8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	76bb      	strb	r3, [r7, #26]
 800636a:	e0ad      	b.n	80064c8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006374:	d15b      	bne.n	800642e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006376:	7efb      	ldrb	r3, [r7, #27]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d828      	bhi.n	80063ce <UART_SetConfig+0x3fe>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0x3b4>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063cf 	.word	0x080063cf
 8006394:	080063bf 	.word	0x080063bf
 8006398:	080063cf 	.word	0x080063cf
 800639c:	080063cf 	.word	0x080063cf
 80063a0:	080063cf 	.word	0x080063cf
 80063a4:	080063c7 	.word	0x080063c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a8:	f7fd fc2a 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 80063ac:	6178      	str	r0, [r7, #20]
        break;
 80063ae:	e013      	b.n	80063d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b0:	f7fd fc3c 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 80063b4:	6178      	str	r0, [r7, #20]
        break;
 80063b6:	e00f      	b.n	80063d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b49      	ldr	r3, [pc, #292]	; (80064e0 <UART_SetConfig+0x510>)
 80063ba:	617b      	str	r3, [r7, #20]
        break;
 80063bc:	e00c      	b.n	80063d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063be:	f7fd fb87 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 80063c2:	6178      	str	r0, [r7, #20]
        break;
 80063c4:	e008      	b.n	80063d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ca:	617b      	str	r3, [r7, #20]
        break;
 80063cc:	e004      	b.n	80063d8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	76bb      	strb	r3, [r7, #26]
        break;
 80063d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d074      	beq.n	80064c8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	005a      	lsls	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	441a      	add	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d916      	bls.n	8006428 <UART_SetConfig+0x458>
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d212      	bcs.n	8006428 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f023 030f 	bic.w	r3, r3, #15
 800640a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	b29a      	uxth	r2, r3
 8006418:	89fb      	ldrh	r3, [r7, #14]
 800641a:	4313      	orrs	r3, r2
 800641c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	89fa      	ldrh	r2, [r7, #14]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e04f      	b.n	80064c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	76bb      	strb	r3, [r7, #26]
 800642c:	e04c      	b.n	80064c8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800642e:	7efb      	ldrb	r3, [r7, #27]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d828      	bhi.n	8006486 <UART_SetConfig+0x4b6>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x46c>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	08006461 	.word	0x08006461
 8006440:	08006469 	.word	0x08006469
 8006444:	08006471 	.word	0x08006471
 8006448:	08006487 	.word	0x08006487
 800644c:	08006477 	.word	0x08006477
 8006450:	08006487 	.word	0x08006487
 8006454:	08006487 	.word	0x08006487
 8006458:	08006487 	.word	0x08006487
 800645c:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fd fbce 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 8006464:	6178      	str	r0, [r7, #20]
        break;
 8006466:	e013      	b.n	8006490 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006468:	f7fd fbe0 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 800646c:	6178      	str	r0, [r7, #20]
        break;
 800646e:	e00f      	b.n	8006490 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b1b      	ldr	r3, [pc, #108]	; (80064e0 <UART_SetConfig+0x510>)
 8006472:	617b      	str	r3, [r7, #20]
        break;
 8006474:	e00c      	b.n	8006490 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fd fb2b 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 800647a:	6178      	str	r0, [r7, #20]
        break;
 800647c:	e008      	b.n	8006490 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	617b      	str	r3, [r7, #20]
        break;
 8006484:	e004      	b.n	8006490 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	76bb      	strb	r3, [r7, #26]
        break;
 800648e:	bf00      	nop
    }

    if (pclk != 0U)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d018      	beq.n	80064c8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	085a      	lsrs	r2, r3, #1
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	441a      	add	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d909      	bls.n	80064c4 <UART_SetConfig+0x4f4>
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b6:	d205      	bcs.n	80064c4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	e001      	b.n	80064c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bdb0      	pop	{r4, r5, r7, pc}
 80064de:	bf00      	nop
 80064e0:	00f42400 	.word	0x00f42400

080064e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01a      	beq.n	80065fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e2:	d10a      	bne.n	80065fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
  }
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af02      	add	r7, sp, #8
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006638:	f7fb fb5a 	bl	8001cf0 <HAL_GetTick>
 800663c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b08      	cmp	r3, #8
 800664a:	d10e      	bne.n	800666a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f82d 	bl	80066ba <UART_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e023      	b.n	80066b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b04      	cmp	r3, #4
 8006676:	d10e      	bne.n	8006696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f817 	bl	80066ba <UART_WaitOnFlagUntilTimeout>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e00d      	b.n	80066b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b09c      	sub	sp, #112	; 0x70
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	4613      	mov	r3, r2
 80066c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ca:	e0a5      	b.n	8006818 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	f000 80a1 	beq.w	8006818 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d6:	f7fb fb0b 	bl	8001cf0 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d302      	bcc.n	80066ec <UART_WaitOnFlagUntilTimeout+0x32>
 80066e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d13e      	bne.n	800676a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006700:	667b      	str	r3, [r7, #100]	; 0x64
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800670a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800670c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006710:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e6      	bne.n	80066ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	663b      	str	r3, [r7, #96]	; 0x60
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800673e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006740:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800674c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e5      	bne.n	800671e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e067      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d04f      	beq.n	8006818 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006786:	d147      	bne.n	8006818 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006790:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
 80067b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e6      	bne.n	8006792 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3308      	adds	r3, #8
 80067ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	613b      	str	r3, [r7, #16]
   return(result);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	66bb      	str	r3, [r7, #104]	; 0x68
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3308      	adds	r3, #8
 80067e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067e4:	623a      	str	r2, [r7, #32]
 80067e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	69f9      	ldr	r1, [r7, #28]
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e5      	bne.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e010      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4013      	ands	r3, r2
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	429a      	cmp	r2, r3
 8006834:	f43f af4a 	beq.w	80066cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3770      	adds	r7, #112	; 0x70
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006844:	b480      	push	{r7}
 8006846:	b097      	sub	sp, #92	; 0x5c
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006876:	d10e      	bne.n	8006896 <UART_Start_Receive_IT+0x52>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d105      	bne.n	800688c <UART_Start_Receive_IT+0x48>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800688a:	e02d      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	22ff      	movs	r2, #255	; 0xff
 8006890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006894:	e028      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10d      	bne.n	80068ba <UART_Start_Receive_IT+0x76>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <UART_Start_Receive_IT+0x6c>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	22ff      	movs	r2, #255	; 0xff
 80068aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068ae:	e01b      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	227f      	movs	r2, #127	; 0x7f
 80068b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068b8:	e016      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068c2:	d10d      	bne.n	80068e0 <UART_Start_Receive_IT+0x9c>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <UART_Start_Receive_IT+0x92>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	227f      	movs	r2, #127	; 0x7f
 80068d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068d4:	e008      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	223f      	movs	r2, #63	; 0x3f
 80068da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068de:	e003      	b.n	80068e8 <UART_Start_Receive_IT+0xa4>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2222      	movs	r2, #34	; 0x22
 80068f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	657b      	str	r3, [r7, #84]	; 0x54
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006916:	64ba      	str	r2, [r7, #72]	; 0x48
 8006918:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800691c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e5      	bne.n	80068f6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	d107      	bne.n	8006944 <UART_Start_Receive_IT+0x100>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d103      	bne.n	8006944 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <UART_Start_Receive_IT+0x18c>)
 8006940:	665a      	str	r2, [r3, #100]	; 0x64
 8006942:	e002      	b.n	800694a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4a23      	ldr	r2, [pc, #140]	; (80069d4 <UART_Start_Receive_IT+0x190>)
 8006948:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d019      	beq.n	800698e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800696e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006978:	637b      	str	r3, [r7, #52]	; 0x34
 800697a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800697e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_Start_Receive_IT+0x116>
 800698c:	e018      	b.n	80069c0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	613b      	str	r3, [r7, #16]
   return(result);
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f043 0320 	orr.w	r3, r3, #32
 80069a2:	653b      	str	r3, [r7, #80]	; 0x50
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ac:	623b      	str	r3, [r7, #32]
 80069ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	69f9      	ldr	r1, [r7, #28]
 80069b2:	6a3a      	ldr	r2, [r7, #32]
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e6      	bne.n	800698e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	375c      	adds	r7, #92	; 0x5c
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	08006c7f 	.word	0x08006c7f
 80069d4:	08006b1f 	.word	0x08006b1f

080069d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b095      	sub	sp, #84	; 0x54
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006a00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d118      	bne.n	8006a80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f023 0310 	bic.w	r3, r3, #16
 8006a62:	647b      	str	r3, [r7, #68]	; 0x44
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6979      	ldr	r1, [r7, #20]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e6      	bne.n	8006a4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006a92:	bf00      	nop
 8006a94:	3754      	adds	r7, #84	; 0x54
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7ff fa71 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b088      	sub	sp, #32
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae6:	61fb      	str	r3, [r7, #28]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6979      	ldr	r1, [r7, #20]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	613b      	str	r3, [r7, #16]
   return(result);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e6      	bne.n	8006ad2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fa3d 	bl	8005f90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b16:	bf00      	nop
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b096      	sub	sp, #88	; 0x58
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b34:	2b22      	cmp	r3, #34	; 0x22
 8006b36:	f040 8094 	bne.w	8006c62 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b44:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b48:	b2d9      	uxtb	r1, r3
 8006b4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b54:	400a      	ands	r2, r1
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d179      	bne.n	8006c76 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b96:	653b      	str	r3, [r7, #80]	; 0x50
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bd4:	633a      	str	r2, [r7, #48]	; 0x30
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e5      	bne.n	8006bb4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d12e      	bne.n	8006c5a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	69b9      	ldr	r1, [r7, #24]
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e6      	bne.n	8006c02 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f003 0310 	and.w	r3, r3, #16
 8006c3e:	2b10      	cmp	r3, #16
 8006c40:	d103      	bne.n	8006c4a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2210      	movs	r2, #16
 8006c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff f9b0 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c58:	e00d      	b.n	8006c76 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fa fdd0 	bl	8001800 <HAL_UART_RxCpltCallback>
}
 8006c60:	e009      	b.n	8006c76 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	8b1b      	ldrh	r3, [r3, #24]
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	b292      	uxth	r2, r2
 8006c74:	831a      	strh	r2, [r3, #24]
}
 8006c76:	bf00      	nop
 8006c78:	3758      	adds	r7, #88	; 0x58
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b096      	sub	sp, #88	; 0x58
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c94:	2b22      	cmp	r3, #34	; 0x22
 8006c96:	f040 8094 	bne.w	8006dc2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ca0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006caa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006cae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	1c9a      	adds	r2, r3, #2
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d179      	bne.n	8006dd6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d00:	643b      	str	r3, [r7, #64]	; 0x40
 8006d02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3308      	adds	r3, #8
 8006d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e5      	bne.n	8006d14 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d12e      	bne.n	8006dba <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f023 0310 	bic.w	r3, r3, #16
 8006d76:	647b      	str	r3, [r7, #68]	; 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6979      	ldr	r1, [r7, #20]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d103      	bne.n	8006daa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2210      	movs	r2, #16
 8006da8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff f900 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006db8:	e00d      	b.n	8006dd6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fa fd20 	bl	8001800 <HAL_UART_RxCpltCallback>
}
 8006dc0:	e009      	b.n	8006dd6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	8b1b      	ldrh	r3, [r3, #24]
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0208 	orr.w	r2, r2, #8
 8006dd2:	b292      	uxth	r2, r2
 8006dd4:	831a      	strh	r2, [r3, #24]
}
 8006dd6:	bf00      	nop
 8006dd8:	3758      	adds	r7, #88	; 0x58
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
	...

08006df4 <__libc_init_array>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4d0d      	ldr	r5, [pc, #52]	; (8006e2c <__libc_init_array+0x38>)
 8006df8:	4c0d      	ldr	r4, [pc, #52]	; (8006e30 <__libc_init_array+0x3c>)
 8006dfa:	1b64      	subs	r4, r4, r5
 8006dfc:	10a4      	asrs	r4, r4, #2
 8006dfe:	2600      	movs	r6, #0
 8006e00:	42a6      	cmp	r6, r4
 8006e02:	d109      	bne.n	8006e18 <__libc_init_array+0x24>
 8006e04:	4d0b      	ldr	r5, [pc, #44]	; (8006e34 <__libc_init_array+0x40>)
 8006e06:	4c0c      	ldr	r4, [pc, #48]	; (8006e38 <__libc_init_array+0x44>)
 8006e08:	f000 f820 	bl	8006e4c <_init>
 8006e0c:	1b64      	subs	r4, r4, r5
 8006e0e:	10a4      	asrs	r4, r4, #2
 8006e10:	2600      	movs	r6, #0
 8006e12:	42a6      	cmp	r6, r4
 8006e14:	d105      	bne.n	8006e22 <__libc_init_array+0x2e>
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e1c:	4798      	blx	r3
 8006e1e:	3601      	adds	r6, #1
 8006e20:	e7ee      	b.n	8006e00 <__libc_init_array+0xc>
 8006e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e26:	4798      	blx	r3
 8006e28:	3601      	adds	r6, #1
 8006e2a:	e7f2      	b.n	8006e12 <__libc_init_array+0x1e>
 8006e2c:	08007108 	.word	0x08007108
 8006e30:	08007108 	.word	0x08007108
 8006e34:	08007108 	.word	0x08007108
 8006e38:	0800710c 	.word	0x0800710c

08006e3c <memset>:
 8006e3c:	4402      	add	r2, r0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d100      	bne.n	8006e46 <memset+0xa>
 8006e44:	4770      	bx	lr
 8006e46:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4a:	e7f9      	b.n	8006e40 <memset+0x4>

08006e4c <_init>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	bf00      	nop
 8006e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e52:	bc08      	pop	{r3}
 8006e54:	469e      	mov	lr, r3
 8006e56:	4770      	bx	lr

08006e58 <_fini>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	bf00      	nop
 8006e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5e:	bc08      	pop	{r3}
 8006e60:	469e      	mov	lr, r3
 8006e62:	4770      	bx	lr
