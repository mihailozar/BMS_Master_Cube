
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc4  08009bc4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009bc4  08009bc4  00019bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bcc  08009bcc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bd0  08009bd0  00019bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c78  20000010  08009be4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c88  08009be4  00021c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b40  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b6b  00000000  00000000  00047b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  0004c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  0004e168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6d0  00000000  00000000  0004f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe31  00000000  00000000  0007a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001019f8  00000000  00000000  00099ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019b8f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d28  00000000  00000000  0019b944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ad0 	.word	0x08009ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009ad0 	.word	0x08009ad0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
CANMsg *msg;

extern int prechargeFlag;
extern int ecuSHDReqFlag;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08e      	sub	sp, #56	; 0x38
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef pHeader;
	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pHeader, rxData);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	f107 021c 	add.w	r2, r7, #28
 80004e8:	2100      	movs	r1, #0
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f001 fb84 	bl	8001bf8 <HAL_CAN_GetRxMessage>
//	canSend(pHeader.StdId, rxData);
	CANMsg msg={ &pHeader, rxData};
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	721a      	strb	r2, [r3, #8]
 80004fc:	f107 031c 	add.w	r3, r7, #28
 8000500:	b2db      	uxtb	r3, r3
 8000502:	723b      	strb	r3, [r7, #8]
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	b2db      	uxtb	r3, r3
 800050a:	727b      	strb	r3, [r7, #9]
//	xQueueSendToBackFromISR(CAN_Rx_Queue,&(msg), portMAX_DELAY );
	 //From ECATU
	        if (pHeader.StdId == 0x097)
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	2b97      	cmp	r3, #151	; 0x97
 8000510:	d109      	bne.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	        {
	            if (rxData[0] == 1)
 8000512:	7d3b      	ldrb	r3, [r7, #20]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d106      	bne.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	            {
	                //start PrechargeProcess
	                if (prechargeFlag != 1)
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d002      	beq.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	                    prechargeFlag = 1;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
	            }
	        }
	        //From ECATU
	        if (pHeader.StdId == 0x300)
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800052c:	d10b      	bne.n	8000546 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	        {
	            if (rxData[2] & 0x40)
 800052e:	7dbb      	ldrb	r3, [r7, #22]
 8000530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000534:	2b00      	cmp	r3, #0
 8000536:	d006      	beq.n	8000546 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	            {
	                //open SHUT DOWN Circuit
	                if (ecuSHDReqFlag != 1)
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d002      	beq.n	8000546 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	                    ecuSHDReqFlag = 1;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
	            }
	        }

//	        canSend(pHeader.StdId, rxData);

}
 8000546:	bf00      	nop
 8000548:	3738      	adds	r7, #56	; 0x38
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000058 	.word	0x20000058
 8000554:	2000005c 	.word	0x2000005c

08000558 <Can_Init>:
//		CANMutex = xSemaphoreCreateMutex();
//
//
//}

void Can_Init(){
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0


	CAN_FilterTypeDef CanFilter;
	CanFilter.FilterIdHigh = 0x0000;
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
	CanFilter.FilterIdLow = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
	CanFilter.FilterMaskIdHigh = 0x0000;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
	CanFilter.FilterMaskIdLow = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
	CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
	CanFilter.FilterBank = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
	CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
	CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800057a:	2301      	movs	r3, #1
 800057c:	61fb      	str	r3, [r7, #28]
	CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 800057e:	2301      	movs	r3, #1
 8000580:	623b      	str	r3, [r7, #32]


	HAL_CAN_ConfigFilter(&hcan1, &CanFilter);
 8000582:	463b      	mov	r3, r7
 8000584:	4619      	mov	r1, r3
 8000586:	4807      	ldr	r0, [pc, #28]	; (80005a4 <Can_Init+0x4c>)
 8000588:	f001 f929 	bl	80017de <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800058c:	2102      	movs	r1, #2
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <Can_Init+0x4c>)
 8000590:	f001 fc44 	bl	8001e1c <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <Can_Init+0x4c>)
 8000596:	f001 f9ec 	bl	8001972 <HAL_CAN_Start>

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20001a24 	.word	0x20001a24

080005a8 <canSend>:


void canSend(uint16_t id, uint8_t* canMsg){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	80fb      	strh	r3, [r7, #6]

	CAN_TxHeaderTypeDef pHeader;
		pHeader.DLC = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	61bb      	str	r3, [r7, #24]
		pHeader.RTR = CAN_RTR_DATA;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
		pHeader.IDE = CAN_ID_STD;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
		pHeader.StdId = id;
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	60bb      	str	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1,&pHeader , canMsg, &TxMailbox);
 80005c4:	f107 0108 	add.w	r1, r7, #8
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <canSend+0x48>)
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <canSend+0x4c>)
 80005ce:	f001 fa14 	bl	80019fa <HAL_CAN_AddTxMessage>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 80005d2:	bf00      	nop
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <canSend+0x48>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <canSend+0x4c>)
 80005dc:	f001 fae8 	bl	8001bb0 <HAL_CAN_IsTxMessagePending>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f6      	bne.n	80005d4 <canSend+0x2c>
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20001a1c 	.word	0x20001a1c
 80005f4:	20001a24 	.word	0x20001a24

080005f8 <HAL_TIM_IC_CaptureCallback>:
#include "task.h"
#include "tim.h"



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7f1b      	ldrb	r3, [r3, #28]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d130      	bne.n	800066a <HAL_TIM_IC_CaptureCallback+0x72>
		// Read the IC value
		float ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000608:	2104      	movs	r1, #4
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f004 f8fe 	bl	800480c <HAL_TIM_ReadCapturedValue>
 8000610:	ee07 0a90 	vmov	s15, r0
 8000614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000618:	edc7 7a03 	vstr	s15, [r7, #12]
		if(ICValue!=0){
 800061c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000620:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000628:	d01f      	beq.n	800066a <HAL_TIM_IC_CaptureCallback+0x72>
			Duty = 100-(HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) *100)/ICValue;
 800062a:	2100      	movs	r1, #0
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f004 f8ed 	bl	800480c <HAL_TIM_ReadCapturedValue>
 8000632:	4603      	mov	r3, r0
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	fb02 f303 	mul.w	r3, r2, r3
 800063a:	ee07 3a90 	vmov	s15, r3
 800063e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000642:	ed97 7a03 	vldr	s14, [r7, #12]
 8000646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800064a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000674 <HAL_TIM_IC_CaptureCallback+0x7c>
 800064e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000654:	edc3 7a00 	vstr	s15, [r3]
			Frequency = 4000000/ICValue;
 8000658:	eddf 6a08 	vldr	s13, [pc, #32]	; 800067c <HAL_TIM_IC_CaptureCallback+0x84>
 800065c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000666:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	42c80000 	.word	0x42c80000
 8000678:	2000002c 	.word	0x2000002c
 800067c:	4a742400 	.word	0x4a742400
 8000680:	20000030 	.word	0x20000030

08000684 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_CAN1_Init+0x64>)
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_CAN1_Init+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_CAN1_Init+0x64>)
 8000690:	2201      	movs	r2, #1
 8000692:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_CAN1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_CAN1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006a2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80006a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006d4:	f000 ff88 	bl	80015e8 <HAL_CAN_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 f97f 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20001a24 	.word	0x20001a24
 80006ec:	40006400 	.word	0x40006400

080006f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a20      	ldr	r2, [pc, #128]	; (8000790 <HAL_CAN_MspInit+0xa0>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d139      	bne.n	8000786 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071c:	6593      	str	r3, [r2, #88]	; 0x58
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_CAN_MspInit+0xa4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000742:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000754:	2309      	movs	r3, #9
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f001 ff13 	bl	800258c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2105      	movs	r1, #5
 800076a:	2014      	movs	r0, #20
 800076c:	f001 fe64 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000770:	2014      	movs	r0, #20
 8000772:	f001 fe7d 	bl	8002470 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2105      	movs	r1, #5
 800077a:	2015      	movs	r0, #21
 800077c:	f001 fe5c 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000780:	2015      	movs	r0, #21
 8000782:	f001 fe75 	bl	8002470 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40006400 	.word	0x40006400
 8000794:	40021000 	.word	0x40021000

08000798 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <MX_FREERTOS_Init+0x18>)
 800079e:	2100      	movs	r1, #0
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_FREERTOS_Init+0x1c>)
 80007a2:	f006 f88d 	bl	80068c0 <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <MX_FREERTOS_Init+0x20>)
 80007aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08009b58 	.word	0x08009b58
 80007b4:	080007bd 	.word	0x080007bd
 80007b8:	20001a4c 	.word	0x20001a4c

080007bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f006 f90d 	bl	80069e4 <osDelay>
 80007ca:	e7fb      	b.n	80007c4 <StartDefaultTask+0x8>

080007cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <MX_GPIO_Init+0x124>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a42      	ldr	r2, [pc, #264]	; (80008f0 <MX_GPIO_Init+0x124>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <MX_GPIO_Init+0x124>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <MX_GPIO_Init+0x124>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a3c      	ldr	r2, [pc, #240]	; (80008f0 <MX_GPIO_Init+0x124>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b3a      	ldr	r3, [pc, #232]	; (80008f0 <MX_GPIO_Init+0x124>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <MX_GPIO_Init+0x124>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a36      	ldr	r2, [pc, #216]	; (80008f0 <MX_GPIO_Init+0x124>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <MX_GPIO_Init+0x124>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <MX_GPIO_Init+0x124>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x124>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <MX_GPIO_Init+0x124>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8000848:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_GPIO_Init+0x128>)
 800084a:	f002 f849 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f002 f842 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Uhvacc_Measurement_Pin|Ihvacc_Measurement_Pin;
 800085c:	2303      	movs	r3, #3
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000860:	2303      	movs	r3, #3
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4821      	ldr	r0, [pc, #132]	; (80008f4 <MX_GPIO_Init+0x128>)
 8000870:	f001 fe8c 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin;
 8000874:	f44f 7323 	mov.w	r3, #652	; 0x28c
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4819      	ldr	r0, [pc, #100]	; (80008f4 <MX_GPIO_Init+0x128>)
 800088e:	f001 fe7d 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AirPlusStatus_Pin|AirMinusStatus_Pin;
 8000892:	23c0      	movs	r3, #192	; 0xc0
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f001 fe70 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Precharge_Relay_Status_Pin|SHD_Status_Pin|bmsFault_Pin;
 80008ac:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_GPIO_Init+0x128>)
 80008c2:	f001 fe63 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_SHD_Control_Pin;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_SHD_Control_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f001 fe53 	bl	800258c <HAL_GPIO_Init>

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000800 	.word	0x48000800

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fe3b 	bl	8001576 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f815 	bl	800092e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f7ff ff62 	bl	80007cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000908:	f000 f952 	bl	8000bb0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800090c:	f000 fcba 	bl	8001284 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000910:	f000 fc88 	bl	8001224 <MX_UART5_Init>
  MX_CAN1_Init();
 8000914:	f7ff feb6 	bl	8000684 <MX_CAN1_Init>
  MX_TIM4_Init();
 8000918:	f000 f9ca 	bl	8000cb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */



  userMainInit();
 800091c:	f000 fdb8 	bl	8001490 <userMainInit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000920:	f005 ff84 	bl	800682c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000924:	f7ff ff38 	bl	8000798 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000928:	f005 ffa4 	bl	8006874 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
 800092c:	e7fe      	b.n	800092c <main+0x34>

0800092e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b096      	sub	sp, #88	; 0x58
 8000932:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2244      	movs	r2, #68	; 0x44
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f009 f8bf 	bl	8009ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000950:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000954:	f001 ffea 	bl	800292c <HAL_PWREx_ControlVoltageScaling>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800095e:	f000 f83f 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000962:	2310      	movs	r3, #16
 8000964:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000966:	2301      	movs	r3, #1
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800096e:	2360      	movs	r3, #96	; 0x60
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000972:	2300      	movs	r3, #0
 8000974:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4618      	mov	r0, r3
 800097c:	f002 f82c 	bl	80029d8 <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000986:	f000 f82b 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fbfe 	bl	80031a4 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009ae:	f000 f817 	bl	80009e0 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3758      	adds	r7, #88	; 0x58
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//////
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ce:	f000 fdeb 	bl	80015a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//////
  /* USER CODE END Callback 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40012c00 	.word	0x40012c00

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6613      	str	r3, [r2, #96]	; 0x60
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6593      	str	r3, [r2, #88]	; 0x58
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f001 fd05 	bl	8002438 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	2019      	movs	r0, #25
 8000a52:	f001 fcf1 	bl	8002438 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a56:	2019      	movs	r0, #25
 8000a58:	f001 fd0a 	bl	8002470 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_InitTick+0x9c>)
 8000a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_InitTick+0x9c>)
 8000a62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a66:	6613      	str	r3, [r2, #96]	; 0x60
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_InitTick+0x9c>)
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a74:	f107 0210 	add.w	r2, r7, #16
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fd36 	bl	80034f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a84:	f002 fd1e 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8000a88:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_InitTick+0xa0>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3b01      	subs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000aba:	f003 fa67 	bl	8003f8c <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000ac6:	f003 fab9 	bl	800403c <HAL_TIM_Base_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	20001a50 	.word	0x20001a50
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <CAN1_RX0_IRQHandler+0x10>)
 8000b1a:	f001 f9a5 	bl	8001e68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20001a24 	.word	0x20001a24

08000b28 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <CAN1_RX1_IRQHandler+0x10>)
 8000b2e:	f001 f99b 	bl	8001e68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20001a24 	.word	0x20001a24

08000b3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b42:	f003 fb9c 	bl	800427e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20001a50 	.word	0x20001a50

08000b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <TIM2_IRQHandler+0x10>)
 8000b56:	f003 fb92 	bl	800427e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20001ae8 	.word	0x20001ae8

08000b64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <USART1_IRQHandler+0x10>)
 8000b6a:	f004 fb55 	bl	8005218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20001bbc 	.word	0x20001bbc

08000b78 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <UART5_IRQHandler+0x10>)
 8000b7e:	f004 fb4b 	bl	8005218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20001b38 	.word	0x20001b38

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000be0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c06:	4829      	ldr	r0, [pc, #164]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000c08:	f003 fa88 	bl	800411c <HAL_TIM_IC_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000c12:	f7ff fee5 	bl	80009e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c16:	2304      	movs	r3, #4
 8000c18:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000c1a:	2360      	movs	r3, #96	; 0x60
 8000c1c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481e      	ldr	r0, [pc, #120]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000c32:	f003 fda8 	bl	8004786 <HAL_TIM_SlaveConfigSynchro>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f7ff fed0 	bl	80009e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c44:	2302      	movs	r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	4619      	mov	r1, r3
 8000c58:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000c5a:	f003 fc2f 	bl	80044bc <HAL_TIM_IC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000c64:	f7ff febc 	bl	80009e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2204      	movs	r2, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000c7a:	f003 fc1f 	bl	80044bc <HAL_TIM_IC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c84:	f7ff feac 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_TIM2_Init+0xfc>)
 8000c96:	f004 f907 	bl	8004ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000ca0:	f7ff fe9e 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	; 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20001ae8 	.word	0x20001ae8

08000cb0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cd0:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <MX_TIM4_Init+0xac>)
 8000cd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cd6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000cda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000ce4:	2264      	movs	r2, #100	; 0x64
 8000ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cf4:	4818      	ldr	r0, [pc, #96]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cf6:	f003 f949 	bl	8003f8c <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d00:	f7ff fe6e 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000d12:	f003 fc6f 	bl	80045f4 <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d1c:	f7ff fe60 	bl	80009e0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d20:	2108      	movs	r1, #8
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000d24:	f003 fa51 	bl	80041ca <HAL_TIM_OnePulse_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d2e:	f7ff fe57 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000d40:	f004 f8b2 	bl	8004ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d4a:	f7ff fe49 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20001a9c 	.word	0x20001a9c
 8000d5c:	40000800 	.word	0x40000800

08000d60 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d80:	d12f      	bne.n	8000de2 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_TIM_IC_MspInit+0x8c>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a19      	ldr	r2, [pc, #100]	; (8000dec <HAL_TIM_IC_MspInit+0x8c>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_TIM_IC_MspInit+0x8c>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_TIM_IC_MspInit+0x8c>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_TIM_IC_MspInit+0x8c>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_TIM_IC_MspInit+0x8c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db2:	2308      	movs	r3, #8
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4808      	ldr	r0, [pc, #32]	; (8000df0 <HAL_TIM_IC_MspInit+0x90>)
 8000dce:	f001 fbdd 	bl	800258c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	201c      	movs	r0, #28
 8000dd8:	f001 fb2e 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ddc:	201c      	movs	r0, #28
 8000dde:	f001 fb47 	bl	8002470 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000400 	.word	0x48000400

08000df4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x38>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10b      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40000800 	.word	0x40000800
 8000e30:	40021000 	.word	0x40021000

08000e34 <UART_TransmitTask>:
volatile uint8_t procitano=0;

static TimerHandle_t timerChecker;
void vCallbackFunction ( TimerHandle_t xTimer );
//
static void UART_TransmitTask(void *parameters) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

	uartMsg buffer;
	while (1) {
		xQueueReceive(UART_TransmitQueueHandle, &buffer, portMAX_DELAY);
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <UART_TransmitTask+0x4c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f107 0108 	add.w	r1, r7, #8
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 f9d9 	bl	8007200 <xQueueReceive>
		if (buffer.idUart == 1) {
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d107      	bne.n	8000e64 <UART_TransmitTask+0x30>
			HAL_UART_Transmit_IT(&huart1, &buffer.string, sizeof(uint8_t));
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <UART_TransmitTask+0x50>)
 8000e5e:	f004 f917 	bl	8005090 <HAL_UART_Transmit_IT>
 8000e62:	e006      	b.n	8000e72 <UART_TransmitTask+0x3e>
		} else {
			HAL_UART_Transmit_IT(&huart5, &buffer.string, sizeof(uint8_t));
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <UART_TransmitTask+0x54>)
 8000e6e:	f004 f90f 	bl	8005090 <HAL_UART_Transmit_IT>
		}

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000e72:	f04f 31ff 	mov.w	r1, #4294967295
 8000e76:	2001      	movs	r0, #1
 8000e78:	f007 fcdc 	bl	8008834 <ulTaskNotifyTake>
		xQueueReceive(UART_TransmitQueueHandle, &buffer, portMAX_DELAY);
 8000e7c:	e7de      	b.n	8000e3c <UART_TransmitTask+0x8>
 8000e7e:	bf00      	nop
 8000e80:	20000038 	.word	0x20000038
 8000e84:	20001bbc 	.word	0x20001bbc
 8000e88:	20001b38 	.word	0x20001b38

08000e8c <HAL_UART_TxCpltCallback>:

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

	if (huart->Instance == huart1.Instance
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_UART_TxCpltCallback+0x58>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d005      	beq.n	8000eac <HAL_UART_TxCpltCallback+0x20>
			|| huart->Instance == huart5.Instance) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_UART_TxCpltCallback+0x5c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d117      	bne.n	8000edc <HAL_UART_TxCpltCallback+0x50>
		sin = 1;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_UART_TxCpltCallback+0x60>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
		BaseType_t woken = pdFALSE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(UART_TransmitTaskHandle, &woken);
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_UART_TxCpltCallback+0x64>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f007 fcff 	bl	80088c4 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(woken);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d007      	beq.n	8000edc <HAL_UART_TxCpltCallback+0x50>
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_UART_TxCpltCallback+0x68>)
 8000ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	f3bf 8f4f 	dsb	sy
 8000ed8:	f3bf 8f6f 	isb	sy

	}

}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20001bbc 	.word	0x20001bbc
 8000ee8:	20001b38 	.word	0x20001b38
 8000eec:	20000040 	.word	0x20000040
 8000ef0:	20000034 	.word	0x20000034
 8000ef4:	e000ed04 	.word	0xe000ed04

08000ef8 <HAL_UART_RxCpltCallback>:
	}
}

extern int flagovi;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	TaskHandle_t pom;
	BaseType_t woken = pdFALSE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
	procitano=1;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_RxCpltCallback+0x70>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
	if (huart->Instance == huart5.Instance) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_RxCpltCallback+0x74>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d110      	bne.n	8000f38 <HAL_UART_RxCpltCallback+0x40>
		flagovi=1;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_UART_RxCpltCallback+0x78>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
//		pom=UART5_ReceiveTaskHandle;

		xQueueSendToBackFromISR(UART5_ReceiveQueueHandle, &uartData5, &woken);
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_UART_RxCpltCallback+0x7c>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f107 020c 	add.w	r2, r7, #12
 8000f24:	2300      	movs	r3, #0
 8000f26:	4914      	ldr	r1, [pc, #80]	; (8000f78 <HAL_UART_RxCpltCallback+0x80>)
 8000f28:	f006 f8ce 	bl	80070c8 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart5, &uartData5, sizeof(uint8_t));
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4912      	ldr	r1, [pc, #72]	; (8000f78 <HAL_UART_RxCpltCallback+0x80>)
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <HAL_UART_RxCpltCallback+0x74>)
 8000f32:	f004 f91b 	bl	800516c <HAL_UART_Receive_IT>
	}


//	vTaskNotifyGiveFromISR(pom, &woken);
//	portYIELD_FROM_ISR(woken);
}
 8000f36:	e012      	b.n	8000f5e <HAL_UART_RxCpltCallback+0x66>
	} else if (huart->Instance == huart1.Instance) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_UART_RxCpltCallback+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d10c      	bne.n	8000f5e <HAL_UART_RxCpltCallback+0x66>
		xQueueSendToBackFromISR(UART1_ReceiveQueueHandle, &uartData1, &woken);
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_UART_RxCpltCallback+0x88>)
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	f107 020c 	add.w	r2, r7, #12
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <HAL_UART_RxCpltCallback+0x8c>)
 8000f50:	f006 f8ba 	bl	80070c8 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart1, &uartData1, sizeof(uint8_t));
 8000f54:	2201      	movs	r2, #1
 8000f56:	490b      	ldr	r1, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x8c>)
 8000f58:	4808      	ldr	r0, [pc, #32]	; (8000f7c <HAL_UART_RxCpltCallback+0x84>)
 8000f5a:	f004 f907 	bl	800516c <HAL_UART_Receive_IT>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000041 	.word	0x20000041
 8000f6c:	20001b38 	.word	0x20001b38
 8000f70:	20000054 	.word	0x20000054
 8000f74:	20000048 	.word	0x20000048
 8000f78:	20001b34 	.word	0x20001b34
 8000f7c:	20001bbc 	.word	0x20001bbc
 8000f80:	2000004c 	.word	0x2000004c
 8000f84:	20001b35 	.word	0x20001b35

08000f88 <UART_Init>:

// GENERAL
// -----------------------------------------------------------------------------

void UART_Init() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af02      	add	r7, sp, #8

	UART_TransmitQueueHandle = xQueueCreate(128, sizeof(uartMsg));
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2108      	movs	r1, #8
 8000f92:	2080      	movs	r0, #128	; 0x80
 8000f94:	f005 ff0a 	bl	8006dac <xQueueGenericCreate>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a20      	ldr	r2, [pc, #128]	; (800101c <UART_Init+0x94>)
 8000f9c:	6013      	str	r3, [r2, #0]
	UART_TransmitMutexHandle = xSemaphoreCreateMutex();
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f005 ff7b 	bl	8006e9a <xQueueCreateMutex>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <UART_Init+0x98>)
 8000fa8:	6013      	str	r3, [r2, #0]
	xTaskCreate(UART_TransmitTask, "transmitTask", 64, NULL, 20,
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <UART_Init+0x9c>)
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2314      	movs	r3, #20
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	491c      	ldr	r1, [pc, #112]	; (8001028 <UART_Init+0xa0>)
 8000fb8:	481c      	ldr	r0, [pc, #112]	; (800102c <UART_Init+0xa4>)
 8000fba:	f006 fcf0 	bl	800799e <xTaskCreate>
			&UART_TransmitTaskHandle);

	UART5_ReceiveQueueHandle = xQueueCreate(128, sizeof(uint8_t));
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2080      	movs	r0, #128	; 0x80
 8000fc4:	f005 fef2 	bl	8006dac <xQueueGenericCreate>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a19      	ldr	r2, [pc, #100]	; (8001030 <UART_Init+0xa8>)
 8000fcc:	6013      	str	r3, [r2, #0]
	UART1_ReceiveQueueHandle = xQueueCreate(32, sizeof(uint8_t));
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	2020      	movs	r0, #32
 8000fd4:	f005 feea 	bl	8006dac <xQueueGenericCreate>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <UART_Init+0xac>)
 8000fdc:	6013      	str	r3, [r2, #0]
	UART_ReceiveMutexHandle = xSemaphoreCreateMutex();
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f005 ff5b 	bl	8006e9a <xQueueCreateMutex>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <UART_Init+0xb0>)
 8000fe8:	6013      	str	r3, [r2, #0]

//	xTaskCreate(UART_ReceiveTask, "receiveTask1", 64, (void*)1, 20, &UART1_ReceiveTaskHandle);
//	xTaskCreate(UART_ReceiveTask, "receiveTask5", 64, (void*)5, 20, &UART5_ReceiveTaskHandle);

	HAL_UART_Receive_IT(&huart5, &uartData5, sizeof(uint8_t));
 8000fea:	2201      	movs	r2, #1
 8000fec:	4913      	ldr	r1, [pc, #76]	; (800103c <UART_Init+0xb4>)
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <UART_Init+0xb8>)
 8000ff0:	f004 f8bc 	bl	800516c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uartData1, sizeof(uint8_t));
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4913      	ldr	r1, [pc, #76]	; (8001044 <UART_Init+0xbc>)
 8000ff8:	4813      	ldr	r0, [pc, #76]	; (8001048 <UART_Init+0xc0>)
 8000ffa:	f004 f8b7 	bl	800516c <HAL_UART_Receive_IT>

	timerChecker=xTimerCreate("timeChecker", pdMS_TO_TICKS(timeCheckerUart), pdFALSE, NULL, vCallbackFunction);
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <UART_Init+0xc4>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800100a:	4811      	ldr	r0, [pc, #68]	; (8001050 <UART_Init+0xc8>)
 800100c:	f007 fd88 	bl	8008b20 <xTimerCreate>
 8001010:	4603      	mov	r3, r0
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <UART_Init+0xcc>)
 8001014:	6013      	str	r3, [r2, #0]

}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000038 	.word	0x20000038
 8001020:	2000003c 	.word	0x2000003c
 8001024:	20000034 	.word	0x20000034
 8001028:	08009af4 	.word	0x08009af4
 800102c:	08000e35 	.word	0x08000e35
 8001030:	20000048 	.word	0x20000048
 8001034:	2000004c 	.word	0x2000004c
 8001038:	20000050 	.word	0x20000050
 800103c:	20001b34 	.word	0x20001b34
 8001040:	20001b38 	.word	0x20001b38
 8001044:	20001b35 	.word	0x20001b35
 8001048:	20001bbc 	.word	0x20001bbc
 800104c:	08001059 	.word	0x08001059
 8001050:	08009b04 	.word	0x08009b04
 8001054:	20000044 	.word	0x20000044

08001058 <vCallbackFunction>:


void vCallbackFunction(TimerHandle_t xTimer){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	if(procitano==0){
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <vCallbackFunction+0x3c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10f      	bne.n	800108a <vCallbackFunction+0x32>
		procitano=1;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <vCallbackFunction+0x3c>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
		uint8_t poruka='\t';
 8001070:	2309      	movs	r3, #9
 8001072:	72fb      	strb	r3, [r7, #11]
		BaseType_t woken = pdFALSE;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
		xQueueSendToBack(UART5_ReceiveQueueHandle,&poruka, portMAX_DELAY);
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <vCallbackFunction+0x40>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	f107 010b 	add.w	r1, r7, #11
 8001080:	2300      	movs	r3, #0
 8001082:	f04f 32ff 	mov.w	r2, #4294967295
 8001086:	f005 ff21 	bl	8006ecc <xQueueGenericSend>
//		xQueueSendToBackFromISR(UART5_ReceiveQueueHandle, &poruka, &woken);

	}
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000041 	.word	0x20000041
 8001098:	20000048 	.word	0x20000048

0800109c <UART_AsyncTransmitString>:
//		HAL_TIM_Base_Stop(htim);
//		htim->Instance->CNT=0;
//	}
//}

void UART_AsyncTransmitString(int id, uint8_t const string[]) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	if (string != NULL) {
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d02a      	beq.n	8001102 <UART_AsyncTransmitString+0x66>
		xSemaphoreTake(UART_TransmitMutexHandle, portMAX_DELAY);
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <UART_AsyncTransmitString+0x70>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 f983 	bl	80073c0 <xQueueSemaphoreTake>

		for (uint32_t i = 0; i < strlen(string); i++) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e012      	b.n	80010e6 <UART_AsyncTransmitString+0x4a>
			uartMsg tmp = { string[i], id };
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	733b      	strb	r3, [r7, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	613b      	str	r3, [r7, #16]
			xQueueSendToBack(UART_TransmitQueueHandle, &tmp, portMAX_DELAY);
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <UART_AsyncTransmitString+0x74>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f107 010c 	add.w	r1, r7, #12
 80010d6:	2300      	movs	r3, #0
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	f005 fef6 	bl	8006ecc <xQueueGenericSend>
		for (uint32_t i = 0; i < strlen(string); i++) {
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f7ff f872 	bl	80001d0 <strlen>
 80010ec:	4602      	mov	r2, r0
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d3e5      	bcc.n	80010c0 <UART_AsyncTransmitString+0x24>
		}

		xSemaphoreGive(UART_TransmitMutexHandle);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <UART_AsyncTransmitString+0x70>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	f005 fee5 	bl	8006ecc <xQueueGenericSend>
	}
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000003c 	.word	0x2000003c
 8001110:	20000038 	.word	0x20000038

08001114 <UART_BlockReceiveString>:
	xSemaphoreGive(UART_ReceiveMutexHandle);

	return character;
}

char* UART_BlockReceiveString(int id) {
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(UART_ReceiveMutexHandle, portMAX_DELAY);
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <UART_BlockReceiveString+0xe4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	4618      	mov	r0, r3
 8001126:	f006 f94b 	bl	80073c0 <xQueueSemaphoreTake>

	char *string = pvPortMalloc(64);
 800112a:	2040      	movs	r0, #64	; 0x40
 800112c:	f008 faac 	bl	8009688 <pvPortMalloc>
 8001130:	6138      	str	r0, [r7, #16]

	if (string != NULL) {
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d04f      	beq.n	80011d8 <UART_BlockReceiveString+0xc4>
		uint32_t index = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

		char character = '\0';
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
		procitano=0;
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <UART_BlockReceiveString+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
//		xTimerReset(timerChecker, portMAX_DELAY);
		xTimerStart(timerChecker,portMAX_DELAY);
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <UART_BlockReceiveString+0xec>)
 8001148:	681c      	ldr	r4, [r3, #0]
 800114a:	f006 feb3 	bl	8007eb4 <xTaskGetTickCount>
 800114e:	4602      	mov	r2, r0
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2300      	movs	r3, #0
 8001158:	2101      	movs	r1, #1
 800115a:	4620      	mov	r0, r4
 800115c:	f007 fd3c 	bl	8008bd8 <xTimerGenericCommand>
		while (character != '\n' && character!='\t'&& index < 64) {
 8001160:	e01f      	b.n	80011a2 <UART_BlockReceiveString+0x8e>
			if (id == 5) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d109      	bne.n	800117c <UART_BlockReceiveString+0x68>

				xQueueReceive(UART5_ReceiveQueueHandle, &character,
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <UART_BlockReceiveString+0xf0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f107 010f 	add.w	r1, r7, #15
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	4618      	mov	r0, r3
 8001176:	f006 f843 	bl	8007200 <xQueueReceive>
 800117a:	e00b      	b.n	8001194 <UART_BlockReceiveString+0x80>
						portMAX_DELAY);

			} else {

				xQueueReceive(UART1_ReceiveQueueHandle, &character,
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <UART_BlockReceiveString+0xf4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f107 010f 	add.w	r1, r7, #15
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	4618      	mov	r0, r3
 800118a:	f006 f839 	bl	8007200 <xQueueReceive>
						portMAX_DELAY);
				procitano=1;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <UART_BlockReceiveString+0xe8>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
			}

			string[index++] = character;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	617a      	str	r2, [r7, #20]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4413      	add	r3, r2
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	701a      	strb	r2, [r3, #0]
		while (character != '\n' && character!='\t'&& index < 64) {
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b0a      	cmp	r3, #10
 80011a6:	d005      	beq.n	80011b4 <UART_BlockReceiveString+0xa0>
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b09      	cmp	r3, #9
 80011ac:	d002      	beq.n	80011b4 <UART_BlockReceiveString+0xa0>
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2b3f      	cmp	r3, #63	; 0x3f
 80011b2:	d9d6      	bls.n	8001162 <UART_BlockReceiveString+0x4e>
		}

		if(character=='\t'){
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	2b09      	cmp	r3, #9
 80011b8:	d106      	bne.n	80011c8 <UART_BlockReceiveString+0xb4>
			string[index++] = character;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	617a      	str	r2, [r7, #20]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	701a      	strb	r2, [r3, #0]
		}
		string[--index] = '\0';
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	4413      	add	r3, r2
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	}
	procitano=0;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <UART_BlockReceiveString+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

	xSemaphoreGive(UART_ReceiveMutexHandle);
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <UART_BlockReceiveString+0xe4>)
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	2300      	movs	r3, #0
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	f005 fe70 	bl	8006ecc <xQueueGenericSend>

	return string;
 80011ec:	693b      	ldr	r3, [r7, #16]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000050 	.word	0x20000050
 80011fc:	20000041 	.word	0x20000041
 8001200:	20000044 	.word	0x20000044
 8001204:	20000048 	.word	0x20000048
 8001208:	2000004c 	.word	0x2000004c

0800120c <dealokacijaMemorije>:

void resetQueue() {
	xQueueReset(UART5_ReceiveQueueHandle);
}
void dealokacijaMemorije(char *string){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	vPortFree(string);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f008 fb03 	bl	8009820 <vPortFree>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_UART5_Init+0x58>)
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <MX_UART5_Init+0x5c>)
 800122c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_UART5_Init+0x58>)
 8001230:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001234:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_UART5_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_UART5_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_UART5_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_UART5_Init+0x58>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_UART5_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_UART5_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_UART5_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_UART5_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_UART5_Init+0x58>)
 8001268:	f003 fec4 	bl	8004ff4 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001272:	f7ff fbb5 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20001b38 	.word	0x20001b38
 8001280:	40005000 	.word	0x40005000

08001284 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <MX_USART1_UART_Init+0x58>)
 800128c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <MX_USART1_UART_Init+0x5c>)
 8001292:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 80012a8:	220c      	movs	r2, #12
 80012aa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_USART1_UART_Init+0x54>)
 80012c6:	f003 fe95 	bl	8004ff4 <HAL_UART_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80012d0:	f7ff fb86 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20001bbc 	.word	0x20001bbc
 80012dc:	40013800 	.word	0x40013800
 80012e0:	0003d090 	.word	0x0003d090

080012e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0ae      	sub	sp, #184	; 0xb8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2288      	movs	r2, #136	; 0x88
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f008 fbdb 	bl	8009ac0 <memset>
  if(uartHandle->Instance==UART5)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a5b      	ldr	r2, [pc, #364]	; (800147c <HAL_UART_MspInit+0x198>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d165      	bne.n	80013e0 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001314:	2310      	movs	r3, #16
 8001316:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4618      	mov	r0, r3
 8001322:	f002 f977 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800132c:	f7ff fb58 	bl	80009e0 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800133a:	6593      	str	r3, [r2, #88]	; 0x58
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <HAL_UART_MspInit+0x19c>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <HAL_UART_MspInit+0x19c>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_UART_MspInit+0x19c>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	4a46      	ldr	r2, [pc, #280]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_UART_MspInit+0x19c>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001392:	2308      	movs	r3, #8
 8001394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001398:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800139c:	4619      	mov	r1, r3
 800139e:	4839      	ldr	r0, [pc, #228]	; (8001484 <HAL_UART_MspInit+0x1a0>)
 80013a0:	f001 f8f4 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a4:	2304      	movs	r3, #4
 80013a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013bc:	2308      	movs	r3, #8
 80013be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013c6:	4619      	mov	r1, r3
 80013c8:	482f      	ldr	r0, [pc, #188]	; (8001488 <HAL_UART_MspInit+0x1a4>)
 80013ca:	f001 f8df 	bl	800258c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	2035      	movs	r0, #53	; 0x35
 80013d4:	f001 f830 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80013d8:	2035      	movs	r0, #53	; 0x35
 80013da:	f001 f849 	bl	8002470 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013de:	e049      	b.n	8001474 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a29      	ldr	r2, [pc, #164]	; (800148c <HAL_UART_MspInit+0x1a8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d144      	bne.n	8001474 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013ee:	2300      	movs	r3, #0
 80013f0:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 f90c 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001402:	f7ff faed 	bl	80009e0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_UART_MspInit+0x19c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6613      	str	r3, [r2, #96]	; 0x60
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_UART_MspInit+0x19c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_UART_MspInit+0x19c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001436:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001450:	2307      	movs	r3, #7
 8001452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f001 f894 	bl	800258c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2105      	movs	r1, #5
 8001468:	2025      	movs	r0, #37	; 0x25
 800146a:	f000 ffe5 	bl	8002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146e:	2025      	movs	r0, #37	; 0x25
 8001470:	f000 fffe 	bl	8002470 <HAL_NVIC_EnableIRQ>
}
 8001474:	bf00      	nop
 8001476:	37b8      	adds	r7, #184	; 0xb8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40005000 	.word	0x40005000
 8001480:	40021000 	.word	0x40021000
 8001484:	48000800 	.word	0x48000800
 8001488:	48000c00 	.word	0x48000c00
 800148c:	40013800 	.word	0x40013800

08001490 <userMainInit>:
TaskHandle_t mainTask;

int prechargeFlag = 0;
int ecuSHDReqFlag = 0;

void userMainInit(){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af02      	add	r7, sp, #8

	Can_Init();
 8001496:	f7ff f85f 	bl	8000558 <Can_Init>
	UART_Init();
 800149a:	f7ff fd75 	bl	8000f88 <UART_Init>
//	create_CanTask();
	xTaskCreate(userMain, "UserMainThread", 64, NULL, 20, &mainTask);
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <userMainInit+0x28>)
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2314      	movs	r3, #20
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	2240      	movs	r2, #64	; 0x40
 80014aa:	4904      	ldr	r1, [pc, #16]	; (80014bc <userMainInit+0x2c>)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <userMainInit+0x30>)
 80014ae:	f006 fa76 	bl	800799e <xTaskCreate>
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20001c40 	.word	0x20001c40
 80014bc:	08009b10 	.word	0x08009b10
 80014c0:	080014c5 	.word	0x080014c5

080014c4 <userMain>:


int userMain(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
//	masterInit();
//	InitPL455();
//	vTaskDelay(pdMS_TO_TICKS(1000));
//	shutDownSlavesCommand();

char* desavanje="desio se prijem\n";
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <userMain+0x58>)
 80014cc:	617b      	str	r3, [r7, #20]
char* posle="posle ifa\n";
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <userMain+0x5c>)
 80014d0:	613b      	str	r3, [r7, #16]



//		if(flagovi==1){
			char* tmp;
			tmp=UART_BlockReceiveString(5);
 80014d2:	2005      	movs	r0, #5
 80014d4:	f7ff fe1e 	bl	8001114 <UART_BlockReceiveString>
 80014d8:	60f8      	str	r0, [r7, #12]
			UART_AsyncTransmitString(5, tmp);
 80014da:	68f9      	ldr	r1, [r7, #12]
 80014dc:	2005      	movs	r0, #5
 80014de:	f7ff fddd 	bl	800109c <UART_AsyncTransmitString>
			dealokacijaMemorije(tmp);
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff fe92 	bl	800120c <dealokacijaMemorije>
			UART_AsyncTransmitString(5, desavanje);
 80014e8:	6979      	ldr	r1, [r7, #20]
 80014ea:	2005      	movs	r0, #5
 80014ec:	f7ff fdd6 	bl	800109c <UART_AsyncTransmitString>
//			flagovi=0;
//
//		}else{

		vTaskDelay(pdMS_TO_TICKS(500));
 80014f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f4:	f006 fb98 	bl	8007c28 <vTaskDelay>
		UART_AsyncTransmitString(5, posle);
 80014f8:	6939      	ldr	r1, [r7, #16]
 80014fa:	2005      	movs	r0, #5
 80014fc:	f7ff fdce 	bl	800109c <UART_AsyncTransmitString>
//		UART_AsyncTransmitString(5, "master\n");
//		UART_AsyncTransmitString(5, "du\n");
//		UART_AsyncTransmitString(5, "dc\n");
//		uint8_t niz[8]={0,1,0,1,0,1,0,1};
//		canSend(1, niz);
		vTaskDelay(pdMS_TO_TICKS(1000));
 8001500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001504:	f006 fb90 	bl	8007c28 <vTaskDelay>
		uint8_t rxData[8] = {0};
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]

		canSend(0x10, rxData);
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	2010      	movs	r0, #16
 8001516:	f7ff f847 	bl	80005a8 <canSend>
	while(1){
 800151a:	e7da      	b.n	80014d2 <userMain+0xe>
 800151c:	08009b20 	.word	0x08009b20
 8001520:	08009b34 	.word	0x08009b34

08001524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800155c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff fb30 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f008 fa83 	bl	8009a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001556:	f7ff f9cf 	bl	80008f8 <main>

0800155a <LoopForever>:

LoopForever:
    b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800155c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001568:	08009bd4 	.word	0x08009bd4
  ldr r2, =_sbss
 800156c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001570:	20001c88 	.word	0x20001c88

08001574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_2_IRQHandler>

08001576 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 ff4e 	bl	8002422 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	200f      	movs	r0, #15
 8001588:	f7ff fa58 	bl	8000a3c <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	e001      	b.n	800159c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001598:	f7ff fa28 	bl	80009ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800159c:	79fb      	ldrb	r3, [r7, #7]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20001c44 	.word	0x20001c44

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20001c44 	.word	0x20001c44

080015e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0ed      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff f872 	bl	80006f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161c:	f7ff ffd8 	bl	80015d0 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001622:	e012      	b.n	800164a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001624:	f7ff ffd4 	bl	80015d0 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d90b      	bls.n	800164a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2205      	movs	r2, #5
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0c5      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0e5      	beq.n	8001624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0202 	bic.w	r2, r2, #2
 8001666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001668:	f7ff ffb2 	bl	80015d0 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800166e:	e012      	b.n	8001696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001670:	f7ff ffae 	bl	80015d0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d90b      	bls.n	8001696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2205      	movs	r2, #5
 800168e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e09f      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1e5      	bne.n	8001670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e1b      	ldrb	r3, [r3, #24]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e007      	b.n	80016ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e5b      	ldrb	r3, [r3, #25]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e9b      	ldrb	r3, [r3, #26]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0220 	orr.w	r2, r2, #32
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0220 	bic.w	r2, r2, #32
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7edb      	ldrb	r3, [r3, #27]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0210 	bic.w	r2, r2, #16
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0210 	orr.w	r2, r2, #16
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7f1b      	ldrb	r3, [r3, #28]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0208 	orr.w	r2, r2, #8
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0208 	bic.w	r2, r2, #8
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7f5b      	ldrb	r3, [r3, #29]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0204 	orr.w	r2, r2, #4
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	ea42 0103 	orr.w	r1, r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	1e5a      	subs	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017de:	b480      	push	{r7}
 80017e0:	b087      	sub	sp, #28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017f6:	7cfb      	ldrb	r3, [r7, #19]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d003      	beq.n	8001804 <HAL_CAN_ConfigFilter+0x26>
 80017fc:	7cfb      	ldrb	r3, [r7, #19]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	f040 80aa 	bne.w	8001958 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800180a:	f043 0201 	orr.w	r2, r3, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d123      	bne.n	8001886 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	401a      	ands	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001860:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3248      	adds	r2, #72	; 0x48
 8001866:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800187a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	3348      	adds	r3, #72	; 0x48
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d122      	bne.n	80018d4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	431a      	orrs	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3248      	adds	r2, #72	; 0x48
 80018b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ca:	6979      	ldr	r1, [r7, #20]
 80018cc:	3348      	adds	r3, #72	; 0x48
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018ee:	e007      	b.n	8001900 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800191a:	e007      	b.n	800192c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800194a:	f023 0201 	bic.w	r2, r3, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e006      	b.n	8001966 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
  }
}
 8001966:	4618      	mov	r0, r3
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d12e      	bne.n	80019e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800199e:	f7ff fe17 	bl	80015d0 <HAL_GetTick>
 80019a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019a4:	e012      	b.n	80019cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a6:	f7ff fe13 	bl	80015d0 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b0a      	cmp	r3, #10
 80019b2:	d90b      	bls.n	80019cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2205      	movs	r2, #5
 80019c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e012      	b.n	80019f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1e5      	bne.n	80019a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e006      	b.n	80019f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
  }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b089      	sub	sp, #36	; 0x24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d003      	beq.n	8001a26 <HAL_CAN_AddTxMessage+0x2c>
 8001a1e:	7ffb      	ldrb	r3, [r7, #31]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	f040 80b8 	bne.w	8001b96 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80a0 	beq.w	8001b86 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	0e1b      	lsrs	r3, r3, #24
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d907      	bls.n	8001a66 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e09e      	b.n	8001ba4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a66:	2201      	movs	r2, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10d      	bne.n	8001a94 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a82:	68f9      	ldr	r1, [r7, #12]
 8001a84:	6809      	ldr	r1, [r1, #0]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3318      	adds	r3, #24
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	440b      	add	r3, r1
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e00f      	b.n	8001ab4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a9e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001aa8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3318      	adds	r3, #24
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	440b      	add	r3, r1
 8001ab2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3318      	adds	r3, #24
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	7d1b      	ldrb	r3, [r3, #20]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d111      	bne.n	8001af4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3318      	adds	r3, #24
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4413      	add	r3, r2
 8001adc:	3304      	adds	r3, #4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	6811      	ldr	r1, [r2, #0]
 8001ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3318      	adds	r3, #24
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	440b      	add	r3, r1
 8001af0:	3304      	adds	r3, #4
 8001af2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3307      	adds	r3, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	061a      	lsls	r2, r3, #24
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3306      	adds	r3, #6
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	041b      	lsls	r3, r3, #16
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3305      	adds	r3, #5
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	3204      	adds	r2, #4
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	4610      	mov	r0, r2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	6811      	ldr	r1, [r2, #0]
 8001b1c:	ea43 0200 	orr.w	r2, r3, r0
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	440b      	add	r3, r1
 8001b26:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3303      	adds	r3, #3
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	061a      	lsls	r2, r3, #24
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3302      	adds	r3, #2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3301      	adds	r3, #1
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	4313      	orrs	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	7812      	ldrb	r2, [r2, #0]
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	6811      	ldr	r1, [r2, #0]
 8001b52:	ea43 0200 	orr.w	r2, r3, r0
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3318      	adds	r3, #24
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	4413      	add	r3, r2
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	6811      	ldr	r1, [r2, #0]
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	440b      	add	r3, r1
 8001b80:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e00e      	b.n	8001ba4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e006      	b.n	8001ba4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3724      	adds	r7, #36	; 0x24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d002      	beq.n	8001bd2 <HAL_CAN_IsTxMessagePending+0x22>
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d10b      	bne.n	8001bea <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	069b      	lsls	r3, r3, #26
 8001bdc:	401a      	ands	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	069b      	lsls	r3, r3, #26
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d001      	beq.n	8001bea <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001be6:	2301      	movs	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c0c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d003      	beq.n	8001c1c <HAL_CAN_GetRxMessage+0x24>
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f040 80f3 	bne.w	8001e02 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10e      	bne.n	8001c40 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d116      	bne.n	8001c5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0e7      	b.n	8001e10 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d107      	bne.n	8001c5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0d8      	b.n	8001e10 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	331b      	adds	r3, #27
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0204 	and.w	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10c      	bne.n	8001c96 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	331b      	adds	r3, #27
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4413      	add	r3, r2
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	0d5b      	lsrs	r3, r3, #21
 8001c8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e00b      	b.n	8001cae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	331b      	adds	r3, #27
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	331b      	adds	r3, #27
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0202 	and.w	r2, r3, #2
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	331b      	adds	r3, #27
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 020f 	and.w	r2, r3, #15
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	331b      	adds	r3, #27
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	331b      	adds	r3, #27
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0a1a      	lsrs	r2, r3, #8
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0c1a      	lsrs	r2, r3, #16
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3302      	adds	r3, #2
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0e1a      	lsrs	r2, r3, #24
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3303      	adds	r3, #3
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	3304      	adds	r3, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0a1a      	lsrs	r2, r3, #8
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	3305      	adds	r3, #5
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0c1a      	lsrs	r2, r3, #16
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3306      	adds	r3, #6
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0e1a      	lsrs	r2, r3, #24
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3307      	adds	r3, #7
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d108      	bne.n	8001dee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	e007      	b.n	8001dfe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0220 	orr.w	r2, r2, #32
 8001dfc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e006      	b.n	8001e10 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d002      	beq.n	8001e3a <HAL_CAN_ActivateNotification+0x1e>
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d109      	bne.n	8001e4e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6959      	ldr	r1, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e006      	b.n	8001e5c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
  }
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d07c      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d023      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f983 	bl	80021d6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ed0:	e016      	b.n	8001f00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	e00c      	b.n	8001f00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	e002      	b.n	8001f00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f989 	bl	8002212 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d024      	beq.n	8001f54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f963 	bl	80021ea <HAL_CAN_TxMailbox1CompleteCallback>
 8001f24:	e016      	b.n	8001f54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	e00c      	b.n	8001f54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	e002      	b.n	8001f54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f969 	bl	8002226 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d024      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f943 	bl	80021fe <HAL_CAN_TxMailbox2CompleteCallback>
 8001f78:	e016      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8c:	e00c      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	e002      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f949 	bl	800223a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f930 	bl	800224e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d009      	beq.n	800200c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fa66 	bl	80004d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002026:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2210      	movs	r2, #16
 800202e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2208      	movs	r2, #8
 800204a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f912 	bl	8002276 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8f9 	bl	8002262 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8fc 	bl	800228a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8f5 	bl	800229e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d07b      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d072      	beq.n	80021ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002122:	2b00      	cmp	r3, #0
 8002124:	d043      	beq.n	80021ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800212c:	2b00      	cmp	r3, #0
 800212e:	d03e      	beq.n	80021ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002136:	2b60      	cmp	r3, #96	; 0x60
 8002138:	d02b      	beq.n	8002192 <HAL_CAN_IRQHandler+0x32a>
 800213a:	2b60      	cmp	r3, #96	; 0x60
 800213c:	d82e      	bhi.n	800219c <HAL_CAN_IRQHandler+0x334>
 800213e:	2b50      	cmp	r3, #80	; 0x50
 8002140:	d022      	beq.n	8002188 <HAL_CAN_IRQHandler+0x320>
 8002142:	2b50      	cmp	r3, #80	; 0x50
 8002144:	d82a      	bhi.n	800219c <HAL_CAN_IRQHandler+0x334>
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d019      	beq.n	800217e <HAL_CAN_IRQHandler+0x316>
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d826      	bhi.n	800219c <HAL_CAN_IRQHandler+0x334>
 800214e:	2b30      	cmp	r3, #48	; 0x30
 8002150:	d010      	beq.n	8002174 <HAL_CAN_IRQHandler+0x30c>
 8002152:	2b30      	cmp	r3, #48	; 0x30
 8002154:	d822      	bhi.n	800219c <HAL_CAN_IRQHandler+0x334>
 8002156:	2b10      	cmp	r3, #16
 8002158:	d002      	beq.n	8002160 <HAL_CAN_IRQHandler+0x2f8>
 800215a:	2b20      	cmp	r3, #32
 800215c:	d005      	beq.n	800216a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800215e:	e01d      	b.n	800219c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002168:	e019      	b.n	800219e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	f043 0310 	orr.w	r3, r3, #16
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002172:	e014      	b.n	800219e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	f043 0320 	orr.w	r3, r3, #32
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800217c:	e00f      	b.n	800219e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002186:	e00a      	b.n	800219e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002190:	e005      	b.n	800219e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800219a:	e000      	b.n	800219e <HAL_CAN_IRQHandler+0x336>
            break;
 800219c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2204      	movs	r2, #4
 80021b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f872 	bl	80022b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff4c 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244a:	f7ff ff61 	bl	8002310 <__NVIC_GetPriorityGrouping>
 800244e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	6978      	ldr	r0, [r7, #20]
 8002456:	f7ff ffb1 	bl	80023bc <NVIC_EncodePriority>
 800245a:	4602      	mov	r2, r0
 800245c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff80 	bl	8002368 <__NVIC_SetPriority>
}
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ff54 	bl	800232c <__NVIC_EnableIRQ>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d008      	beq.n	80024b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2204      	movs	r2, #4
 80024a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e022      	b.n	80024fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 020e 	bic.w	r2, r2, #14
 80024c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f003 021c 	and.w	r2, r3, #28
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f202 	lsl.w	r2, r1, r2
 80024e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d005      	beq.n	800252c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2204      	movs	r2, #4
 8002524:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e029      	b.n	8002580 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 020e 	bic.w	r2, r2, #14
 800253a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	f003 021c 	and.w	r2, r3, #28
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f202 	lsl.w	r2, r1, r2
 800255e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
    }
  }
  return status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259a:	e17f      	b.n	800289c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8171 	beq.w	8002896 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d005      	beq.n	80025cc <HAL_GPIO_Init+0x40>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d130      	bne.n	800262e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002602:	2201      	movs	r2, #1
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 0201 	and.w	r2, r3, #1
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b03      	cmp	r3, #3
 8002638:	d118      	bne.n	800266c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002640:	2201      	movs	r2, #1
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	08db      	lsrs	r3, r3, #3
 8002656:	f003 0201 	and.w	r2, r3, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b03      	cmp	r3, #3
 8002676:	d017      	beq.n	80026a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d123      	bne.n	80026fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	6939      	ldr	r1, [r7, #16]
 80026f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0203 	and.w	r2, r3, #3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80ac 	beq.w	8002896 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	4b5f      	ldr	r3, [pc, #380]	; (80028bc <HAL_GPIO_Init+0x330>)
 8002740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002742:	4a5e      	ldr	r2, [pc, #376]	; (80028bc <HAL_GPIO_Init+0x330>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6613      	str	r3, [r2, #96]	; 0x60
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_GPIO_Init+0x330>)
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002756:	4a5a      	ldr	r2, [pc, #360]	; (80028c0 <HAL_GPIO_Init+0x334>)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3302      	adds	r3, #2
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002780:	d025      	beq.n	80027ce <HAL_GPIO_Init+0x242>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4f      	ldr	r2, [pc, #316]	; (80028c4 <HAL_GPIO_Init+0x338>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01f      	beq.n	80027ca <HAL_GPIO_Init+0x23e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4e      	ldr	r2, [pc, #312]	; (80028c8 <HAL_GPIO_Init+0x33c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d019      	beq.n	80027c6 <HAL_GPIO_Init+0x23a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4d      	ldr	r2, [pc, #308]	; (80028cc <HAL_GPIO_Init+0x340>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0x236>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <HAL_GPIO_Init+0x344>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00d      	beq.n	80027be <HAL_GPIO_Init+0x232>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4b      	ldr	r2, [pc, #300]	; (80028d4 <HAL_GPIO_Init+0x348>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <HAL_GPIO_Init+0x22e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4a      	ldr	r2, [pc, #296]	; (80028d8 <HAL_GPIO_Init+0x34c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_GPIO_Init+0x22a>
 80027b2:	2306      	movs	r3, #6
 80027b4:	e00c      	b.n	80027d0 <HAL_GPIO_Init+0x244>
 80027b6:	2307      	movs	r3, #7
 80027b8:	e00a      	b.n	80027d0 <HAL_GPIO_Init+0x244>
 80027ba:	2305      	movs	r3, #5
 80027bc:	e008      	b.n	80027d0 <HAL_GPIO_Init+0x244>
 80027be:	2304      	movs	r3, #4
 80027c0:	e006      	b.n	80027d0 <HAL_GPIO_Init+0x244>
 80027c2:	2303      	movs	r3, #3
 80027c4:	e004      	b.n	80027d0 <HAL_GPIO_Init+0x244>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e002      	b.n	80027d0 <HAL_GPIO_Init+0x244>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_GPIO_Init+0x244>
 80027ce:	2300      	movs	r3, #0
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	f002 0203 	and.w	r2, r2, #3
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	4093      	lsls	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027e0:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_GPIO_Init+0x334>)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	3302      	adds	r3, #2
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_GPIO_Init+0x350>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002812:	4a32      	ldr	r2, [pc, #200]	; (80028dc <HAL_GPIO_Init+0x350>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002818:	4b30      	ldr	r3, [pc, #192]	; (80028dc <HAL_GPIO_Init+0x350>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800283c:	4a27      	ldr	r2, [pc, #156]	; (80028dc <HAL_GPIO_Init+0x350>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <HAL_GPIO_Init+0x350>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002866:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_GPIO_Init+0x350>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_GPIO_Init+0x350>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_GPIO_Init+0x350>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3301      	adds	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa22 f303 	lsr.w	r3, r2, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f47f ae78 	bne.w	800259c <HAL_GPIO_Init+0x10>
  }
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010000 	.word	0x40010000
 80028c4:	48000400 	.word	0x48000400
 80028c8:	48000800 	.word	0x48000800
 80028cc:	48000c00 	.word	0x48000c00
 80028d0:	48001000 	.word	0x48001000
 80028d4:	48001400 	.word	0x48001400
 80028d8:	48001800 	.word	0x48001800
 80028dc:	40010400 	.word	0x40010400

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_PWREx_GetVoltageRange+0x18>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40007000 	.word	0x40007000

0800292c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293a:	d130      	bne.n	800299e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002948:	d038      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2232      	movs	r2, #50	; 0x32
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0c9b      	lsrs	r3, r3, #18
 800296c:	3301      	adds	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002970:	e002      	b.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d102      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f2      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d110      	bne.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e00f      	b.n	80029be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029aa:	d007      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40007000 	.word	0x40007000
 80029d0:	20000000 	.word	0x20000000
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e3d4      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ea:	4ba1      	ldr	r3, [pc, #644]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f4:	4b9e      	ldr	r3, [pc, #632]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80e4 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4a>
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	f040 808b 	bne.w	8002b30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 8087 	bne.w	8002b30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a22:	4b93      	ldr	r3, [pc, #588]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x62>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e3ac      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	4b8c      	ldr	r3, [pc, #560]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_RCC_OscConfig+0x7c>
 8002a4a:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_OscConfig+0x88>
 8002a54:	4b86      	ldr	r3, [pc, #536]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d223      	bcs.n	8002aac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fd73 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e38d      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a78:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4977      	ldr	r1, [pc, #476]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a96:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4972      	ldr	r1, [pc, #456]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
 8002aaa:	e025      	b.n	8002af8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aac:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6f      	ldr	r2, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	496a      	ldr	r1, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aca:	4b69      	ldr	r3, [pc, #420]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	4965      	ldr	r1, [pc, #404]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fd33 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e34d      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af8:	f000 fc36 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	495a      	ldr	r1, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x29c>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
 8002b14:	4a58      	ldr	r2, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x2a0>)
 8002b16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b18:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <HAL_RCC_OscConfig+0x2a4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd ff8d 	bl	8000a3c <HAL_InitTick>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d052      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	e331      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d032      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b38:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a4c      	ldr	r2, [pc, #304]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fd44 	bl	80015d0 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fd40 	bl	80015d0 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e31a      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5e:	4b44      	ldr	r3, [pc, #272]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a40      	ldr	r2, [pc, #256]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	493b      	ldr	r1, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	4936      	ldr	r1, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
 8002b9c:	e01a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a33      	ldr	r2, [pc, #204]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fd11 	bl	80015d0 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb2:	f7fe fd0d 	bl	80015d0 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e2e7      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x1da>
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d074      	beq.n	8002cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x21a>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d10e      	bne.n	8002c0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d064      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d160      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e2c4      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x24a>
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e01d      	b.n	8002c5e <HAL_RCC_OscConfig+0x286>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x26e>
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x286>
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x298>)
 8002c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe fcb3 	bl	80015d0 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6c:	e011      	b.n	8002c92 <HAL_RCC_OscConfig+0x2ba>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08009b7c 	.word	0x08009b7c
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fca6 	bl	80015d0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e280      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	4baf      	ldr	r3, [pc, #700]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x2a8>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fc96 	bl	80015d0 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fc92 	bl	80015d0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e26c      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cba:	4ba5      	ldr	r3, [pc, #660]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2d0>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d060      	beq.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x310>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d119      	bne.n	8002d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d116      	bne.n	8002d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce8:	4b99      	ldr	r3, [pc, #612]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x328>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e249      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b93      	ldr	r3, [pc, #588]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	4990      	ldr	r1, [pc, #576]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d14:	e040      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d023      	beq.n	8002d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1e:	4b8c      	ldr	r3, [pc, #560]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a8b      	ldr	r2, [pc, #556]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fc51 	bl	80015d0 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fe fc4d 	bl	80015d0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e227      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b7f      	ldr	r3, [pc, #508]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	497c      	ldr	r1, [pc, #496]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e018      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d66:	4b7a      	ldr	r3, [pc, #488]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a79      	ldr	r2, [pc, #484]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe fc2d 	bl	80015d0 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fc29 	bl	80015d0 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e203      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d8c:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	4a67      	ldr	r2, [pc, #412]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fc08 	bl	80015d0 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fc04 	bl	80015d0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1de      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd6:	4b5e      	ldr	r3, [pc, #376]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ef      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x3ec>
 8002de4:	e01b      	b.n	8002e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b5a      	ldr	r3, [pc, #360]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe fbeb 	bl	80015d0 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fbe7 	bl	80015d0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1c1      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e10:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ef      	bne.n	8002dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80a6 	beq.w	8002f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e30:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	4a43      	ldr	r2, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6593      	str	r3, [r2, #88]	; 0x58
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e54:	2301      	movs	r3, #1
 8002e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	4b3e      	ldr	r3, [pc, #248]	; (8002f54 <HAL_RCC_OscConfig+0x57c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d118      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e64:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_OscConfig+0x57c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x57c>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e70:	f7fe fbae 	bl	80015d0 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7fe fbaa 	bl	80015d0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e184      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8a:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_RCC_OscConfig+0x57c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4d8>
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eae:	e024      	b.n	8002efa <HAL_RCC_OscConfig+0x522>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d110      	bne.n	8002eda <HAL_RCC_OscConfig+0x502>
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	4a24      	ldr	r2, [pc, #144]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed8:	e00f      	b.n	8002efa <HAL_RCC_OscConfig+0x522>
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eea:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe fb65 	bl	80015d0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fb61 	bl	80015d0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e139      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ed      	beq.n	8002f0a <HAL_RCC_OscConfig+0x532>
 8002f2e:	e01a      	b.n	8002f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe fb4e 	bl	80015d0 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f36:	e00f      	b.n	8002f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe fb4a 	bl	80015d0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d906      	bls.n	8002f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e122      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f58:	4b90      	ldr	r3, [pc, #576]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e8      	bne.n	8002f38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b8b      	ldr	r3, [pc, #556]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	4a8a      	ldr	r2, [pc, #552]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8108 	beq.w	8003192 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	f040 80d0 	bne.w	800312c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f8c:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0203 	and.w	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d130      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	3b01      	subs	r3, #1
 8002fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d127      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d11f      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fcc:	2a07      	cmp	r2, #7
 8002fce:	bf14      	ite	ne
 8002fd0:	2201      	movne	r2, #1
 8002fd2:	2200      	moveq	r2, #0
 8002fd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d113      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d06e      	beq.n	80030e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b0c      	cmp	r3, #12
 8003006:	d069      	beq.n	80030dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003008:	4b64      	ldr	r3, [pc, #400]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003014:	4b61      	ldr	r3, [pc, #388]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b7      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003024:	4b5d      	ldr	r3, [pc, #372]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a5c      	ldr	r2, [pc, #368]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800302a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003030:	f7fe face 	bl	80015d0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe faca 	bl	80015d0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0a4      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304a:	4b54      	ldr	r3, [pc, #336]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003056:	4b51      	ldr	r3, [pc, #324]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <HAL_RCC_OscConfig+0x7c8>)
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003066:	3a01      	subs	r2, #1
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	4311      	orrs	r1, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003070:	0212      	lsls	r2, r2, #8
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003078:	0852      	lsrs	r2, r2, #1
 800307a:	3a01      	subs	r2, #1
 800307c:	0552      	lsls	r2, r2, #21
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003084:	0852      	lsrs	r2, r2, #1
 8003086:	3a01      	subs	r2, #1
 8003088:	0652      	lsls	r2, r2, #25
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003090:	0912      	lsrs	r2, r2, #4
 8003092:	0452      	lsls	r2, r2, #17
 8003094:	430a      	orrs	r2, r1
 8003096:	4941      	ldr	r1, [pc, #260]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800309c:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3e      	ldr	r2, [pc, #248]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a8:	4b3c      	ldr	r3, [pc, #240]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a3b      	ldr	r2, [pc, #236]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b4:	f7fe fa8c 	bl	80015d0 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe fa88 	bl	80015d0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e062      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030da:	e05a      	b.n	8003192 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e059      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d152      	bne.n	8003192 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030ec:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003102:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003104:	f7fe fa64 	bl	80015d0 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fa60 	bl	80015d0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e03a      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x734>
 800312a:	e032      	b.n	8003192 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d02d      	beq.n	800318e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a19      	ldr	r2, [pc, #100]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003150:	f023 0303 	bic.w	r3, r3, #3
 8003154:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4a10      	ldr	r2, [pc, #64]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 800315c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe fa33 	bl	80015d0 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe fa2f 	bl	80015d0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e009      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x7c4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0x796>
 800318c:	e001      	b.n	8003192 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	f99d808c 	.word	0xf99d808c

080031a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0c8      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4961      	ldr	r1, [pc, #388]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b5f      	ldr	r3, [pc, #380]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b0      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d04c      	beq.n	800328e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d107      	bne.n	800320c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d121      	bne.n	800324c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e09e      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d115      	bne.n	800324c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e092      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e086      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323c:	4b46      	ldr	r3, [pc, #280]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e07e      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324c:	4b42      	ldr	r3, [pc, #264]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	493f      	ldr	r1, [pc, #252]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325e:	f7fe f9b7 	bl	80015d0 <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003264:	e00a      	b.n	800327c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003266:	f7fe f9b3 	bl	80015d0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e066      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 020c 	and.w	r2, r3, #12
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	429a      	cmp	r2, r3
 800328c:	d1eb      	bne.n	8003266 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329a:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	492c      	ldr	r1, [pc, #176]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d210      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 0207 	bic.w	r2, r3, #7
 80032c2:	4924      	ldr	r1, [pc, #144]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_ClockConfig+0x1b0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e036      	b.n	800334a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4918      	ldr	r1, [pc, #96]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4910      	ldr	r1, [pc, #64]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331a:	f000 f825 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490c      	ldr	r1, [pc, #48]	; (800335c <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fb7c 	bl	8000a3c <HAL_InitTick>
 8003344:	4603      	mov	r3, r0
 8003346:	72fb      	strb	r3, [r7, #11]

  return status;
 8003348:	7afb      	ldrb	r3, [r7, #11]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40022000 	.word	0x40022000
 8003358:	40021000 	.word	0x40021000
 800335c:	08009b7c 	.word	0x08009b7c
 8003360:	20000000 	.word	0x20000000
 8003364:	20000004 	.word	0x20000004

08003368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x34>
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d121      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d11e      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033a8:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033c4:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10d      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_GetSysClockFreq+0x110>)
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e004      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_RCC_GetSysClockFreq+0x114>)
 80033ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d134      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0xa6>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d003      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0xac>
 800340c:	e005      	b.n	800341a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_GetSysClockFreq+0x110>)
 8003410:	617b      	str	r3, [r7, #20]
      break;
 8003412:	e005      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_GetSysClockFreq+0x114>)
 8003416:	617b      	str	r3, [r7, #20]
      break;
 8003418:	e002      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	617b      	str	r3, [r7, #20]
      break;
 800341e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	3301      	adds	r3, #1
 800342c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	fb02 f203 	mul.w	r2, r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_GetSysClockFreq+0x108>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	0e5b      	lsrs	r3, r3, #25
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	3301      	adds	r3, #1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003460:	69bb      	ldr	r3, [r7, #24]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	08009b94 	.word	0x08009b94
 8003478:	00f42400 	.word	0x00f42400
 800347c:	007a1200 	.word	0x007a1200

08003480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800349c:	f7ff fff0 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08009b8c 	.word	0x08009b8c

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034c8:	f7ff ffda 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0adb      	lsrs	r3, r3, #11
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4904      	ldr	r1, [pc, #16]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	08009b8c 	.word	0x08009b8c

080034f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	220f      	movs	r2, #15
 80034fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_RCC_GetClockConfig+0x60>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0207 	and.w	r2, r3, #7
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	40022000 	.word	0x40022000

08003554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003560:	4b2a      	ldr	r3, [pc, #168]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800356c:	f7ff f9d0 	bl	8002910 <HAL_PWREx_GetVoltageRange>
 8003570:	6178      	str	r0, [r7, #20]
 8003572:	e014      	b.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff f9c0 	bl	8002910 <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d10b      	bne.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d919      	bls.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2ba0      	cmp	r3, #160	; 0xa0
 80035b0:	d902      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035b2:	2302      	movs	r3, #2
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e013      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b8:	2301      	movs	r3, #1
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e010      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d902      	bls.n	80035ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035c4:	2303      	movs	r3, #3
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e00a      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d102      	bne.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d0:	2302      	movs	r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e004      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d101      	bne.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 0207 	bic.w	r2, r3, #7
 80035e8:	4909      	ldr	r1, [pc, #36]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	40022000 	.word	0x40022000

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800361c:	2300      	movs	r3, #0
 800361e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003620:	2300      	movs	r3, #0
 8003622:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362c:	2b00      	cmp	r3, #0
 800362e:	d041      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003634:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003638:	d02a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800363a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800363e:	d824      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800364a:	d81e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003654:	d010      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003656:	e018      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003658:	4b86      	ldr	r3, [pc, #536]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a85      	ldr	r2, [pc, #532]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003664:	e015      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fabb 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3320      	adds	r3, #32
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fba6 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	74fb      	strb	r3, [r7, #19]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003698:	4b76      	ldr	r3, [pc, #472]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a6:	4973      	ldr	r1, [pc, #460]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d041      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036c8:	d02a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ce:	d824      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d4:	d008      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036da:	d81e      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036e6:	e018      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e8:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a61      	ldr	r2, [pc, #388]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f4:	e015      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fa73 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3320      	adds	r3, #32
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb5e 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	74fb      	strb	r3, [r7, #19]
      break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003728:	4b52      	ldr	r3, [pc, #328]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003736:	494f      	ldr	r1, [pc, #316]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800373e:	e001      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a0 	beq.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4a40      	ldr	r2, [pc, #256]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003784:	2301      	movs	r3, #1
 8003786:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3a      	ldr	r2, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003794:	f7fd ff1c 	bl	80015d0 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fd ff18 	bl	80015d0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	74fb      	strb	r3, [r7, #19]
        break;
 80037ae:	e005      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b0:	4b31      	ldr	r3, [pc, #196]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ef      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d15c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01f      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d019      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd fed7 	bl	80015d0 <HAL_GetTick>
 8003822:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003824:	e00b      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fd fed3 	bl	80015d0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d902      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	74fb      	strb	r3, [r7, #19]
            break;
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ec      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800386a:	e009      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003880:	7c7b      	ldrb	r3, [r7, #17]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b9e      	ldr	r3, [pc, #632]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	4a9d      	ldr	r2, [pc, #628]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389e:	4b98      	ldr	r3, [pc, #608]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	4994      	ldr	r1, [pc, #592]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c0:	4b8f      	ldr	r3, [pc, #572]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 020c 	bic.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	498c      	ldr	r1, [pc, #560]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e2:	4b87      	ldr	r3, [pc, #540]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4983      	ldr	r1, [pc, #524]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003904:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	497b      	ldr	r1, [pc, #492]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	4972      	ldr	r1, [pc, #456]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003948:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	496a      	ldr	r1, [pc, #424]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	4961      	ldr	r1, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800398c:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	4959      	ldr	r1, [pc, #356]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ae:	4b54      	ldr	r3, [pc, #336]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	4950      	ldr	r1, [pc, #320]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d0:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	4948      	ldr	r1, [pc, #288]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f2:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	493f      	ldr	r1, [pc, #252]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d028      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a22:	4937      	ldr	r1, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
 8003a40:	e011      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f8c8 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	491f      	ldr	r1, [pc, #124]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9c:	60d3      	str	r3, [r2, #12]
 8003a9e:	e011      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f899 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aee:	d109      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a02      	ldr	r2, [pc, #8]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
 8003afc:	e014      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f867 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02f      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b42:	4928      	ldr	r1, [pc, #160]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d10d      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f844 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d014      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f925 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bae:	490d      	ldr	r1, [pc, #52]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bda:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000

08003be8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bf6:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c02:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0203 	and.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d10d      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
       ||
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c1a:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
       ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d047      	beq.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e044      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d018      	beq.n	8003c6e <RCCEx_PLLSAI1_Config+0x86>
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d825      	bhi.n	8003c8c <RCCEx_PLLSAI1_Config+0xa4>
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d002      	beq.n	8003c4a <RCCEx_PLLSAI1_Config+0x62>
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d009      	beq.n	8003c5c <RCCEx_PLLSAI1_Config+0x74>
 8003c48:	e020      	b.n	8003c8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c4a:	4b60      	ldr	r3, [pc, #384]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11d      	bne.n	8003c92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5a:	e01a      	b.n	8003c92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c5c:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d116      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6c:	e013      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c6e:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c7a:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c8a:	e006      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c90:	e004      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ca2:	4b4a      	ldr	r3, [pc, #296]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	4944      	ldr	r1, [pc, #272]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d17d      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fd fc7e 	bl	80015d0 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd8:	f7fd fc7a 	bl	80015d0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cec:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ef      	bne.n	8003cd8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d160      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d111      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d04:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	0211      	lsls	r1, r2, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68d2      	ldr	r2, [r2, #12]
 8003d1a:	0912      	lsrs	r2, r2, #4
 8003d1c:	0452      	lsls	r2, r2, #17
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	492a      	ldr	r1, [pc, #168]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	610b      	str	r3, [r1, #16]
 8003d26:	e027      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d112      	bne.n	8003d54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	0211      	lsls	r1, r2, #8
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6912      	ldr	r2, [r2, #16]
 8003d44:	0852      	lsrs	r2, r2, #1
 8003d46:	3a01      	subs	r2, #1
 8003d48:	0552      	lsls	r2, r2, #21
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	491f      	ldr	r1, [pc, #124]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	610b      	str	r3, [r1, #16]
 8003d52:	e011      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	0211      	lsls	r1, r2, #8
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6952      	ldr	r2, [r2, #20]
 8003d6a:	0852      	lsrs	r2, r2, #1
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	0652      	lsls	r2, r2, #25
 8003d70:	430a      	orrs	r2, r1
 8003d72:	4916      	ldr	r1, [pc, #88]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d78:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd fc24 	bl	80015d0 <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d8a:	e009      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8c:	f7fd fc20 	bl	80015d0 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d902      	bls.n	8003da0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d9e:	e005      	b.n	8003dac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	4904      	ldr	r1, [pc, #16]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dde:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dea:	4b67      	ldr	r3, [pc, #412]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0203 	and.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d10d      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
       ||
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e02:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
       ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d047      	beq.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	e044      	b.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d018      	beq.n	8003e56 <RCCEx_PLLSAI2_Config+0x86>
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d825      	bhi.n	8003e74 <RCCEx_PLLSAI2_Config+0xa4>
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d002      	beq.n	8003e32 <RCCEx_PLLSAI2_Config+0x62>
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d009      	beq.n	8003e44 <RCCEx_PLLSAI2_Config+0x74>
 8003e30:	e020      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e32:	4b55      	ldr	r3, [pc, #340]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11d      	bne.n	8003e7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e42:	e01a      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d116      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e54:	e013      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e56:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e62:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e72:	e006      	b.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e004      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e002      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e000      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10d      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6819      	ldr	r1, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	4939      	ldr	r1, [pc, #228]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d167      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fd fb8a 	bl	80015d0 <HAL_GetTick>
 8003ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ebe:	e009      	b.n	8003ed4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ec0:	f7fd fb86 	bl	80015d0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d902      	bls.n	8003ed4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ed2:	e005      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ef      	bne.n	8003ec0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d14a      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d111      	bne.n	8003f10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eec:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6892      	ldr	r2, [r2, #8]
 8003efc:	0211      	lsls	r1, r2, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68d2      	ldr	r2, [r2, #12]
 8003f02:	0912      	lsrs	r2, r2, #4
 8003f04:	0452      	lsls	r2, r2, #17
 8003f06:	430a      	orrs	r2, r1
 8003f08:	491f      	ldr	r1, [pc, #124]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	614b      	str	r3, [r1, #20]
 8003f0e:	e011      	b.n	8003f34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6892      	ldr	r2, [r2, #8]
 8003f20:	0211      	lsls	r1, r2, #8
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6912      	ldr	r2, [r2, #16]
 8003f26:	0852      	lsrs	r2, r2, #1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0652      	lsls	r2, r2, #25
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	4916      	ldr	r1, [pc, #88]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fd fb46 	bl	80015d0 <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f48:	f7fd fb42 	bl	80015d0 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
          break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ef      	beq.n	8003f48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4904      	ldr	r1, [pc, #16]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e049      	b.n	8004032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fc ff1e 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f000 fc80 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d001      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e04f      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a23      	ldr	r2, [pc, #140]	; (8004100 <HAL_TIM_Base_Start_IT+0xc4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407e:	d018      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_TIM_Base_Start_IT+0xc8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_TIM_Base_Start_IT+0xcc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	; (800410c <HAL_TIM_Base_Start_IT+0xd0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_TIM_Base_Start_IT+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d115      	bne.n	80040de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b17      	ldr	r3, [pc, #92]	; (8004118 <HAL_TIM_Base_Start_IT+0xdc>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d015      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d011      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	e008      	b.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e000      	b.n	80040f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40013400 	.word	0x40013400
 8004114:	40014000 	.word	0x40014000
 8004118:	00010007 	.word	0x00010007

0800411c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e049      	b.n	80041c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fc fe0c 	bl	8000d60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f000 fbb8 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e041      	b.n	8004262 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f839 	bl	800426a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fb60 	bl	80048d0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0208 	bic.w	r2, r2, #8
 800421e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d122      	bne.n	80042da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d11b      	bne.n	80042da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f06f 0202 	mvn.w	r2, #2
 80042aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fc f999 	bl	80005f8 <HAL_TIM_IC_CaptureCallback>
 80042c6:	e005      	b.n	80042d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fae3 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 faea 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d122      	bne.n	800432e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d11b      	bne.n	800432e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0204 	mvn.w	r2, #4
 80042fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fc f96f 	bl	80005f8 <HAL_TIM_IC_CaptureCallback>
 800431a:	e005      	b.n	8004328 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fab9 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fac0 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d122      	bne.n	8004382 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b08      	cmp	r3, #8
 8004348:	d11b      	bne.n	8004382 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f06f 0208 	mvn.w	r2, #8
 8004352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2204      	movs	r2, #4
 8004358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fc f945 	bl	80005f8 <HAL_TIM_IC_CaptureCallback>
 800436e:	e005      	b.n	800437c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa8f 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa96 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b10      	cmp	r3, #16
 800438e:	d122      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b10      	cmp	r3, #16
 800439c:	d11b      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f06f 0210 	mvn.w	r2, #16
 80043a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2208      	movs	r2, #8
 80043ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fc f91b 	bl	80005f8 <HAL_TIM_IC_CaptureCallback>
 80043c2:	e005      	b.n	80043d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fa65 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa6c 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10e      	bne.n	8004402 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d107      	bne.n	8004402 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0201 	mvn.w	r2, #1
 80043fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fadd 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d10e      	bne.n	800442e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b80      	cmp	r3, #128	; 0x80
 800441c:	d107      	bne.n	800442e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fdcf 	bl	8004fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fdc2 	bl	8004fe0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa1a 	bl	80048bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b20      	cmp	r3, #32
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0220 	mvn.w	r2, #32
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fd82 	bl	8004fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_TIM_IC_ConfigChannel+0x1e>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e088      	b.n	80045ec <HAL_TIM_IC_ConfigChannel+0x130>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f000 fb18 	bl	8004b2c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 020c 	bic.w	r2, r2, #12
 800450a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	619a      	str	r2, [r3, #24]
 800451e:	e060      	b.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d11c      	bne.n	8004560 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6819      	ldr	r1, [r3, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f000 fb96 	bl	8004c66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004548:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6999      	ldr	r1, [r3, #24]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	021a      	lsls	r2, r3, #8
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	619a      	str	r2, [r3, #24]
 800455e:	e040      	b.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b08      	cmp	r3, #8
 8004564:	d11b      	bne.n	800459e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f000 fbe3 	bl	8004d40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 020c 	bic.w	r2, r2, #12
 8004588:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]
 800459c:	e021      	b.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	d11c      	bne.n	80045de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6819      	ldr	r1, [r3, #0]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f000 fc00 	bl	8004db8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69d9      	ldr	r1, [r3, #28]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	61da      	str	r2, [r3, #28]
 80045dc:	e001      	b.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_TIM_ConfigClockSource+0x1c>
 800460c:	2302      	movs	r3, #2
 800460e:	e0b6      	b.n	800477e <HAL_TIM_ConfigClockSource+0x18a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464c:	d03e      	beq.n	80046cc <HAL_TIM_ConfigClockSource+0xd8>
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004652:	f200 8087 	bhi.w	8004764 <HAL_TIM_ConfigClockSource+0x170>
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	f000 8086 	beq.w	800476a <HAL_TIM_ConfigClockSource+0x176>
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004662:	d87f      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x170>
 8004664:	2b70      	cmp	r3, #112	; 0x70
 8004666:	d01a      	beq.n	800469e <HAL_TIM_ConfigClockSource+0xaa>
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d87b      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x170>
 800466c:	2b60      	cmp	r3, #96	; 0x60
 800466e:	d050      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x11e>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d877      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x170>
 8004674:	2b50      	cmp	r3, #80	; 0x50
 8004676:	d03c      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0xfe>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d873      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x170>
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d058      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x13e>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d86f      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x170>
 8004684:	2b30      	cmp	r3, #48	; 0x30
 8004686:	d064      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15e>
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d86b      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x170>
 800468c:	2b20      	cmp	r3, #32
 800468e:	d060      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15e>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d867      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x170>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05c      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15e>
 8004698:	2b10      	cmp	r3, #16
 800469a:	d05a      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15e>
 800469c:	e062      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f000 fbdb 	bl	8004e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	609a      	str	r2, [r3, #8]
      break;
 80046ca:	e04f      	b.n	800476c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f000 fbc4 	bl	8004e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ee:	609a      	str	r2, [r3, #8]
      break;
 80046f0:	e03c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6859      	ldr	r1, [r3, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	461a      	mov	r2, r3
 8004700:	f000 fa82 	bl	8004c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2150      	movs	r1, #80	; 0x50
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fb91 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004710:	e02c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	461a      	mov	r2, r3
 8004720:	f000 fade 	bl	8004ce0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2160      	movs	r1, #96	; 0x60
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fb81 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004730:	e01c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	461a      	mov	r2, r3
 8004740:	f000 fa62 	bl	8004c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2140      	movs	r1, #64	; 0x40
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fb71 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004750:	e00c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f000 fb68 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004762:	e003      	b.n	800476c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      break;
 8004768:	e000      	b.n	800476c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800476a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_TIM_SlaveConfigSynchro+0x18>
 800479a:	2302      	movs	r3, #2
 800479c:	e031      	b.n	8004802 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f927 	bl	8004a04 <TIM_SlaveTimer_SetConfig>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d009      	beq.n	80047d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e018      	b.n	8004802 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d831      	bhi.n	8004884 <HAL_TIM_ReadCapturedValue+0x78>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	0800485d 	.word	0x0800485d
 800482c:	08004885 	.word	0x08004885
 8004830:	08004885 	.word	0x08004885
 8004834:	08004885 	.word	0x08004885
 8004838:	08004867 	.word	0x08004867
 800483c:	08004885 	.word	0x08004885
 8004840:	08004885 	.word	0x08004885
 8004844:	08004885 	.word	0x08004885
 8004848:	08004871 	.word	0x08004871
 800484c:	08004885 	.word	0x08004885
 8004850:	08004885 	.word	0x08004885
 8004854:	08004885 	.word	0x08004885
 8004858:	0800487b 	.word	0x0800487b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004862:	60fb      	str	r3, [r7, #12]

      break;
 8004864:	e00f      	b.n	8004886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	60fb      	str	r3, [r7, #12]

      break;
 800486e:	e00a      	b.n	8004886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	60fb      	str	r3, [r7, #12]

      break;
 8004878:	e005      	b.n	8004886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	60fb      	str	r3, [r7, #12]

      break;
 8004882:	e000      	b.n	8004886 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004884:	bf00      	nop
  }

  return tmpreg;
 8004886:	68fb      	ldr	r3, [r7, #12]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a40      	ldr	r2, [pc, #256]	; (80049e4 <TIM_Base_SetConfig+0x114>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d00f      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a3d      	ldr	r2, [pc, #244]	; (80049e8 <TIM_Base_SetConfig+0x118>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a3c      	ldr	r2, [pc, #240]	; (80049ec <TIM_Base_SetConfig+0x11c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a3b      	ldr	r2, [pc, #236]	; (80049f0 <TIM_Base_SetConfig+0x120>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3a      	ldr	r2, [pc, #232]	; (80049f4 <TIM_Base_SetConfig+0x124>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d108      	bne.n	8004922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <TIM_Base_SetConfig+0x114>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01f      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d01b      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <TIM_Base_SetConfig+0x118>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d017      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <TIM_Base_SetConfig+0x11c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2a      	ldr	r2, [pc, #168]	; (80049f0 <TIM_Base_SetConfig+0x120>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00f      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <TIM_Base_SetConfig+0x124>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <TIM_Base_SetConfig+0x128>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a27      	ldr	r2, [pc, #156]	; (80049fc <TIM_Base_SetConfig+0x12c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <TIM_Base_SetConfig+0x130>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <TIM_Base_SetConfig+0x114>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <TIM_Base_SetConfig+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <TIM_Base_SetConfig+0x128>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <TIM_Base_SetConfig+0x12c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a0f      	ldr	r2, [pc, #60]	; (8004a00 <TIM_Base_SetConfig+0x130>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d103      	bne.n	80049d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	615a      	str	r2, [r3, #20]
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800

08004a04 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a32:	f023 0307 	bic.w	r3, r3, #7
 8004a36:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b70      	cmp	r3, #112	; 0x70
 8004a50:	d01a      	beq.n	8004a88 <TIM_SlaveTimer_SetConfig+0x84>
 8004a52:	2b70      	cmp	r3, #112	; 0x70
 8004a54:	d860      	bhi.n	8004b18 <TIM_SlaveTimer_SetConfig+0x114>
 8004a56:	2b60      	cmp	r3, #96	; 0x60
 8004a58:	d054      	beq.n	8004b04 <TIM_SlaveTimer_SetConfig+0x100>
 8004a5a:	2b60      	cmp	r3, #96	; 0x60
 8004a5c:	d85c      	bhi.n	8004b18 <TIM_SlaveTimer_SetConfig+0x114>
 8004a5e:	2b50      	cmp	r3, #80	; 0x50
 8004a60:	d046      	beq.n	8004af0 <TIM_SlaveTimer_SetConfig+0xec>
 8004a62:	2b50      	cmp	r3, #80	; 0x50
 8004a64:	d858      	bhi.n	8004b18 <TIM_SlaveTimer_SetConfig+0x114>
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d019      	beq.n	8004a9e <TIM_SlaveTimer_SetConfig+0x9a>
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d854      	bhi.n	8004b18 <TIM_SlaveTimer_SetConfig+0x114>
 8004a6e:	2b30      	cmp	r3, #48	; 0x30
 8004a70:	d055      	beq.n	8004b1e <TIM_SlaveTimer_SetConfig+0x11a>
 8004a72:	2b30      	cmp	r3, #48	; 0x30
 8004a74:	d850      	bhi.n	8004b18 <TIM_SlaveTimer_SetConfig+0x114>
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d051      	beq.n	8004b1e <TIM_SlaveTimer_SetConfig+0x11a>
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d84c      	bhi.n	8004b18 <TIM_SlaveTimer_SetConfig+0x114>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04d      	beq.n	8004b1e <TIM_SlaveTimer_SetConfig+0x11a>
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d04b      	beq.n	8004b1e <TIM_SlaveTimer_SetConfig+0x11a>
 8004a86:	e047      	b.n	8004b18 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68d9      	ldr	r1, [r3, #12]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f000 f9e6 	bl	8004e68 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004a9c:	e040      	b.n	8004b20 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d101      	bne.n	8004aaa <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e03b      	b.n	8004b22 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	621a      	str	r2, [r3, #32]
      break;
 8004aee:	e017      	b.n	8004b20 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6899      	ldr	r1, [r3, #8]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	461a      	mov	r2, r3
 8004afe:	f000 f883 	bl	8004c08 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004b02:	e00d      	b.n	8004b20 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	6899      	ldr	r1, [r3, #8]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	461a      	mov	r2, r3
 8004b12:	f000 f8e5 	bl	8004ce0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004b16:	e003      	b.n	8004b20 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1c:	e000      	b.n	8004b20 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004b1e:	bf00      	nop
  }

  return status;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f023 0201 	bic.w	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <TIM_TI1_SetConfig+0xc4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d017      	beq.n	8004b8a <TIM_TI1_SetConfig+0x5e>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b60:	d013      	beq.n	8004b8a <TIM_TI1_SetConfig+0x5e>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a23      	ldr	r2, [pc, #140]	; (8004bf4 <TIM_TI1_SetConfig+0xc8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00f      	beq.n	8004b8a <TIM_TI1_SetConfig+0x5e>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <TIM_TI1_SetConfig+0xcc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_TI1_SetConfig+0x5e>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <TIM_TI1_SetConfig+0xd0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_TI1_SetConfig+0x5e>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4a20      	ldr	r2, [pc, #128]	; (8004c00 <TIM_TI1_SetConfig+0xd4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_TI1_SetConfig+0x5e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <TIM_TI1_SetConfig+0xd8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <TIM_TI1_SetConfig+0x62>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <TIM_TI1_SetConfig+0x64>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e003      	b.n	8004bae <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f023 030a 	bic.w	r3, r3, #10
 8004bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f003 030a 	and.w	r3, r3, #10
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00
 8004c00:	40013400 	.word	0x40013400
 8004c04:	40014000 	.word	0x40014000

08004c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f023 0201 	bic.w	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 030a 	bic.w	r3, r3, #10
 8004c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b087      	sub	sp, #28
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
 8004c72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f023 0210 	bic.w	r2, r3, #16
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	031b      	lsls	r3, r3, #12
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	621a      	str	r2, [r3, #32]
}
 8004cd4:	bf00      	nop
 8004cd6:	371c      	adds	r7, #28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 0210 	bic.w	r2, r3, #16
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	031b      	lsls	r3, r3, #12
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 0303 	bic.w	r3, r3, #3
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004d90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	031b      	lsls	r3, r3, #12
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	031b      	lsls	r3, r3, #12
 8004e10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f043 0307 	orr.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e068      	b.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2e      	ldr	r2, [pc, #184]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2d      	ldr	r2, [pc, #180]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d108      	bne.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004efa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1e      	ldr	r2, [pc, #120]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f32:	d018      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1a      	ldr	r2, [pc, #104]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10c      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40013400 	.word	0x40013400
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800
 8004fb0:	40000c00 	.word	0x40000c00
 8004fb4:	40014000 	.word	0x40014000

08004fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e040      	b.n	8005088 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc f964 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	; 0x24
 8005020:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fbe8 	bl	8005808 <UART_SetConfig>
 8005038:	4603      	mov	r3, r0
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e022      	b.n	8005088 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fe66 	bl	8005d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800505e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800506e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 feed 	bl	8005e60 <UART_CheckIdleState>
 8005086:	4603      	mov	r3, r0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005090:	b480      	push	{r7}
 8005092:	b08b      	sub	sp, #44	; 0x2c
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d156      	bne.n	8005154 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_UART_Transmit_IT+0x22>
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e04f      	b.n	8005156 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_UART_Transmit_IT+0x34>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e048      	b.n	8005156 <HAL_UART_Transmit_IT+0xc6>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	88fa      	ldrh	r2, [r7, #6]
 80050d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	88fa      	ldrh	r2, [r7, #6]
 80050de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2221      	movs	r2, #33	; 0x21
 80050f4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fe:	d107      	bne.n	8005110 <HAL_UART_Transmit_IT+0x80>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a16      	ldr	r2, [pc, #88]	; (8005164 <HAL_UART_Transmit_IT+0xd4>)
 800510c:	669a      	str	r2, [r3, #104]	; 0x68
 800510e:	e002      	b.n	8005116 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <HAL_UART_Transmit_IT+0xd8>)
 8005114:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	613b      	str	r3, [r7, #16]
   return(result);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	69f9      	ldr	r1, [r7, #28]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	61bb      	str	r3, [r7, #24]
   return(result);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e6      	bne.n	800511e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	372c      	adds	r7, #44	; 0x2c
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	080063bb 	.word	0x080063bb
 8005168:	08006303 	.word	0x08006303

0800516c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517e:	2b20      	cmp	r3, #32
 8005180:	d142      	bne.n	8005208 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_UART_Receive_IT+0x22>
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e03b      	b.n	800520a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_UART_Receive_IT+0x34>
 800519c:	2302      	movs	r3, #2
 800519e:	e034      	b.n	800520a <HAL_UART_Receive_IT+0x9e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a18      	ldr	r2, [pc, #96]	; (8005214 <HAL_UART_Receive_IT+0xa8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01f      	beq.n	80051f8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d018      	beq.n	80051f8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	613b      	str	r3, [r7, #16]
   return(result);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	623b      	str	r3, [r7, #32]
 80051e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	69f9      	ldr	r1, [r7, #28]
 80051ea:	6a3a      	ldr	r2, [r7, #32]
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e6      	bne.n	80051c6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	461a      	mov	r2, r3
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 ff3c 	bl	800607c <UART_Start_Receive_IT>
 8005204:	4603      	mov	r3, r0
 8005206:	e000      	b.n	800520a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40008000 	.word	0x40008000

08005218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b0ba      	sub	sp, #232	; 0xe8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800523e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005242:	f640 030f 	movw	r3, #2063	; 0x80f
 8005246:	4013      	ands	r3, r2
 8005248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800524c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d115      	bne.n	8005280 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00f      	beq.n	8005280 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 82a6 	beq.w	80057c2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
      }
      return;
 800527e:	e2a0      	b.n	80057c2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8117 	beq.w	80054b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005296:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800529a:	4b85      	ldr	r3, [pc, #532]	; (80054b0 <HAL_UART_IRQHandler+0x298>)
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 810a 	beq.w	80054b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d011      	beq.n	80052d4 <HAL_UART_IRQHandler+0xbc>
 80052b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ca:	f043 0201 	orr.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d011      	beq.n	8005304 <HAL_UART_IRQHandler+0xec>
 80052e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2202      	movs	r2, #2
 80052f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d011      	beq.n	8005334 <HAL_UART_IRQHandler+0x11c>
 8005310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2204      	movs	r2, #4
 8005322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800532a:	f043 0202 	orr.w	r2, r3, #2
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d017      	beq.n	8005370 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800534c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005350:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2208      	movs	r2, #8
 800535e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005366:	f043 0208 	orr.w	r2, r3, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005378:	2b00      	cmp	r3, #0
 800537a:	d012      	beq.n	80053a2 <HAL_UART_IRQHandler+0x18a>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 820c 	beq.w	80057c6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d005      	beq.n	80053fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d04f      	beq.n	800549a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 ff08 	bl	8006210 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	d141      	bne.n	8005492 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800542c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800543a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800543e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1d9      	bne.n	800540e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	2b00      	cmp	r3, #0
 8005460:	d013      	beq.n	800548a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <HAL_UART_IRQHandler+0x29c>)
 8005468:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	4618      	mov	r0, r3
 8005470:	f7fd f84a 	bl	8002508 <HAL_DMA_Abort_IT>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d017      	beq.n	80054aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005484:	4610      	mov	r0, r2
 8005486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	e00f      	b.n	80054aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f9a6 	bl	80057dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005490:	e00b      	b.n	80054aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f9a2 	bl	80057dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	e007      	b.n	80054aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f99e 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80054a8:	e18d      	b.n	80057c6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054aa:	bf00      	nop
    return;
 80054ac:	e18b      	b.n	80057c6 <HAL_UART_IRQHandler+0x5ae>
 80054ae:	bf00      	nop
 80054b0:	04000120 	.word	0x04000120
 80054b4:	080062d7 	.word	0x080062d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054bc:	2b01      	cmp	r3, #1
 80054be:	f040 8146 	bne.w	800574e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 813f 	beq.w	800574e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8138 	beq.w	800574e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2210      	movs	r2, #16
 80054e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	f040 80b4 	bne.w	800565e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005502:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 815f 	beq.w	80057ca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005516:	429a      	cmp	r2, r3
 8005518:	f080 8157 	bcs.w	80057ca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005522:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 8085 	bne.w	8005642 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800554c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005566:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800556e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800557a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1da      	bne.n	8005538 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e1      	bne.n	8005582 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3308      	adds	r3, #8
 80055c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e3      	bne.n	80055be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005612:	f023 0310 	bic.w	r3, r3, #16
 8005616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005624:	65bb      	str	r3, [r7, #88]	; 0x58
 8005626:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800562a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e4      	bne.n	8005602 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	4618      	mov	r0, r3
 800563e:	f7fc ff25 	bl	800248c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800564e:	b29b      	uxth	r3, r3
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	b29b      	uxth	r3, r3
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f8ca 	bl	80057f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800565c:	e0b5      	b.n	80057ca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800566a:	b29b      	uxth	r3, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80a7 	beq.w	80057ce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80a2 	beq.w	80057ce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800569e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
 80056ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e4      	bne.n	800568a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	623b      	str	r3, [r7, #32]
   return(result);
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3308      	adds	r3, #8
 80056e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056e4:	633a      	str	r2, [r7, #48]	; 0x30
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e3      	bne.n	80056c0 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	60fb      	str	r3, [r7, #12]
   return(result);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0310 	bic.w	r3, r3, #16
 800571e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	617b      	str	r3, [r7, #20]
   return(result);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e4      	bne.n	800570a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f852 	bl	80057f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800574c:	e03f      	b.n	80057ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <HAL_UART_IRQHandler+0x560>
 800575a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800576e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 f80c 	bl	800678e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005776:	e02d      	b.n	80057d4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00e      	beq.n	80057a2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01c      	beq.n	80057d2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	4798      	blx	r3
    }
    return;
 80057a0:	e017      	b.n	80057d2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d012      	beq.n	80057d4 <HAL_UART_IRQHandler+0x5bc>
 80057ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fe5d 	bl	800647a <UART_EndTransmit_IT>
    return;
 80057c0:	e008      	b.n	80057d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80057c2:	bf00      	nop
 80057c4:	e006      	b.n	80057d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80057c6:	bf00      	nop
 80057c8:	e004      	b.n	80057d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80057ca:	bf00      	nop
 80057cc:	e002      	b.n	80057d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80057d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80057d4:	37e8      	adds	r7, #232	; 0xe8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop

080057dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4313      	orrs	r3, r2
 800582a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4bad      	ldr	r3, [pc, #692]	; (8005ae8 <UART_SetConfig+0x2e0>)
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	69f9      	ldr	r1, [r7, #28]
 800583c:	430b      	orrs	r3, r1
 800583e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4aa2      	ldr	r2, [pc, #648]	; (8005aec <UART_SetConfig+0x2e4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	4313      	orrs	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a99      	ldr	r2, [pc, #612]	; (8005af0 <UART_SetConfig+0x2e8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d121      	bne.n	80058d2 <UART_SetConfig+0xca>
 800588e:	4b99      	ldr	r3, [pc, #612]	; (8005af4 <UART_SetConfig+0x2ec>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	2b03      	cmp	r3, #3
 800589a:	d817      	bhi.n	80058cc <UART_SetConfig+0xc4>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0x9c>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058c1 	.word	0x080058c1
 80058ac:	080058bb 	.word	0x080058bb
 80058b0:	080058c7 	.word	0x080058c7
 80058b4:	2301      	movs	r3, #1
 80058b6:	76fb      	strb	r3, [r7, #27]
 80058b8:	e0e7      	b.n	8005a8a <UART_SetConfig+0x282>
 80058ba:	2302      	movs	r3, #2
 80058bc:	76fb      	strb	r3, [r7, #27]
 80058be:	e0e4      	b.n	8005a8a <UART_SetConfig+0x282>
 80058c0:	2304      	movs	r3, #4
 80058c2:	76fb      	strb	r3, [r7, #27]
 80058c4:	e0e1      	b.n	8005a8a <UART_SetConfig+0x282>
 80058c6:	2308      	movs	r3, #8
 80058c8:	76fb      	strb	r3, [r7, #27]
 80058ca:	e0de      	b.n	8005a8a <UART_SetConfig+0x282>
 80058cc:	2310      	movs	r3, #16
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e0db      	b.n	8005a8a <UART_SetConfig+0x282>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a88      	ldr	r2, [pc, #544]	; (8005af8 <UART_SetConfig+0x2f0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d132      	bne.n	8005942 <UART_SetConfig+0x13a>
 80058dc:	4b85      	ldr	r3, [pc, #532]	; (8005af4 <UART_SetConfig+0x2ec>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b0c      	cmp	r3, #12
 80058e8:	d828      	bhi.n	800593c <UART_SetConfig+0x134>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0xe8>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005925 	.word	0x08005925
 80058f4:	0800593d 	.word	0x0800593d
 80058f8:	0800593d 	.word	0x0800593d
 80058fc:	0800593d 	.word	0x0800593d
 8005900:	08005931 	.word	0x08005931
 8005904:	0800593d 	.word	0x0800593d
 8005908:	0800593d 	.word	0x0800593d
 800590c:	0800593d 	.word	0x0800593d
 8005910:	0800592b 	.word	0x0800592b
 8005914:	0800593d 	.word	0x0800593d
 8005918:	0800593d 	.word	0x0800593d
 800591c:	0800593d 	.word	0x0800593d
 8005920:	08005937 	.word	0x08005937
 8005924:	2300      	movs	r3, #0
 8005926:	76fb      	strb	r3, [r7, #27]
 8005928:	e0af      	b.n	8005a8a <UART_SetConfig+0x282>
 800592a:	2302      	movs	r3, #2
 800592c:	76fb      	strb	r3, [r7, #27]
 800592e:	e0ac      	b.n	8005a8a <UART_SetConfig+0x282>
 8005930:	2304      	movs	r3, #4
 8005932:	76fb      	strb	r3, [r7, #27]
 8005934:	e0a9      	b.n	8005a8a <UART_SetConfig+0x282>
 8005936:	2308      	movs	r3, #8
 8005938:	76fb      	strb	r3, [r7, #27]
 800593a:	e0a6      	b.n	8005a8a <UART_SetConfig+0x282>
 800593c:	2310      	movs	r3, #16
 800593e:	76fb      	strb	r3, [r7, #27]
 8005940:	e0a3      	b.n	8005a8a <UART_SetConfig+0x282>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a6d      	ldr	r2, [pc, #436]	; (8005afc <UART_SetConfig+0x2f4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d120      	bne.n	800598e <UART_SetConfig+0x186>
 800594c:	4b69      	ldr	r3, [pc, #420]	; (8005af4 <UART_SetConfig+0x2ec>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005956:	2b30      	cmp	r3, #48	; 0x30
 8005958:	d013      	beq.n	8005982 <UART_SetConfig+0x17a>
 800595a:	2b30      	cmp	r3, #48	; 0x30
 800595c:	d814      	bhi.n	8005988 <UART_SetConfig+0x180>
 800595e:	2b20      	cmp	r3, #32
 8005960:	d009      	beq.n	8005976 <UART_SetConfig+0x16e>
 8005962:	2b20      	cmp	r3, #32
 8005964:	d810      	bhi.n	8005988 <UART_SetConfig+0x180>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <UART_SetConfig+0x168>
 800596a:	2b10      	cmp	r3, #16
 800596c:	d006      	beq.n	800597c <UART_SetConfig+0x174>
 800596e:	e00b      	b.n	8005988 <UART_SetConfig+0x180>
 8005970:	2300      	movs	r3, #0
 8005972:	76fb      	strb	r3, [r7, #27]
 8005974:	e089      	b.n	8005a8a <UART_SetConfig+0x282>
 8005976:	2302      	movs	r3, #2
 8005978:	76fb      	strb	r3, [r7, #27]
 800597a:	e086      	b.n	8005a8a <UART_SetConfig+0x282>
 800597c:	2304      	movs	r3, #4
 800597e:	76fb      	strb	r3, [r7, #27]
 8005980:	e083      	b.n	8005a8a <UART_SetConfig+0x282>
 8005982:	2308      	movs	r3, #8
 8005984:	76fb      	strb	r3, [r7, #27]
 8005986:	e080      	b.n	8005a8a <UART_SetConfig+0x282>
 8005988:	2310      	movs	r3, #16
 800598a:	76fb      	strb	r3, [r7, #27]
 800598c:	e07d      	b.n	8005a8a <UART_SetConfig+0x282>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5b      	ldr	r2, [pc, #364]	; (8005b00 <UART_SetConfig+0x2f8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d120      	bne.n	80059da <UART_SetConfig+0x1d2>
 8005998:	4b56      	ldr	r3, [pc, #344]	; (8005af4 <UART_SetConfig+0x2ec>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d013      	beq.n	80059ce <UART_SetConfig+0x1c6>
 80059a6:	2bc0      	cmp	r3, #192	; 0xc0
 80059a8:	d814      	bhi.n	80059d4 <UART_SetConfig+0x1cc>
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d009      	beq.n	80059c2 <UART_SetConfig+0x1ba>
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d810      	bhi.n	80059d4 <UART_SetConfig+0x1cc>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <UART_SetConfig+0x1b4>
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	d006      	beq.n	80059c8 <UART_SetConfig+0x1c0>
 80059ba:	e00b      	b.n	80059d4 <UART_SetConfig+0x1cc>
 80059bc:	2300      	movs	r3, #0
 80059be:	76fb      	strb	r3, [r7, #27]
 80059c0:	e063      	b.n	8005a8a <UART_SetConfig+0x282>
 80059c2:	2302      	movs	r3, #2
 80059c4:	76fb      	strb	r3, [r7, #27]
 80059c6:	e060      	b.n	8005a8a <UART_SetConfig+0x282>
 80059c8:	2304      	movs	r3, #4
 80059ca:	76fb      	strb	r3, [r7, #27]
 80059cc:	e05d      	b.n	8005a8a <UART_SetConfig+0x282>
 80059ce:	2308      	movs	r3, #8
 80059d0:	76fb      	strb	r3, [r7, #27]
 80059d2:	e05a      	b.n	8005a8a <UART_SetConfig+0x282>
 80059d4:	2310      	movs	r3, #16
 80059d6:	76fb      	strb	r3, [r7, #27]
 80059d8:	e057      	b.n	8005a8a <UART_SetConfig+0x282>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a49      	ldr	r2, [pc, #292]	; (8005b04 <UART_SetConfig+0x2fc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d125      	bne.n	8005a30 <UART_SetConfig+0x228>
 80059e4:	4b43      	ldr	r3, [pc, #268]	; (8005af4 <UART_SetConfig+0x2ec>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f2:	d017      	beq.n	8005a24 <UART_SetConfig+0x21c>
 80059f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f8:	d817      	bhi.n	8005a2a <UART_SetConfig+0x222>
 80059fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fe:	d00b      	beq.n	8005a18 <UART_SetConfig+0x210>
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a04:	d811      	bhi.n	8005a2a <UART_SetConfig+0x222>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <UART_SetConfig+0x20a>
 8005a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0e:	d006      	beq.n	8005a1e <UART_SetConfig+0x216>
 8005a10:	e00b      	b.n	8005a2a <UART_SetConfig+0x222>
 8005a12:	2300      	movs	r3, #0
 8005a14:	76fb      	strb	r3, [r7, #27]
 8005a16:	e038      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	76fb      	strb	r3, [r7, #27]
 8005a1c:	e035      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a1e:	2304      	movs	r3, #4
 8005a20:	76fb      	strb	r3, [r7, #27]
 8005a22:	e032      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a24:	2308      	movs	r3, #8
 8005a26:	76fb      	strb	r3, [r7, #27]
 8005a28:	e02f      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	76fb      	strb	r3, [r7, #27]
 8005a2e:	e02c      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <UART_SetConfig+0x2e4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d125      	bne.n	8005a86 <UART_SetConfig+0x27e>
 8005a3a:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <UART_SetConfig+0x2ec>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a48:	d017      	beq.n	8005a7a <UART_SetConfig+0x272>
 8005a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4e:	d817      	bhi.n	8005a80 <UART_SetConfig+0x278>
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d00b      	beq.n	8005a6e <UART_SetConfig+0x266>
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5a:	d811      	bhi.n	8005a80 <UART_SetConfig+0x278>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <UART_SetConfig+0x260>
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	d006      	beq.n	8005a74 <UART_SetConfig+0x26c>
 8005a66:	e00b      	b.n	8005a80 <UART_SetConfig+0x278>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	76fb      	strb	r3, [r7, #27]
 8005a6c:	e00d      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	76fb      	strb	r3, [r7, #27]
 8005a72:	e00a      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a74:	2304      	movs	r3, #4
 8005a76:	76fb      	strb	r3, [r7, #27]
 8005a78:	e007      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	76fb      	strb	r3, [r7, #27]
 8005a7e:	e004      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a80:	2310      	movs	r3, #16
 8005a82:	76fb      	strb	r3, [r7, #27]
 8005a84:	e001      	b.n	8005a8a <UART_SetConfig+0x282>
 8005a86:	2310      	movs	r3, #16
 8005a88:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <UART_SetConfig+0x2e4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	f040 8087 	bne.w	8005ba4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a96:	7efb      	ldrb	r3, [r7, #27]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d837      	bhi.n	8005b0c <UART_SetConfig+0x304>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x29c>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005b0d 	.word	0x08005b0d
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005b0d 	.word	0x08005b0d
 8005ab4:	08005ad7 	.word	0x08005ad7
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005b0d 	.word	0x08005b0d
 8005ac0:	08005b0d 	.word	0x08005b0d
 8005ac4:	08005adf 	.word	0x08005adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fd fce6 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8005acc:	6178      	str	r0, [r7, #20]
        break;
 8005ace:	e022      	b.n	8005b16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <UART_SetConfig+0x300>)
 8005ad2:	617b      	str	r3, [r7, #20]
        break;
 8005ad4:	e01f      	b.n	8005b16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad6:	f7fd fc47 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8005ada:	6178      	str	r0, [r7, #20]
        break;
 8005adc:	e01b      	b.n	8005b16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae2:	617b      	str	r3, [r7, #20]
        break;
 8005ae4:	e017      	b.n	8005b16 <UART_SetConfig+0x30e>
 8005ae6:	bf00      	nop
 8005ae8:	efff69f3 	.word	0xefff69f3
 8005aec:	40008000 	.word	0x40008000
 8005af0:	40013800 	.word	0x40013800
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40004400 	.word	0x40004400
 8005afc:	40004800 	.word	0x40004800
 8005b00:	40004c00 	.word	0x40004c00
 8005b04:	40005000 	.word	0x40005000
 8005b08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	76bb      	strb	r3, [r7, #26]
        break;
 8005b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80f1 	beq.w	8005d00 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d305      	bcc.n	8005b3a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d902      	bls.n	8005b40 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	76bb      	strb	r3, [r7, #26]
 8005b3e:	e0df      	b.n	8005d00 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f04f 0100 	mov.w	r1, #0
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	020b      	lsls	r3, r1, #8
 8005b52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b56:	0202      	lsls	r2, r0, #8
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	6849      	ldr	r1, [r1, #4]
 8005b5c:	0849      	lsrs	r1, r1, #1
 8005b5e:	4608      	mov	r0, r1
 8005b60:	f04f 0100 	mov.w	r1, #0
 8005b64:	1814      	adds	r4, r2, r0
 8005b66:	eb43 0501 	adc.w	r5, r3, r1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	4620      	mov	r0, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	f7fa fb32 	bl	80001e0 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4613      	mov	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b8a:	d308      	bcc.n	8005b9e <UART_SetConfig+0x396>
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b92:	d204      	bcs.n	8005b9e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	60da      	str	r2, [r3, #12]
 8005b9c:	e0b0      	b.n	8005d00 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	76bb      	strb	r3, [r7, #26]
 8005ba2:	e0ad      	b.n	8005d00 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bac:	d15b      	bne.n	8005c66 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005bae:	7efb      	ldrb	r3, [r7, #27]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d828      	bhi.n	8005c06 <UART_SetConfig+0x3fe>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0x3b4>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	08005c07 	.word	0x08005c07
 8005bcc:	08005bf7 	.word	0x08005bf7
 8005bd0:	08005c07 	.word	0x08005c07
 8005bd4:	08005c07 	.word	0x08005c07
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	08005bff 	.word	0x08005bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fd fc5a 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8005be4:	6178      	str	r0, [r7, #20]
        break;
 8005be6:	e013      	b.n	8005c10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fd fc6c 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8005bec:	6178      	str	r0, [r7, #20]
        break;
 8005bee:	e00f      	b.n	8005c10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf0:	4b49      	ldr	r3, [pc, #292]	; (8005d18 <UART_SetConfig+0x510>)
 8005bf2:	617b      	str	r3, [r7, #20]
        break;
 8005bf4:	e00c      	b.n	8005c10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf6:	f7fd fbb7 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8005bfa:	6178      	str	r0, [r7, #20]
        break;
 8005bfc:	e008      	b.n	8005c10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	617b      	str	r3, [r7, #20]
        break;
 8005c04:	e004      	b.n	8005c10 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	76bb      	strb	r3, [r7, #26]
        break;
 8005c0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d074      	beq.n	8005d00 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	005a      	lsls	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	441a      	add	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d916      	bls.n	8005c60 <UART_SetConfig+0x458>
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d212      	bcs.n	8005c60 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f023 030f 	bic.w	r3, r3, #15
 8005c42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	89fb      	ldrh	r3, [r7, #14]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	89fa      	ldrh	r2, [r7, #14]
 8005c5c:	60da      	str	r2, [r3, #12]
 8005c5e:	e04f      	b.n	8005d00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	76bb      	strb	r3, [r7, #26]
 8005c64:	e04c      	b.n	8005d00 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c66:	7efb      	ldrb	r3, [r7, #27]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d828      	bhi.n	8005cbe <UART_SetConfig+0x4b6>
 8005c6c:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0x46c>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005ca1 	.word	0x08005ca1
 8005c7c:	08005ca9 	.word	0x08005ca9
 8005c80:	08005cbf 	.word	0x08005cbf
 8005c84:	08005caf 	.word	0x08005caf
 8005c88:	08005cbf 	.word	0x08005cbf
 8005c8c:	08005cbf 	.word	0x08005cbf
 8005c90:	08005cbf 	.word	0x08005cbf
 8005c94:	08005cb7 	.word	0x08005cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c98:	f7fd fbfe 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8005c9c:	6178      	str	r0, [r7, #20]
        break;
 8005c9e:	e013      	b.n	8005cc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca0:	f7fd fc10 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8005ca4:	6178      	str	r0, [r7, #20]
        break;
 8005ca6:	e00f      	b.n	8005cc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <UART_SetConfig+0x510>)
 8005caa:	617b      	str	r3, [r7, #20]
        break;
 8005cac:	e00c      	b.n	8005cc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cae:	f7fd fb5b 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8005cb2:	6178      	str	r0, [r7, #20]
        break;
 8005cb4:	e008      	b.n	8005cc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cba:	617b      	str	r3, [r7, #20]
        break;
 8005cbc:	e004      	b.n	8005cc8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	76bb      	strb	r3, [r7, #26]
        break;
 8005cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d018      	beq.n	8005d00 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	085a      	lsrs	r2, r3, #1
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	441a      	add	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b0f      	cmp	r3, #15
 8005ce6:	d909      	bls.n	8005cfc <UART_SetConfig+0x4f4>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cee:	d205      	bcs.n	8005cfc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e001      	b.n	8005d00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d0c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bdb0      	pop	{r4, r5, r7, pc}
 8005d16:	bf00      	nop
 8005d18:	00f42400 	.word	0x00f42400

08005d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1a:	d10a      	bne.n	8005e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e70:	f7fb fbae 	bl	80015d0 <HAL_GetTick>
 8005e74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d10e      	bne.n	8005ea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f82d 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e023      	b.n	8005eea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d10e      	bne.n	8005ece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f817 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e00d      	b.n	8005eea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b09c      	sub	sp, #112	; 0x70
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	4613      	mov	r3, r2
 8005f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f02:	e0a5      	b.n	8006050 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	f000 80a1 	beq.w	8006050 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0e:	f7fb fb5f 	bl	80015d0 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d13e      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f38:	667b      	str	r3, [r7, #100]	; 0x64
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e6      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f76:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e067      	b.n	8006072 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d04f      	beq.n	8006050 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fbe:	d147      	bne.n	8006050 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e6      	bne.n	8005fca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3308      	adds	r3, #8
 8006002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	613b      	str	r3, [r7, #16]
   return(result);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 0301 	bic.w	r3, r3, #1
 8006012:	66bb      	str	r3, [r7, #104]	; 0x68
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800601c:	623a      	str	r2, [r7, #32]
 800601e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	69f9      	ldr	r1, [r7, #28]
 8006022:	6a3a      	ldr	r2, [r7, #32]
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	61bb      	str	r3, [r7, #24]
   return(result);
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e5      	bne.n	8005ffc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e010      	b.n	8006072 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69da      	ldr	r2, [r3, #28]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4013      	ands	r3, r2
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	bf0c      	ite	eq
 8006060:	2301      	moveq	r3, #1
 8006062:	2300      	movne	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	429a      	cmp	r2, r3
 800606c:	f43f af4a 	beq.w	8005f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3770      	adds	r7, #112	; 0x70
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800607c:	b480      	push	{r7}
 800607e:	b097      	sub	sp, #92	; 0x5c
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ae:	d10e      	bne.n	80060ce <UART_Start_Receive_IT+0x52>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <UART_Start_Receive_IT+0x48>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060c2:	e02d      	b.n	8006120 <UART_Start_Receive_IT+0xa4>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	22ff      	movs	r2, #255	; 0xff
 80060c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060cc:	e028      	b.n	8006120 <UART_Start_Receive_IT+0xa4>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10d      	bne.n	80060f2 <UART_Start_Receive_IT+0x76>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <UART_Start_Receive_IT+0x6c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	22ff      	movs	r2, #255	; 0xff
 80060e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060e6:	e01b      	b.n	8006120 <UART_Start_Receive_IT+0xa4>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	227f      	movs	r2, #127	; 0x7f
 80060ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060f0:	e016      	b.n	8006120 <UART_Start_Receive_IT+0xa4>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060fa:	d10d      	bne.n	8006118 <UART_Start_Receive_IT+0x9c>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <UART_Start_Receive_IT+0x92>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	227f      	movs	r2, #127	; 0x7f
 8006108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800610c:	e008      	b.n	8006120 <UART_Start_Receive_IT+0xa4>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	223f      	movs	r2, #63	; 0x3f
 8006112:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006116:	e003      	b.n	8006120 <UART_Start_Receive_IT+0xa4>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2222      	movs	r2, #34	; 0x22
 800612c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3308      	adds	r3, #8
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	657b      	str	r3, [r7, #84]	; 0x54
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800614e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006150:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e5      	bne.n	800612e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616a:	d107      	bne.n	800617c <UART_Start_Receive_IT+0x100>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d103      	bne.n	800617c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a24      	ldr	r2, [pc, #144]	; (8006208 <UART_Start_Receive_IT+0x18c>)
 8006178:	665a      	str	r2, [r3, #100]	; 0x64
 800617a:	e002      	b.n	8006182 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4a23      	ldr	r2, [pc, #140]	; (800620c <UART_Start_Receive_IT+0x190>)
 8006180:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d019      	beq.n	80061c6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80061a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e6      	bne.n	8006192 <UART_Start_Receive_IT+0x116>
 80061c4:	e018      	b.n	80061f8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	613b      	str	r3, [r7, #16]
   return(result);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f043 0320 	orr.w	r3, r3, #32
 80061da:	653b      	str	r3, [r7, #80]	; 0x50
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	69f9      	ldr	r1, [r7, #28]
 80061ea:	6a3a      	ldr	r2, [r7, #32]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e6      	bne.n	80061c6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	375c      	adds	r7, #92	; 0x5c
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	0800662f 	.word	0x0800662f
 800620c:	080064cf 	.word	0x080064cf

08006210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006210:	b480      	push	{r7}
 8006212:	b095      	sub	sp, #84	; 0x54
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800622c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006236:	643b      	str	r3, [r7, #64]	; 0x40
 8006238:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800623c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e6      	bne.n	8006218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	61fb      	str	r3, [r7, #28]
   return(result);
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	64bb      	str	r3, [r7, #72]	; 0x48
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3308      	adds	r3, #8
 8006268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800626a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e5      	bne.n	800624a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006282:	2b01      	cmp	r3, #1
 8006284:	d118      	bne.n	80062b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60bb      	str	r3, [r7, #8]
   return(result);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f023 0310 	bic.w	r3, r3, #16
 800629a:	647b      	str	r3, [r7, #68]	; 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6979      	ldr	r1, [r7, #20]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	613b      	str	r3, [r7, #16]
   return(result);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e6      	bne.n	8006286 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80062ca:	bf00      	nop
 80062cc:	3754      	adds	r7, #84	; 0x54
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fa71 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006302:	b480      	push	{r7}
 8006304:	b08f      	sub	sp, #60	; 0x3c
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800630e:	2b21      	cmp	r3, #33	; 0x21
 8006310:	d14d      	bne.n	80063ae <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d132      	bne.n	8006384 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	61fb      	str	r3, [r7, #28]
   return(result);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	60bb      	str	r3, [r7, #8]
   return(result);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006364:	633b      	str	r3, [r7, #48]	; 0x30
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6979      	ldr	r1, [r7, #20]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	613b      	str	r3, [r7, #16]
   return(result);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e6      	bne.n	8006350 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006382:	e014      	b.n	80063ae <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	b292      	uxth	r2, r2
 8006390:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80063ae:	bf00      	nop
 80063b0:	373c      	adds	r7, #60	; 0x3c
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b091      	sub	sp, #68	; 0x44
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063c6:	2b21      	cmp	r3, #33	; 0x21
 80063c8:	d151      	bne.n	800646e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d132      	bne.n	800643c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	623b      	str	r3, [r7, #32]
   return(result);
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	633b      	str	r3, [r7, #48]	; 0x30
 80063f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	60fb      	str	r3, [r7, #12]
   return(result);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	61fb      	str	r3, [r7, #28]
 8006428:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	69b9      	ldr	r1, [r7, #24]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	617b      	str	r3, [r7, #20]
   return(result);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e6      	bne.n	8006408 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800643a:	e018      	b.n	800646e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644e:	b292      	uxth	r2, r2
 8006450:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	1c9a      	adds	r2, r3, #2
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800646e:	bf00      	nop
 8006470:	3744      	adds	r7, #68	; 0x44
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b088      	sub	sp, #32
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6979      	ldr	r1, [r7, #20]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	613b      	str	r3, [r7, #16]
   return(result);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fa fce3 	bl	8000e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c6:	bf00      	nop
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b096      	sub	sp, #88	; 0x58
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e4:	2b22      	cmp	r3, #34	; 0x22
 80064e6:	f040 8094 	bne.w	8006612 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80064f8:	b2d9      	uxtb	r1, r3
 80064fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006504:	400a      	ands	r2, r1
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d179      	bne.n	8006626 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006550:	647b      	str	r3, [r7, #68]	; 0x44
 8006552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800655e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e6      	bne.n	8006532 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3308      	adds	r3, #8
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	623b      	str	r3, [r7, #32]
   return(result);
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3308      	adds	r3, #8
 8006582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006584:	633a      	str	r2, [r7, #48]	; 0x30
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800658a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e5      	bne.n	8006564 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d12e      	bne.n	800660a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0310 	bic.w	r3, r3, #16
 80065c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	617b      	str	r3, [r7, #20]
   return(result);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b10      	cmp	r3, #16
 80065f0:	d103      	bne.n	80065fa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2210      	movs	r2, #16
 80065f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff f8f4 	bl	80057f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006608:	e00d      	b.n	8006626 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fa fc74 	bl	8000ef8 <HAL_UART_RxCpltCallback>
}
 8006610:	e009      	b.n	8006626 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	8b1b      	ldrh	r3, [r3, #24]
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0208 	orr.w	r2, r2, #8
 8006622:	b292      	uxth	r2, r2
 8006624:	831a      	strh	r2, [r3, #24]
}
 8006626:	bf00      	nop
 8006628:	3758      	adds	r7, #88	; 0x58
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b096      	sub	sp, #88	; 0x58
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800663c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006644:	2b22      	cmp	r3, #34	; 0x22
 8006646:	f040 8094 	bne.w	8006772 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006650:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800665a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800665e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006662:	4013      	ands	r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006668:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d179      	bne.n	8006786 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b0:	643b      	str	r3, [r7, #64]	; 0x40
 80066b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e6      	bne.n	8006692 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	64bb      	str	r3, [r7, #72]	; 0x48
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e5      	bne.n	80066c4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006708:	2b01      	cmp	r3, #1
 800670a:	d12e      	bne.n	800676a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f023 0310 	bic.w	r3, r3, #16
 8006726:	647b      	str	r3, [r7, #68]	; 0x44
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6979      	ldr	r1, [r7, #20]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	613b      	str	r3, [r7, #16]
   return(result);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e6      	bne.n	8006712 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b10      	cmp	r3, #16
 8006750:	d103      	bne.n	800675a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2210      	movs	r2, #16
 8006758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff f844 	bl	80057f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006768:	e00d      	b.n	8006786 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fa fbc4 	bl	8000ef8 <HAL_UART_RxCpltCallback>
}
 8006770:	e009      	b.n	8006786 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	8b1b      	ldrh	r3, [r3, #24]
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0208 	orr.w	r2, r2, #8
 8006782:	b292      	uxth	r2, r2
 8006784:	831a      	strh	r2, [r3, #24]
}
 8006786:	bf00      	nop
 8006788:	3758      	adds	r7, #88	; 0x58
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <__NVIC_SetPriority>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	6039      	str	r1, [r7, #0]
 80067ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	db0a      	blt.n	80067ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	490c      	ldr	r1, [pc, #48]	; (80067f0 <__NVIC_SetPriority+0x4c>)
 80067be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c2:	0112      	lsls	r2, r2, #4
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	440b      	add	r3, r1
 80067c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80067cc:	e00a      	b.n	80067e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4908      	ldr	r1, [pc, #32]	; (80067f4 <__NVIC_SetPriority+0x50>)
 80067d4:	79fb      	ldrb	r3, [r7, #7]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	3b04      	subs	r3, #4
 80067dc:	0112      	lsls	r2, r2, #4
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	440b      	add	r3, r1
 80067e2:	761a      	strb	r2, [r3, #24]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	e000e100 	.word	0xe000e100
 80067f4:	e000ed00 	.word	0xe000ed00

080067f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <SysTick_Handler+0x1c>)
 80067fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006800:	f001 fe8e 	bl	8008520 <xTaskGetSchedulerState>
 8006804:	4603      	mov	r3, r0
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800680a:	f002 fead 	bl	8009568 <xPortSysTickHandler>
  }
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	e000e010 	.word	0xe000e010

08006818 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800681c:	2100      	movs	r1, #0
 800681e:	f06f 0004 	mvn.w	r0, #4
 8006822:	f7ff ffbf 	bl	80067a4 <__NVIC_SetPriority>
#endif
}
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006832:	f3ef 8305 	mrs	r3, IPSR
 8006836:	603b      	str	r3, [r7, #0]
  return(result);
 8006838:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800683e:	f06f 0305 	mvn.w	r3, #5
 8006842:	607b      	str	r3, [r7, #4]
 8006844:	e00c      	b.n	8006860 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <osKernelInitialize+0x44>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800684e:	4b08      	ldr	r3, [pc, #32]	; (8006870 <osKernelInitialize+0x44>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006854:	2300      	movs	r3, #0
 8006856:	607b      	str	r3, [r7, #4]
 8006858:	e002      	b.n	8006860 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800685a:	f04f 33ff 	mov.w	r3, #4294967295
 800685e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006860:	687b      	ldr	r3, [r7, #4]
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20000060 	.word	0x20000060

08006874 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800687a:	f3ef 8305 	mrs	r3, IPSR
 800687e:	603b      	str	r3, [r7, #0]
  return(result);
 8006880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006886:	f06f 0305 	mvn.w	r3, #5
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	e010      	b.n	80068b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <osKernelStart+0x48>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d109      	bne.n	80068aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006896:	f7ff ffbf 	bl	8006818 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <osKernelStart+0x48>)
 800689c:	2202      	movs	r2, #2
 800689e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068a0:	f001 f9f6 	bl	8007c90 <vTaskStartScheduler>
      stat = osOK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	e002      	b.n	80068b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068aa:	f04f 33ff 	mov.w	r3, #4294967295
 80068ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068b0:	687b      	ldr	r3, [r7, #4]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000060 	.word	0x20000060

080068c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	; 0x38
 80068c4:	af04      	add	r7, sp, #16
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068d0:	f3ef 8305 	mrs	r3, IPSR
 80068d4:	617b      	str	r3, [r7, #20]
  return(result);
 80068d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d17e      	bne.n	80069da <osThreadNew+0x11a>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d07b      	beq.n	80069da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068e6:	2318      	movs	r3, #24
 80068e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d045      	beq.n	8006986 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <osThreadNew+0x48>
        name = attr->name;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <osThreadNew+0x6e>
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b38      	cmp	r3, #56	; 0x38
 8006920:	d805      	bhi.n	800692e <osThreadNew+0x6e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <osThreadNew+0x72>
        return (NULL);
 800692e:	2300      	movs	r3, #0
 8006930:	e054      	b.n	80069dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	089b      	lsrs	r3, r3, #2
 8006940:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00e      	beq.n	8006968 <osThreadNew+0xa8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b5b      	cmp	r3, #91	; 0x5b
 8006950:	d90a      	bls.n	8006968 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006956:	2b00      	cmp	r3, #0
 8006958:	d006      	beq.n	8006968 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <osThreadNew+0xa8>
        mem = 1;
 8006962:	2301      	movs	r3, #1
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e010      	b.n	800698a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10c      	bne.n	800698a <osThreadNew+0xca>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d108      	bne.n	800698a <osThreadNew+0xca>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <osThreadNew+0xca>
          mem = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e001      	b.n	800698a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d110      	bne.n	80069b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006998:	9202      	str	r2, [sp, #8]
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6a3a      	ldr	r2, [r7, #32]
 80069a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 ff9c 	bl	80078e4 <xTaskCreateStatic>
 80069ac:	4603      	mov	r3, r0
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	e013      	b.n	80069da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d110      	bne.n	80069da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	f107 0310 	add.w	r3, r7, #16
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 ffe7 	bl	800799e <xTaskCreate>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d001      	beq.n	80069da <osThreadNew+0x11a>
            hTask = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069da:	693b      	ldr	r3, [r7, #16]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3728      	adds	r7, #40	; 0x28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ec:	f3ef 8305 	mrs	r3, IPSR
 80069f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80069f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <osDelay+0x1c>
    stat = osErrorISR;
 80069f8:	f06f 0305 	mvn.w	r3, #5
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	e007      	b.n	8006a10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 f90c 	bl	8007c28 <vTaskDelay>
    }
  }

  return (stat);
 8006a10:	68fb      	ldr	r3, [r7, #12]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4a07      	ldr	r2, [pc, #28]	; (8006a48 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4a06      	ldr	r2, [pc, #24]	; (8006a4c <vApplicationGetIdleTaskMemory+0x30>)
 8006a32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2240      	movs	r2, #64	; 0x40
 8006a38:	601a      	str	r2, [r3, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000064 	.word	0x20000064
 8006a4c:	200000c0 	.word	0x200000c0

08006a50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a07      	ldr	r2, [pc, #28]	; (8006a7c <vApplicationGetTimerTaskMemory+0x2c>)
 8006a60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4a06      	ldr	r2, [pc, #24]	; (8006a80 <vApplicationGetTimerTaskMemory+0x30>)
 8006a66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	200001c0 	.word	0x200001c0
 8006a80:	2000021c 	.word	0x2000021c

08006a84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f103 0208 	add.w	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f103 0208 	add.w	r2, r3, #8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f103 0208 	add.w	r2, r3, #8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d103      	bne.n	8006b46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e00c      	b.n	8006b60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e002      	b.n	8006b54 <vListInsert+0x2e>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d2f6      	bcs.n	8006b4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6892      	ldr	r2, [r2, #8]
 8006bae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6852      	ldr	r2, [r2, #4]
 8006bb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d103      	bne.n	8006bcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	1e5a      	subs	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c16:	f002 fc15 	bl	8009444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	3b01      	subs	r3, #1
 8006c48:	68f9      	ldr	r1, [r7, #12]
 8006c4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	441a      	add	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	22ff      	movs	r2, #255	; 0xff
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22ff      	movs	r2, #255	; 0xff
 8006c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d114      	bne.n	8006c96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01a      	beq.n	8006caa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3310      	adds	r3, #16
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 fa93 	bl	80081a4 <xTaskRemoveFromEventList>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d012      	beq.n	8006caa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <xQueueGenericReset+0xcc>)
 8006c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	e009      	b.n	8006caa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3310      	adds	r3, #16
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fef2 	bl	8006a84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3324      	adds	r3, #36	; 0x24
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff feed 	bl	8006a84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006caa:	f002 fbfb 	bl	80094a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cae:	2301      	movs	r3, #1
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08e      	sub	sp, #56	; 0x38
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <xQueueGenericCreateStatic+0x52>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <xQueueGenericCreateStatic+0x56>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <xQueueGenericCreateStatic+0x58>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	623b      	str	r3, [r7, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <xQueueGenericCreateStatic+0x7e>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <xQueueGenericCreateStatic+0x82>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueGenericCreateStatic+0x84>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	61fb      	str	r3, [r7, #28]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d5a:	2350      	movs	r3, #80	; 0x50
 8006d5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b50      	cmp	r3, #80	; 0x50
 8006d62:	d00a      	beq.n	8006d7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	61bb      	str	r3, [r7, #24]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4613      	mov	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f83f 	bl	8006e20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3730      	adds	r7, #48	; 0x30
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	613b      	str	r3, [r7, #16]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3350      	adds	r3, #80	; 0x50
 8006de4:	4618      	mov	r0, r3
 8006de6:	f002 fc4f 	bl	8009688 <pvPortMalloc>
 8006dea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d011      	beq.n	8006e16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	3350      	adds	r3, #80	; 0x50
 8006dfa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e04:	79fa      	ldrb	r2, [r7, #7]
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f805 	bl	8006e20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e16:	69bb      	ldr	r3, [r7, #24]
	}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d103      	bne.n	8006e3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	e002      	b.n	8006e42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e4e:	2101      	movs	r1, #1
 8006e50:	69b8      	ldr	r0, [r7, #24]
 8006e52:	f7ff fecb 	bl	8006bec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	78fa      	ldrb	r2, [r7, #3]
 8006e5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e86:	2300      	movs	r3, #0
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f81d 	bl	8006ecc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6939      	ldr	r1, [r7, #16]
 8006eb2:	6978      	ldr	r0, [r7, #20]
 8006eb4:	f7ff ff7a 	bl	8006dac <xQueueGenericCreate>
 8006eb8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff ffd3 	bl	8006e66 <prvInitialiseMutex>

		return xNewQueue;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
	}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08e      	sub	sp, #56	; 0x38
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006eda:	2300      	movs	r3, #0
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xQueueGenericSend+0x32>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <xQueueGenericSend+0x40>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <xQueueGenericSend+0x44>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e000      	b.n	8006f12 <xQueueGenericSend+0x46>
 8006f10:	2300      	movs	r3, #0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <xQueueGenericSend+0x60>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d103      	bne.n	8006f3a <xQueueGenericSend+0x6e>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <xQueueGenericSend+0x72>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <xQueueGenericSend+0x74>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <xQueueGenericSend+0x8e>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	623b      	str	r3, [r7, #32]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f5a:	f001 fae1 	bl	8008520 <xTaskGetSchedulerState>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <xQueueGenericSend+0x9e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <xQueueGenericSend+0xa2>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <xQueueGenericSend+0xa4>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <xQueueGenericSend+0xbe>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	61fb      	str	r3, [r7, #28]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f8a:	f002 fa5b 	bl	8009444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d302      	bcc.n	8006fa0 <xQueueGenericSend+0xd4>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d129      	bne.n	8006ff4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fa6:	f000 fb2f 	bl	8007608 <prvCopyDataToQueue>
 8006faa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d010      	beq.n	8006fd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 f8f3 	bl	80081a4 <xTaskRemoveFromEventList>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d013      	beq.n	8006fec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fc4:	4b3f      	ldr	r3, [pc, #252]	; (80070c4 <xQueueGenericSend+0x1f8>)
 8006fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	e00a      	b.n	8006fec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fdc:	4b39      	ldr	r3, [pc, #228]	; (80070c4 <xQueueGenericSend+0x1f8>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fec:	f002 fa5a 	bl	80094a4 <vPortExitCritical>
				return pdPASS;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e063      	b.n	80070bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d103      	bne.n	8007002 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ffa:	f002 fa53 	bl	80094a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e05c      	b.n	80070bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007008:	f107 0314 	add.w	r3, r7, #20
 800700c:	4618      	mov	r0, r3
 800700e:	f001 f92d 	bl	800826c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007012:	2301      	movs	r3, #1
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007016:	f002 fa45 	bl	80094a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800701a:	f000 fe9f 	bl	8007d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800701e:	f002 fa11 	bl	8009444 <vPortEnterCritical>
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007028:	b25b      	sxtb	r3, r3
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	d103      	bne.n	8007038 <xQueueGenericSend+0x16c>
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800703e:	b25b      	sxtb	r3, r3
 8007040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007044:	d103      	bne.n	800704e <xQueueGenericSend+0x182>
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800704e:	f002 fa29 	bl	80094a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007052:	1d3a      	adds	r2, r7, #4
 8007054:	f107 0314 	add.w	r3, r7, #20
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f001 f91c 	bl	8008298 <xTaskCheckForTimeOut>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d124      	bne.n	80070b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007068:	f000 fbc6 	bl	80077f8 <prvIsQueueFull>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d018      	beq.n	80070a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	3310      	adds	r3, #16
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4611      	mov	r1, r2
 800707a:	4618      	mov	r0, r3
 800707c:	f001 f842 	bl	8008104 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007082:	f000 fb51 	bl	8007728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007086:	f000 fe77 	bl	8007d78 <xTaskResumeAll>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	f47f af7c 	bne.w	8006f8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007092:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <xQueueGenericSend+0x1f8>)
 8007094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	e772      	b.n	8006f8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a6:	f000 fb3f 	bl	8007728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070aa:	f000 fe65 	bl	8007d78 <xTaskResumeAll>
 80070ae:	e76c      	b.n	8006f8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070b2:	f000 fb39 	bl	8007728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070b6:	f000 fe5f 	bl	8007d78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3738      	adds	r7, #56	; 0x38
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	e000ed04 	.word	0xe000ed04

080070c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b090      	sub	sp, #64	; 0x40
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <xQueueGenericSendFromISR+0x3c>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <xQueueGenericSendFromISR+0x40>
 8007104:	2301      	movs	r3, #1
 8007106:	e000      	b.n	800710a <xQueueGenericSendFromISR+0x42>
 8007108:	2300      	movs	r3, #0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d103      	bne.n	8007132 <xQueueGenericSendFromISR+0x6a>
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <xQueueGenericSendFromISR+0x6e>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <xQueueGenericSendFromISR+0x70>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	623b      	str	r3, [r7, #32]
}
 800714e:	bf00      	nop
 8007150:	e7fe      	b.n	8007150 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007152:	f002 fa59 	bl	8009608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007156:	f3ef 8211 	mrs	r2, BASEPRI
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	61fa      	str	r2, [r7, #28]
 800716c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800716e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	429a      	cmp	r2, r3
 800717c:	d302      	bcc.n	8007184 <xQueueGenericSendFromISR+0xbc>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d12f      	bne.n	80071e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800718a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800719a:	f000 fa35 	bl	8007608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800719e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a6:	d112      	bne.n	80071ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d016      	beq.n	80071de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fff5 	bl	80081a4 <xTaskRemoveFromEventList>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e007      	b.n	80071de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071d2:	3301      	adds	r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	b25a      	sxtb	r2, r3
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071de:	2301      	movs	r3, #1
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80071e2:	e001      	b.n	80071e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3740      	adds	r7, #64	; 0x40
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08c      	sub	sp, #48	; 0x30
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800720c:	2300      	movs	r3, #0
 800720e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <xQueueReceive+0x30>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	623b      	str	r3, [r7, #32]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <xQueueReceive+0x3e>
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <xQueueReceive+0x42>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <xQueueReceive+0x44>
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10a      	bne.n	800725e <xQueueReceive+0x5e>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	61fb      	str	r3, [r7, #28]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800725e:	f001 f95f 	bl	8008520 <xTaskGetSchedulerState>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <xQueueReceive+0x6e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <xQueueReceive+0x72>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <xQueueReceive+0x74>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <xQueueReceive+0x8e>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	61bb      	str	r3, [r7, #24]
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800728e:	f002 f8d9 	bl	8009444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d01f      	beq.n	80072de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a2:	f000 fa1b 	bl	80076dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	3310      	adds	r3, #16
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 ff72 	bl	80081a4 <xTaskRemoveFromEventList>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072c6:	4b3d      	ldr	r3, [pc, #244]	; (80073bc <xQueueReceive+0x1bc>)
 80072c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072d6:	f002 f8e5 	bl	80094a4 <vPortExitCritical>
				return pdPASS;
 80072da:	2301      	movs	r3, #1
 80072dc:	e069      	b.n	80073b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d103      	bne.n	80072ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072e4:	f002 f8de 	bl	80094a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e062      	b.n	80073b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072f2:	f107 0310 	add.w	r3, r7, #16
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 ffb8 	bl	800826c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007300:	f002 f8d0 	bl	80094a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007304:	f000 fd2a 	bl	8007d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007308:	f002 f89c 	bl	8009444 <vPortEnterCritical>
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007312:	b25b      	sxtb	r3, r3
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d103      	bne.n	8007322 <xQueueReceive+0x122>
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007328:	b25b      	sxtb	r3, r3
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d103      	bne.n	8007338 <xQueueReceive+0x138>
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007338:	f002 f8b4 	bl	80094a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800733c:	1d3a      	adds	r2, r7, #4
 800733e:	f107 0310 	add.w	r3, r7, #16
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f000 ffa7 	bl	8008298 <xTaskCheckForTimeOut>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d123      	bne.n	8007398 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007352:	f000 fa3b 	bl	80077cc <prvIsQueueEmpty>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d017      	beq.n	800738c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	3324      	adds	r3, #36	; 0x24
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	4611      	mov	r1, r2
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fecd 	bl	8008104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800736a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736c:	f000 f9dc 	bl	8007728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007370:	f000 fd02 	bl	8007d78 <xTaskResumeAll>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d189      	bne.n	800728e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800737a:	4b10      	ldr	r3, [pc, #64]	; (80073bc <xQueueReceive+0x1bc>)
 800737c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	e780      	b.n	800728e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f000 f9cb 	bl	8007728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007392:	f000 fcf1 	bl	8007d78 <xTaskResumeAll>
 8007396:	e77a      	b.n	800728e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800739a:	f000 f9c5 	bl	8007728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800739e:	f000 fceb 	bl	8007d78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a4:	f000 fa12 	bl	80077cc <prvIsQueueEmpty>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f43f af6f 	beq.w	800728e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3730      	adds	r7, #48	; 0x30
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	e000ed04 	.word	0xe000ed04

080073c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	; 0x38
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	623b      	str	r3, [r7, #32]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	61fb      	str	r3, [r7, #28]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007410:	f001 f886 	bl	8008520 <xTaskGetSchedulerState>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <xQueueSemaphoreTake+0x60>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueSemaphoreTake+0x64>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueSemaphoreTake+0x66>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	61bb      	str	r3, [r7, #24]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007440:	f002 f800 	bl	8009444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d024      	beq.n	800749a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	1e5a      	subs	r2, r3, #1
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007460:	f001 f9d4 	bl	800880c <pvTaskIncrementMutexHeldCount>
 8007464:	4602      	mov	r2, r0
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00f      	beq.n	8007492 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	3310      	adds	r3, #16
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fe94 	bl	80081a4 <xTaskRemoveFromEventList>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007482:	4b54      	ldr	r3, [pc, #336]	; (80075d4 <xQueueSemaphoreTake+0x214>)
 8007484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007492:	f002 f807 	bl	80094a4 <vPortExitCritical>
				return pdPASS;
 8007496:	2301      	movs	r3, #1
 8007498:	e097      	b.n	80075ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d111      	bne.n	80074c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	617b      	str	r3, [r7, #20]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80074bc:	f001 fff2 	bl	80094a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074c0:	2300      	movs	r3, #0
 80074c2:	e082      	b.n	80075ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fecc 	bl	800826c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074d4:	2301      	movs	r3, #1
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074d8:	f001 ffe4 	bl	80094a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074dc:	f000 fc3e 	bl	8007d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074e0:	f001 ffb0 	bl	8009444 <vPortEnterCritical>
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ea:	b25b      	sxtb	r3, r3
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d103      	bne.n	80074fa <xQueueSemaphoreTake+0x13a>
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007500:	b25b      	sxtb	r3, r3
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d103      	bne.n	8007510 <xQueueSemaphoreTake+0x150>
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007510:	f001 ffc8 	bl	80094a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007514:	463a      	mov	r2, r7
 8007516:	f107 030c 	add.w	r3, r7, #12
 800751a:	4611      	mov	r1, r2
 800751c:	4618      	mov	r0, r3
 800751e:	f000 febb 	bl	8008298 <xTaskCheckForTimeOut>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d132      	bne.n	800758e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800752a:	f000 f94f 	bl	80077cc <prvIsQueueEmpty>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d026      	beq.n	8007582 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d109      	bne.n	8007550 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800753c:	f001 ff82 	bl	8009444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4618      	mov	r0, r3
 8007546:	f001 f809 	bl	800855c <xTaskPriorityInherit>
 800754a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800754c:	f001 ffaa 	bl	80094a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	3324      	adds	r3, #36	; 0x24
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fdd3 	bl	8008104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800755e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007560:	f000 f8e2 	bl	8007728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007564:	f000 fc08 	bl	8007d78 <xTaskResumeAll>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f47f af68 	bne.w	8007440 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007570:	4b18      	ldr	r3, [pc, #96]	; (80075d4 <xQueueSemaphoreTake+0x214>)
 8007572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	e75e      	b.n	8007440 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007584:	f000 f8d0 	bl	8007728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007588:	f000 fbf6 	bl	8007d78 <xTaskResumeAll>
 800758c:	e758      	b.n	8007440 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800758e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007590:	f000 f8ca 	bl	8007728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007594:	f000 fbf0 	bl	8007d78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800759a:	f000 f917 	bl	80077cc <prvIsQueueEmpty>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f43f af4d 	beq.w	8007440 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00d      	beq.n	80075c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80075ac:	f001 ff4a 	bl	8009444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80075b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075b2:	f000 f811 	bl	80075d8 <prvGetDisinheritPriorityAfterTimeout>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 f8a2 	bl	8008708 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80075c4:	f001 ff6e 	bl	80094a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3738      	adds	r7, #56	; 0x38
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d006      	beq.n	80075f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e001      	b.n	80075fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075fa:	68fb      	ldr	r3, [r7, #12]
	}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10d      	bne.n	8007642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d14d      	bne.n	80076ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fffa 	bl	800862c <xTaskPriorityDisinherit>
 8007638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	609a      	str	r2, [r3, #8]
 8007640:	e043      	b.n	80076ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d119      	bne.n	800767c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6858      	ldr	r0, [r3, #4]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	461a      	mov	r2, r3
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	f002 fa26 	bl	8009aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	441a      	add	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	429a      	cmp	r2, r3
 8007670:	d32b      	bcc.n	80076ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	605a      	str	r2, [r3, #4]
 800767a:	e026      	b.n	80076ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68d8      	ldr	r0, [r3, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	461a      	mov	r2, r3
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	f002 fa0c 	bl	8009aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	425b      	negs	r3, r3
 8007696:	441a      	add	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d207      	bcs.n	80076b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	425b      	negs	r3, r3
 80076b2:	441a      	add	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d105      	bne.n	80076ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076d2:	697b      	ldr	r3, [r7, #20]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	441a      	add	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	429a      	cmp	r2, r3
 8007706:	d303      	bcc.n	8007710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68d9      	ldr	r1, [r3, #12]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	461a      	mov	r2, r3
 800771a:	6838      	ldr	r0, [r7, #0]
 800771c:	f002 f9c2 	bl	8009aa4 <memcpy>
	}
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007730:	f001 fe88 	bl	8009444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800773a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800773c:	e011      	b.n	8007762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	d012      	beq.n	800776c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3324      	adds	r3, #36	; 0x24
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fd2a 	bl	80081a4 <xTaskRemoveFromEventList>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007756:	f000 fe01 	bl	800835c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	3b01      	subs	r3, #1
 800775e:	b2db      	uxtb	r3, r3
 8007760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dce9      	bgt.n	800773e <prvUnlockQueue+0x16>
 800776a:	e000      	b.n	800776e <prvUnlockQueue+0x46>
					break;
 800776c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	22ff      	movs	r2, #255	; 0xff
 8007772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007776:	f001 fe95 	bl	80094a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800777a:	f001 fe63 	bl	8009444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007786:	e011      	b.n	80077ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d012      	beq.n	80077b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3310      	adds	r3, #16
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fd05 	bl	80081a4 <xTaskRemoveFromEventList>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077a0:	f000 fddc 	bl	800835c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	dce9      	bgt.n	8007788 <prvUnlockQueue+0x60>
 80077b4:	e000      	b.n	80077b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	22ff      	movs	r2, #255	; 0xff
 80077bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80077c0:	f001 fe70 	bl	80094a4 <vPortExitCritical>
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077d4:	f001 fe36 	bl	8009444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e001      	b.n	80077ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077ea:	f001 fe5b 	bl	80094a4 <vPortExitCritical>

	return xReturn;
 80077ee:	68fb      	ldr	r3, [r7, #12]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007800:	f001 fe20 	bl	8009444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	429a      	cmp	r2, r3
 800780e:	d102      	bne.n	8007816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e001      	b.n	800781a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800781a:	f001 fe43 	bl	80094a4 <vPortExitCritical>

	return xReturn;
 800781e:	68fb      	ldr	r3, [r7, #12]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	e014      	b.n	8007862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007838:	4a0f      	ldr	r2, [pc, #60]	; (8007878 <vQueueAddToRegistry+0x50>)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007844:	490c      	ldr	r1, [pc, #48]	; (8007878 <vQueueAddToRegistry+0x50>)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800784e:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <vQueueAddToRegistry+0x50>)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	4413      	add	r3, r2
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800785a:	e006      	b.n	800786a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b07      	cmp	r3, #7
 8007866:	d9e7      	bls.n	8007838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20001c48 	.word	0x20001c48

0800787c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800788c:	f001 fdda 	bl	8009444 <vPortEnterCritical>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007896:	b25b      	sxtb	r3, r3
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789c:	d103      	bne.n	80078a6 <vQueueWaitForMessageRestricted+0x2a>
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d103      	bne.n	80078bc <vQueueWaitForMessageRestricted+0x40>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078bc:	f001 fdf2 	bl	80094a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fc3b 	bl	800814c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078d6:	6978      	ldr	r0, [r7, #20]
 80078d8:	f7ff ff26 	bl	8007728 <prvUnlockQueue>
	}
 80078dc:	bf00      	nop
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08e      	sub	sp, #56	; 0x38
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <xTaskCreateStatic+0x2a>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	623b      	str	r3, [r7, #32]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <xTaskCreateStatic+0x46>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	61fb      	str	r3, [r7, #28]
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800792a:	235c      	movs	r3, #92	; 0x5c
 800792c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b5c      	cmp	r3, #92	; 0x5c
 8007932:	d00a      	beq.n	800794a <xTaskCreateStatic+0x66>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	61bb      	str	r3, [r7, #24]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800794a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01e      	beq.n	8007990 <xTaskCreateStatic+0xac>
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01b      	beq.n	8007990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	2202      	movs	r2, #2
 8007966:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800796a:	2300      	movs	r3, #0
 800796c:	9303      	str	r3, [sp, #12]
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	f107 0314 	add.w	r3, r7, #20
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f850 	bl	8007a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800798a:	f000 f8dd 	bl	8007b48 <prvAddNewTaskToReadyList>
 800798e:	e001      	b.n	8007994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007994:	697b      	ldr	r3, [r7, #20]
	}
 8007996:	4618      	mov	r0, r3
 8007998:	3728      	adds	r7, #40	; 0x28
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b08c      	sub	sp, #48	; 0x30
 80079a2:	af04      	add	r7, sp, #16
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	603b      	str	r3, [r7, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fe68 	bl	8009688 <pvPortMalloc>
 80079b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00e      	beq.n	80079de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079c0:	205c      	movs	r0, #92	; 0x5c
 80079c2:	f001 fe61 	bl	8009688 <pvPortMalloc>
 80079c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30
 80079d4:	e005      	b.n	80079e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079d6:	6978      	ldr	r0, [r7, #20]
 80079d8:	f001 ff22 	bl	8009820 <vPortFree>
 80079dc:	e001      	b.n	80079e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	2300      	movs	r3, #0
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	9302      	str	r3, [sp, #8]
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f80e 	bl	8007a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a0c:	69f8      	ldr	r0, [r7, #28]
 8007a0e:	f000 f89b 	bl	8007b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a12:	2301      	movs	r3, #1
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	e002      	b.n	8007a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a18:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3720      	adds	r7, #32
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	461a      	mov	r2, r3
 8007a40:	21a5      	movs	r1, #165	; 0xa5
 8007a42:	f002 f83d 	bl	8009ac0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a50:	3b01      	subs	r3, #1
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f023 0307 	bic.w	r3, r3, #7
 8007a5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	617b      	str	r3, [r7, #20]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01f      	beq.n	8007ac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e012      	b.n	8007ab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	7819      	ldrb	r1, [r3, #0]
 8007a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	4413      	add	r3, r2
 8007a9a:	3334      	adds	r3, #52	; 0x34
 8007a9c:	460a      	mov	r2, r1
 8007a9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d006      	beq.n	8007aba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61fb      	str	r3, [r7, #28]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	2b0f      	cmp	r3, #15
 8007ab6:	d9e9      	bls.n	8007a8c <prvInitialiseNewTask+0x64>
 8007ab8:	e000      	b.n	8007abc <prvInitialiseNewTask+0x94>
			{
				break;
 8007aba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ac4:	e003      	b.n	8007ace <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	2b37      	cmp	r3, #55	; 0x37
 8007ad2:	d901      	bls.n	8007ad8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ad4:	2337      	movs	r3, #55	; 0x37
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	3304      	adds	r3, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe ffe8 	bl	8006ac4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	3318      	adds	r3, #24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe ffe3 	bl	8006ac4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	2200      	movs	r2, #0
 8007b18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	69b8      	ldr	r0, [r7, #24]
 8007b28:	f001 fb5c 	bl	80091e4 <pxPortInitialiseStack>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b3e:	bf00      	nop
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b50:	f001 fc78 	bl	8009444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b54:	4b2d      	ldr	r3, [pc, #180]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b5e:	4b2c      	ldr	r3, [pc, #176]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b66:	4a2a      	ldr	r2, [pc, #168]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b6c:	4b27      	ldr	r3, [pc, #156]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d110      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b74:	f000 fc16 	bl	80083a4 <prvInitialiseTaskLists>
 8007b78:	e00d      	b.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b7a:	4b26      	ldr	r3, [pc, #152]	; (8007c14 <prvAddNewTaskToReadyList+0xcc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b82:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d802      	bhi.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b90:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007b9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ba0:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <prvAddNewTaskToReadyList+0xd4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <prvAddNewTaskToReadyList+0x74>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a18      	ldr	r2, [pc, #96]	; (8007c1c <prvAddNewTaskToReadyList+0xd4>)
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <prvAddNewTaskToReadyList+0xd8>)
 8007bca:	441a      	add	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f7fe ff83 	bl	8006ade <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bd8:	f001 fc64 	bl	80094a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <prvAddNewTaskToReadyList+0xcc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d207      	bcs.n	8007c02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <prvAddNewTaskToReadyList+0xdc>)
 8007bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	200008f0 	.word	0x200008f0
 8007c10:	2000041c 	.word	0x2000041c
 8007c14:	200008fc 	.word	0x200008fc
 8007c18:	2000090c 	.word	0x2000090c
 8007c1c:	200008f8 	.word	0x200008f8
 8007c20:	20000420 	.word	0x20000420
 8007c24:	e000ed04 	.word	0xe000ed04

08007c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d017      	beq.n	8007c6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c3a:	4b13      	ldr	r3, [pc, #76]	; (8007c88 <vTaskDelay+0x60>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <vTaskDelay+0x30>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	60bb      	str	r3, [r7, #8]
}
 8007c54:	bf00      	nop
 8007c56:	e7fe      	b.n	8007c56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c58:	f000 f880 	bl	8007d5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fec2 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c64:	f000 f888 	bl	8007d78 <xTaskResumeAll>
 8007c68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d107      	bne.n	8007c80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <vTaskDelay+0x64>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000918 	.word	0x20000918
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c9e:	463a      	mov	r2, r7
 8007ca0:	1d39      	adds	r1, r7, #4
 8007ca2:	f107 0308 	add.w	r3, r7, #8
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe feb8 	bl	8006a1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	9202      	str	r2, [sp, #8]
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	460a      	mov	r2, r1
 8007cbe:	4921      	ldr	r1, [pc, #132]	; (8007d44 <vTaskStartScheduler+0xb4>)
 8007cc0:	4821      	ldr	r0, [pc, #132]	; (8007d48 <vTaskStartScheduler+0xb8>)
 8007cc2:	f7ff fe0f 	bl	80078e4 <xTaskCreateStatic>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <vTaskStartScheduler+0xbc>)
 8007cca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ccc:	4b1f      	ldr	r3, [pc, #124]	; (8007d4c <vTaskStartScheduler+0xbc>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	e001      	b.n	8007cde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d102      	bne.n	8007cea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ce4:	f000 fed4 	bl	8008a90 <xTimerCreateTimerTask>
 8007ce8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d116      	bne.n	8007d1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
}
 8007d02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d04:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <vTaskStartScheduler+0xc0>)
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d0c:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <vTaskStartScheduler+0xc4>)
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <vTaskStartScheduler+0xc8>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d18:	f001 faf2 	bl	8009300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d1c:	e00e      	b.n	8007d3c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d10a      	bne.n	8007d3c <vTaskStartScheduler+0xac>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60fb      	str	r3, [r7, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <vTaskStartScheduler+0xaa>
}
 8007d3c:	bf00      	nop
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	08009b40 	.word	0x08009b40
 8007d48:	08008375 	.word	0x08008375
 8007d4c:	20000914 	.word	0x20000914
 8007d50:	20000910 	.word	0x20000910
 8007d54:	200008fc 	.word	0x200008fc
 8007d58:	200008f4 	.word	0x200008f4

08007d5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <vTaskSuspendAll+0x18>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	4a03      	ldr	r2, [pc, #12]	; (8007d74 <vTaskSuspendAll+0x18>)
 8007d68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d6a:	bf00      	nop
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	20000918 	.word	0x20000918

08007d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d86:	4b42      	ldr	r3, [pc, #264]	; (8007e90 <xTaskResumeAll+0x118>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	603b      	str	r3, [r7, #0]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007da4:	f001 fb4e 	bl	8009444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007da8:	4b39      	ldr	r3, [pc, #228]	; (8007e90 <xTaskResumeAll+0x118>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	4a38      	ldr	r2, [pc, #224]	; (8007e90 <xTaskResumeAll+0x118>)
 8007db0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db2:	4b37      	ldr	r3, [pc, #220]	; (8007e90 <xTaskResumeAll+0x118>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d162      	bne.n	8007e80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dba:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <xTaskResumeAll+0x11c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d05e      	beq.n	8007e80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dc2:	e02f      	b.n	8007e24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc4:	4b34      	ldr	r3, [pc, #208]	; (8007e98 <xTaskResumeAll+0x120>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3318      	adds	r3, #24
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe fee1 	bl	8006b98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fedc 	bl	8006b98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	4b2d      	ldr	r3, [pc, #180]	; (8007e9c <xTaskResumeAll+0x124>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d903      	bls.n	8007df4 <xTaskResumeAll+0x7c>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	4a2a      	ldr	r2, [pc, #168]	; (8007e9c <xTaskResumeAll+0x124>)
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4a27      	ldr	r2, [pc, #156]	; (8007ea0 <xTaskResumeAll+0x128>)
 8007e02:	441a      	add	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f7fe fe67 	bl	8006ade <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4b23      	ldr	r3, [pc, #140]	; (8007ea4 <xTaskResumeAll+0x12c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d302      	bcc.n	8007e24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e1e:	4b22      	ldr	r3, [pc, #136]	; (8007ea8 <xTaskResumeAll+0x130>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e24:	4b1c      	ldr	r3, [pc, #112]	; (8007e98 <xTaskResumeAll+0x120>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1cb      	bne.n	8007dc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e32:	f000 fb55 	bl	80084e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e36:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <xTaskResumeAll+0x134>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d010      	beq.n	8007e64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e42:	f000 f847 	bl	8007ed4 <xTaskIncrementTick>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e4c:	4b16      	ldr	r3, [pc, #88]	; (8007ea8 <xTaskResumeAll+0x130>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1f1      	bne.n	8007e42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <xTaskResumeAll+0x134>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e64:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <xTaskResumeAll+0x130>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <xTaskResumeAll+0x138>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e80:	f001 fb10 	bl	80094a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007e84:	68bb      	ldr	r3, [r7, #8]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000918 	.word	0x20000918
 8007e94:	200008f0 	.word	0x200008f0
 8007e98:	200008b0 	.word	0x200008b0
 8007e9c:	200008f8 	.word	0x200008f8
 8007ea0:	20000420 	.word	0x20000420
 8007ea4:	2000041c 	.word	0x2000041c
 8007ea8:	20000904 	.word	0x20000904
 8007eac:	20000900 	.word	0x20000900
 8007eb0:	e000ed04 	.word	0xe000ed04

08007eb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <xTaskGetTickCount+0x1c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ec0:	687b      	ldr	r3, [r7, #4]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	200008f4 	.word	0x200008f4

08007ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ede:	4b4f      	ldr	r3, [pc, #316]	; (800801c <xTaskIncrementTick+0x148>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f040 808f 	bne.w	8008006 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ee8:	4b4d      	ldr	r3, [pc, #308]	; (8008020 <xTaskIncrementTick+0x14c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3301      	adds	r3, #1
 8007eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ef0:	4a4b      	ldr	r2, [pc, #300]	; (8008020 <xTaskIncrementTick+0x14c>)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d120      	bne.n	8007f3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007efc:	4b49      	ldr	r3, [pc, #292]	; (8008024 <xTaskIncrementTick+0x150>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <xTaskIncrementTick+0x48>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	603b      	str	r3, [r7, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <xTaskIncrementTick+0x46>
 8007f1c:	4b41      	ldr	r3, [pc, #260]	; (8008024 <xTaskIncrementTick+0x150>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	4b41      	ldr	r3, [pc, #260]	; (8008028 <xTaskIncrementTick+0x154>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a3f      	ldr	r2, [pc, #252]	; (8008024 <xTaskIncrementTick+0x150>)
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	4a3f      	ldr	r2, [pc, #252]	; (8008028 <xTaskIncrementTick+0x154>)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	4b3e      	ldr	r3, [pc, #248]	; (800802c <xTaskIncrementTick+0x158>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	4a3d      	ldr	r2, [pc, #244]	; (800802c <xTaskIncrementTick+0x158>)
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	f000 fad1 	bl	80084e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f3e:	4b3c      	ldr	r3, [pc, #240]	; (8008030 <xTaskIncrementTick+0x15c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d349      	bcc.n	8007fdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f48:	4b36      	ldr	r3, [pc, #216]	; (8008024 <xTaskIncrementTick+0x150>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f52:	4b37      	ldr	r3, [pc, #220]	; (8008030 <xTaskIncrementTick+0x15c>)
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295
 8007f58:	601a      	str	r2, [r3, #0]
					break;
 8007f5a:	e03f      	b.n	8007fdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5c:	4b31      	ldr	r3, [pc, #196]	; (8008024 <xTaskIncrementTick+0x150>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d203      	bcs.n	8007f7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f74:	4a2e      	ldr	r2, [pc, #184]	; (8008030 <xTaskIncrementTick+0x15c>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f7a:	e02f      	b.n	8007fdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fe09 	bl	8006b98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	3318      	adds	r3, #24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fe00 	bl	8006b98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9c:	4b25      	ldr	r3, [pc, #148]	; (8008034 <xTaskIncrementTick+0x160>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d903      	bls.n	8007fac <xTaskIncrementTick+0xd8>
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4a22      	ldr	r2, [pc, #136]	; (8008034 <xTaskIncrementTick+0x160>)
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <xTaskIncrementTick+0x164>)
 8007fba:	441a      	add	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f7fe fd8b 	bl	8006ade <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fcc:	4b1b      	ldr	r3, [pc, #108]	; (800803c <xTaskIncrementTick+0x168>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d3b8      	bcc.n	8007f48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fda:	e7b5      	b.n	8007f48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fdc:	4b17      	ldr	r3, [pc, #92]	; (800803c <xTaskIncrementTick+0x168>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe2:	4915      	ldr	r1, [pc, #84]	; (8008038 <xTaskIncrementTick+0x164>)
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	440b      	add	r3, r1
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d901      	bls.n	8007ff8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ff8:	4b11      	ldr	r3, [pc, #68]	; (8008040 <xTaskIncrementTick+0x16c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008000:	2301      	movs	r3, #1
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	e004      	b.n	8008010 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <xTaskIncrementTick+0x170>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	4a0d      	ldr	r2, [pc, #52]	; (8008044 <xTaskIncrementTick+0x170>)
 800800e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008010:	697b      	ldr	r3, [r7, #20]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000918 	.word	0x20000918
 8008020:	200008f4 	.word	0x200008f4
 8008024:	200008a8 	.word	0x200008a8
 8008028:	200008ac 	.word	0x200008ac
 800802c:	20000908 	.word	0x20000908
 8008030:	20000910 	.word	0x20000910
 8008034:	200008f8 	.word	0x200008f8
 8008038:	20000420 	.word	0x20000420
 800803c:	2000041c 	.word	0x2000041c
 8008040:	20000904 	.word	0x20000904
 8008044:	20000900 	.word	0x20000900

08008048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800804e:	4b28      	ldr	r3, [pc, #160]	; (80080f0 <vTaskSwitchContext+0xa8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <vTaskSwitchContext+0xac>)
 8008058:	2201      	movs	r2, #1
 800805a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800805c:	e041      	b.n	80080e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800805e:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <vTaskSwitchContext+0xac>)
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008064:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <vTaskSwitchContext+0xb0>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e010      	b.n	800808e <vTaskSwitchContext+0x46>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <vTaskSwitchContext+0x40>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	607b      	str	r3, [r7, #4]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <vTaskSwitchContext+0x3e>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3b01      	subs	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	491b      	ldr	r1, [pc, #108]	; (80080fc <vTaskSwitchContext+0xb4>)
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0e4      	beq.n	800806c <vTaskSwitchContext+0x24>
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4a13      	ldr	r2, [pc, #76]	; (80080fc <vTaskSwitchContext+0xb4>)
 80080ae:	4413      	add	r3, r2
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	605a      	str	r2, [r3, #4]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3308      	adds	r3, #8
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d104      	bne.n	80080d2 <vTaskSwitchContext+0x8a>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	605a      	str	r2, [r3, #4]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	4a09      	ldr	r2, [pc, #36]	; (8008100 <vTaskSwitchContext+0xb8>)
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4a06      	ldr	r2, [pc, #24]	; (80080f8 <vTaskSwitchContext+0xb0>)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6013      	str	r3, [r2, #0]
}
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000918 	.word	0x20000918
 80080f4:	20000904 	.word	0x20000904
 80080f8:	200008f8 	.word	0x200008f8
 80080fc:	20000420 	.word	0x20000420
 8008100:	2000041c 	.word	0x2000041c

08008104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <vTaskPlaceOnEventList+0x44>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3318      	adds	r3, #24
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fe fcf7 	bl	8006b26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008138:	2101      	movs	r1, #1
 800813a:	6838      	ldr	r0, [r7, #0]
 800813c:	f000 fc54 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	2000041c 	.word	0x2000041c

0800814c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	617b      	str	r3, [r7, #20]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3318      	adds	r3, #24
 800817a:	4619      	mov	r1, r3
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7fe fcae 	bl	8006ade <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008188:	f04f 33ff 	mov.w	r3, #4294967295
 800818c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	68b8      	ldr	r0, [r7, #8]
 8008192:	f000 fc29 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
	}
 8008196:	bf00      	nop
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	2000041c 	.word	0x2000041c

080081a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10a      	bne.n	80081d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	60fb      	str	r3, [r7, #12]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	3318      	adds	r3, #24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fcdf 	bl	8006b98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081da:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <xTaskRemoveFromEventList+0xb0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11d      	bne.n	800821e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fcd6 	bl	8006b98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4b19      	ldr	r3, [pc, #100]	; (8008258 <xTaskRemoveFromEventList+0xb4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d903      	bls.n	8008200 <xTaskRemoveFromEventList+0x5c>
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	4a16      	ldr	r2, [pc, #88]	; (8008258 <xTaskRemoveFromEventList+0xb4>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a13      	ldr	r2, [pc, #76]	; (800825c <xTaskRemoveFromEventList+0xb8>)
 800820e:	441a      	add	r2, r3
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7fe fc61 	bl	8006ade <vListInsertEnd>
 800821c:	e005      	b.n	800822a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3318      	adds	r3, #24
 8008222:	4619      	mov	r1, r3
 8008224:	480e      	ldr	r0, [pc, #56]	; (8008260 <xTaskRemoveFromEventList+0xbc>)
 8008226:	f7fe fc5a 	bl	8006ade <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <xTaskRemoveFromEventList+0xc0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	429a      	cmp	r2, r3
 8008236:	d905      	bls.n	8008244 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <xTaskRemoveFromEventList+0xc4>)
 800823e:	2201      	movs	r2, #1
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e001      	b.n	8008248 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008248:	697b      	ldr	r3, [r7, #20]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000918 	.word	0x20000918
 8008258:	200008f8 	.word	0x200008f8
 800825c:	20000420 	.word	0x20000420
 8008260:	200008b0 	.word	0x200008b0
 8008264:	2000041c 	.word	0x2000041c
 8008268:	20000904 	.word	0x20000904

0800826c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <vTaskInternalSetTimeOutState+0x24>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <vTaskInternalSetTimeOutState+0x28>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20000908 	.word	0x20000908
 8008294:	200008f4 	.word	0x200008f4

08008298 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	613b      	str	r3, [r7, #16]
}
 80082ba:	bf00      	nop
 80082bc:	e7fe      	b.n	80082bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60fb      	str	r3, [r7, #12]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082da:	f001 f8b3 	bl	8009444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082de:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <xTaskCheckForTimeOut+0xbc>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d102      	bne.n	80082fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
 80082fc:	e023      	b.n	8008346 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b15      	ldr	r3, [pc, #84]	; (8008358 <xTaskCheckForTimeOut+0xc0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d007      	beq.n	800831a <xTaskCheckForTimeOut+0x82>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	429a      	cmp	r2, r3
 8008312:	d302      	bcc.n	800831a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	e015      	b.n	8008346 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	429a      	cmp	r2, r3
 8008322:	d20b      	bcs.n	800833c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	1ad2      	subs	r2, r2, r3
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff ff9b 	bl	800826c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]
 800833a:	e004      	b.n	8008346 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2200      	movs	r2, #0
 8008340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008342:	2301      	movs	r3, #1
 8008344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008346:	f001 f8ad 	bl	80094a4 <vPortExitCritical>

	return xReturn;
 800834a:	69fb      	ldr	r3, [r7, #28]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3720      	adds	r7, #32
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	200008f4 	.word	0x200008f4
 8008358:	20000908 	.word	0x20000908

0800835c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008360:	4b03      	ldr	r3, [pc, #12]	; (8008370 <vTaskMissedYield+0x14>)
 8008362:	2201      	movs	r2, #1
 8008364:	601a      	str	r2, [r3, #0]
}
 8008366:	bf00      	nop
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20000904 	.word	0x20000904

08008374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800837c:	f000 f852 	bl	8008424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008380:	4b06      	ldr	r3, [pc, #24]	; (800839c <prvIdleTask+0x28>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d9f9      	bls.n	800837c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <prvIdleTask+0x2c>)
 800838a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008398:	e7f0      	b.n	800837c <prvIdleTask+0x8>
 800839a:	bf00      	nop
 800839c:	20000420 	.word	0x20000420
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083aa:	2300      	movs	r3, #0
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	e00c      	b.n	80083ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4a12      	ldr	r2, [pc, #72]	; (8008404 <prvInitialiseTaskLists+0x60>)
 80083bc:	4413      	add	r3, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fb60 	bl	8006a84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3301      	adds	r3, #1
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b37      	cmp	r3, #55	; 0x37
 80083ce:	d9ef      	bls.n	80083b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083d0:	480d      	ldr	r0, [pc, #52]	; (8008408 <prvInitialiseTaskLists+0x64>)
 80083d2:	f7fe fb57 	bl	8006a84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083d6:	480d      	ldr	r0, [pc, #52]	; (800840c <prvInitialiseTaskLists+0x68>)
 80083d8:	f7fe fb54 	bl	8006a84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083dc:	480c      	ldr	r0, [pc, #48]	; (8008410 <prvInitialiseTaskLists+0x6c>)
 80083de:	f7fe fb51 	bl	8006a84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083e2:	480c      	ldr	r0, [pc, #48]	; (8008414 <prvInitialiseTaskLists+0x70>)
 80083e4:	f7fe fb4e 	bl	8006a84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083e8:	480b      	ldr	r0, [pc, #44]	; (8008418 <prvInitialiseTaskLists+0x74>)
 80083ea:	f7fe fb4b 	bl	8006a84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083ee:	4b0b      	ldr	r3, [pc, #44]	; (800841c <prvInitialiseTaskLists+0x78>)
 80083f0:	4a05      	ldr	r2, [pc, #20]	; (8008408 <prvInitialiseTaskLists+0x64>)
 80083f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083f4:	4b0a      	ldr	r3, [pc, #40]	; (8008420 <prvInitialiseTaskLists+0x7c>)
 80083f6:	4a05      	ldr	r2, [pc, #20]	; (800840c <prvInitialiseTaskLists+0x68>)
 80083f8:	601a      	str	r2, [r3, #0]
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000420 	.word	0x20000420
 8008408:	20000880 	.word	0x20000880
 800840c:	20000894 	.word	0x20000894
 8008410:	200008b0 	.word	0x200008b0
 8008414:	200008c4 	.word	0x200008c4
 8008418:	200008dc 	.word	0x200008dc
 800841c:	200008a8 	.word	0x200008a8
 8008420:	200008ac 	.word	0x200008ac

08008424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800842a:	e019      	b.n	8008460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800842c:	f001 f80a 	bl	8009444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008430:	4b10      	ldr	r3, [pc, #64]	; (8008474 <prvCheckTasksWaitingTermination+0x50>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	4618      	mov	r0, r3
 800843e:	f7fe fbab 	bl	8006b98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008442:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <prvCheckTasksWaitingTermination+0x54>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a0b      	ldr	r2, [pc, #44]	; (8008478 <prvCheckTasksWaitingTermination+0x54>)
 800844a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800844c:	4b0b      	ldr	r3, [pc, #44]	; (800847c <prvCheckTasksWaitingTermination+0x58>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3b01      	subs	r3, #1
 8008452:	4a0a      	ldr	r2, [pc, #40]	; (800847c <prvCheckTasksWaitingTermination+0x58>)
 8008454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008456:	f001 f825 	bl	80094a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f810 	bl	8008480 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <prvCheckTasksWaitingTermination+0x58>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e1      	bne.n	800842c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200008c4 	.word	0x200008c4
 8008478:	200008f0 	.word	0x200008f0
 800847c:	200008d8 	.word	0x200008d8

08008480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800848e:	2b00      	cmp	r3, #0
 8008490:	d108      	bne.n	80084a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	4618      	mov	r0, r3
 8008498:	f001 f9c2 	bl	8009820 <vPortFree>
				vPortFree( pxTCB );
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 f9bf 	bl	8009820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084a2:	e018      	b.n	80084d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d103      	bne.n	80084b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 f9b6 	bl	8009820 <vPortFree>
	}
 80084b4:	e00f      	b.n	80084d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d00a      	beq.n	80084d6 <prvDeleteTCB+0x56>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <prvDeleteTCB+0x54>
	}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvResetNextTaskUnblockTime+0x38>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <prvResetNextTaskUnblockTime+0x3c>)
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084f8:	e008      	b.n	800850c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <prvResetNextTaskUnblockTime+0x38>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4a04      	ldr	r2, [pc, #16]	; (800851c <prvResetNextTaskUnblockTime+0x3c>)
 800850a:	6013      	str	r3, [r2, #0]
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	200008a8 	.word	0x200008a8
 800851c:	20000910 	.word	0x20000910

08008520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <xTaskGetSchedulerState+0x34>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800852e:	2301      	movs	r3, #1
 8008530:	607b      	str	r3, [r7, #4]
 8008532:	e008      	b.n	8008546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008534:	4b08      	ldr	r3, [pc, #32]	; (8008558 <xTaskGetSchedulerState+0x38>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800853c:	2302      	movs	r3, #2
 800853e:	607b      	str	r3, [r7, #4]
 8008540:	e001      	b.n	8008546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008542:	2300      	movs	r3, #0
 8008544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008546:	687b      	ldr	r3, [r7, #4]
	}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	200008fc 	.word	0x200008fc
 8008558:	20000918 	.word	0x20000918

0800855c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d051      	beq.n	8008616 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008576:	4b2a      	ldr	r3, [pc, #168]	; (8008620 <xTaskPriorityInherit+0xc4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	429a      	cmp	r2, r3
 800857e:	d241      	bcs.n	8008604 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	db06      	blt.n	8008596 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008588:	4b25      	ldr	r3, [pc, #148]	; (8008620 <xTaskPriorityInherit+0xc4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6959      	ldr	r1, [r3, #20]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4a1f      	ldr	r2, [pc, #124]	; (8008624 <xTaskPriorityInherit+0xc8>)
 80085a8:	4413      	add	r3, r2
 80085aa:	4299      	cmp	r1, r3
 80085ac:	d122      	bne.n	80085f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe faf0 	bl	8006b98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085b8:	4b19      	ldr	r3, [pc, #100]	; (8008620 <xTaskPriorityInherit+0xc4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	4b18      	ldr	r3, [pc, #96]	; (8008628 <xTaskPriorityInherit+0xcc>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d903      	bls.n	80085d6 <xTaskPriorityInherit+0x7a>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	4a15      	ldr	r2, [pc, #84]	; (8008628 <xTaskPriorityInherit+0xcc>)
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4a10      	ldr	r2, [pc, #64]	; (8008624 <xTaskPriorityInherit+0xc8>)
 80085e4:	441a      	add	r2, r3
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f7fe fa76 	bl	8006ade <vListInsertEnd>
 80085f2:	e004      	b.n	80085fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <xTaskPriorityInherit+0xc4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085fe:	2301      	movs	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	e008      	b.n	8008616 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <xTaskPriorityInherit+0xc4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	429a      	cmp	r2, r3
 8008610:	d201      	bcs.n	8008616 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008616:	68fb      	ldr	r3, [r7, #12]
	}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	2000041c 	.word	0x2000041c
 8008624:	20000420 	.word	0x20000420
 8008628:	200008f8 	.word	0x200008f8

0800862c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d056      	beq.n	80086f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008642:	4b2e      	ldr	r3, [pc, #184]	; (80086fc <xTaskPriorityDisinherit+0xd0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	429a      	cmp	r2, r3
 800864a:	d00a      	beq.n	8008662 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	60fb      	str	r3, [r7, #12]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	60bb      	str	r3, [r7, #8]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008684:	1e5a      	subs	r2, r3, #1
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008692:	429a      	cmp	r2, r3
 8008694:	d02c      	beq.n	80086f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869a:	2b00      	cmp	r3, #0
 800869c:	d128      	bne.n	80086f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fa78 	bl	8006b98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <xTaskPriorityDisinherit+0xd4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d903      	bls.n	80086d0 <xTaskPriorityDisinherit+0xa4>
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	4a0c      	ldr	r2, [pc, #48]	; (8008700 <xTaskPriorityDisinherit+0xd4>)
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4a09      	ldr	r2, [pc, #36]	; (8008704 <xTaskPriorityDisinherit+0xd8>)
 80086de:	441a      	add	r2, r3
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f7fe f9f9 	bl	8006ade <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086f0:	697b      	ldr	r3, [r7, #20]
	}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	2000041c 	.word	0x2000041c
 8008700:	200008f8 	.word	0x200008f8
 8008704:	20000420 	.word	0x20000420

08008708 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008716:	2301      	movs	r3, #1
 8008718:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d06a      	beq.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	60fb      	str	r3, [r7, #12]
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d902      	bls.n	800874e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	e002      	b.n	8008754 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008752:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	429a      	cmp	r2, r3
 800875c:	d04b      	beq.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	429a      	cmp	r2, r3
 8008766:	d146      	bne.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008768:	4b25      	ldr	r3, [pc, #148]	; (8008800 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	429a      	cmp	r2, r3
 8008770:	d10a      	bne.n	8008788 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	60bb      	str	r3, [r7, #8]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	db04      	blt.n	80087a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	6959      	ldr	r1, [r3, #20]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4a13      	ldr	r2, [pc, #76]	; (8008804 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80087b6:	4413      	add	r3, r2
 80087b8:	4299      	cmp	r1, r3
 80087ba:	d11c      	bne.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	3304      	adds	r3, #4
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe f9e9 	bl	8006b98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d903      	bls.n	80087da <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	4a0c      	ldr	r2, [pc, #48]	; (8008808 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4a07      	ldr	r2, [pc, #28]	; (8008804 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80087e8:	441a      	add	r2, r3
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	3304      	adds	r3, #4
 80087ee:	4619      	mov	r1, r3
 80087f0:	4610      	mov	r0, r2
 80087f2:	f7fe f974 	bl	8006ade <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087f6:	bf00      	nop
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	2000041c 	.word	0x2000041c
 8008804:	20000420 	.word	0x20000420
 8008808:	200008f8 	.word	0x200008f8

0800880c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008810:	4b07      	ldr	r3, [pc, #28]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008818:	4b05      	ldr	r3, [pc, #20]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800881e:	3201      	adds	r2, #1
 8008820:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008822:	4b03      	ldr	r3, [pc, #12]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 8008824:	681b      	ldr	r3, [r3, #0]
	}
 8008826:	4618      	mov	r0, r3
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	2000041c 	.word	0x2000041c

08008834 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800883e:	f000 fe01 	bl	8009444 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008842:	4b1e      	ldr	r3, [pc, #120]	; (80088bc <ulTaskNotifyTake+0x88>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008848:	2b00      	cmp	r3, #0
 800884a:	d113      	bne.n	8008874 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800884c:	4b1b      	ldr	r3, [pc, #108]	; (80088bc <ulTaskNotifyTake+0x88>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800885c:	2101      	movs	r1, #1
 800885e:	6838      	ldr	r0, [r7, #0]
 8008860:	f000 f8c2 	bl	80089e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008864:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <ulTaskNotifyTake+0x8c>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008874:	f000 fe16 	bl	80094a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008878:	f000 fde4 	bl	8009444 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800887c:	4b0f      	ldr	r3, [pc, #60]	; (80088bc <ulTaskNotifyTake+0x88>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008882:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00c      	beq.n	80088a4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008890:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <ulTaskNotifyTake+0x88>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2200      	movs	r2, #0
 8008896:	655a      	str	r2, [r3, #84]	; 0x54
 8008898:	e004      	b.n	80088a4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800889a:	4b08      	ldr	r3, [pc, #32]	; (80088bc <ulTaskNotifyTake+0x88>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	3a01      	subs	r2, #1
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <ulTaskNotifyTake+0x88>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80088ae:	f000 fdf9 	bl	80094a4 <vPortExitCritical>

		return ulReturn;
 80088b2:	68fb      	ldr	r3, [r7, #12]
	}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	2000041c 	.word	0x2000041c
 80088c0:	e000ed04 	.word	0xe000ed04

080088c4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08a      	sub	sp, #40	; 0x28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	61bb      	str	r3, [r7, #24]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088ea:	f000 fe8d 	bl	8009608 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80088f2:	f3ef 8211 	mrs	r2, BASEPRI
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	617a      	str	r2, [r7, #20]
 8008908:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800890a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800890c:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008914:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	2202      	movs	r2, #2
 800891a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008928:	7ffb      	ldrb	r3, [r7, #31]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d146      	bne.n	80089bc <vTaskNotifyGiveFromISR+0xf8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	60fb      	str	r3, [r7, #12]
}
 8008948:	bf00      	nop
 800894a:	e7fe      	b.n	800894a <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800894c:	4b20      	ldr	r3, [pc, #128]	; (80089d0 <vTaskNotifyGiveFromISR+0x10c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d11d      	bne.n	8008990 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	3304      	adds	r3, #4
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe f91d 	bl	8006b98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008962:	4b1c      	ldr	r3, [pc, #112]	; (80089d4 <vTaskNotifyGiveFromISR+0x110>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d903      	bls.n	8008972 <vTaskNotifyGiveFromISR+0xae>
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	4a19      	ldr	r2, [pc, #100]	; (80089d4 <vTaskNotifyGiveFromISR+0x110>)
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <vTaskNotifyGiveFromISR+0x114>)
 8008980:	441a      	add	r2, r3
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	3304      	adds	r3, #4
 8008986:	4619      	mov	r1, r3
 8008988:	4610      	mov	r0, r2
 800898a:	f7fe f8a8 	bl	8006ade <vListInsertEnd>
 800898e:	e005      	b.n	800899c <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	3318      	adds	r3, #24
 8008994:	4619      	mov	r1, r3
 8008996:	4811      	ldr	r0, [pc, #68]	; (80089dc <vTaskNotifyGiveFromISR+0x118>)
 8008998:	f7fe f8a1 	bl	8006ade <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <vTaskNotifyGiveFromISR+0x11c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d908      	bls.n	80089bc <vTaskNotifyGiveFromISR+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <vTaskNotifyGiveFromISR+0xf2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2201      	movs	r2, #1
 80089b4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80089b6:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <vTaskNotifyGiveFromISR+0x120>)
 80089b8:	2201      	movs	r2, #1
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f383 8811 	msr	BASEPRI, r3
}
 80089c6:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80089c8:	bf00      	nop
 80089ca:	3728      	adds	r7, #40	; 0x28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000918 	.word	0x20000918
 80089d4:	200008f8 	.word	0x200008f8
 80089d8:	20000420 	.word	0x20000420
 80089dc:	200008b0 	.word	0x200008b0
 80089e0:	2000041c 	.word	0x2000041c
 80089e4:	20000904 	.word	0x20000904

080089e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089f2:	4b21      	ldr	r3, [pc, #132]	; (8008a78 <prvAddCurrentTaskToDelayedList+0x90>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f8:	4b20      	ldr	r3, [pc, #128]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe f8ca 	bl	8006b98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d10a      	bne.n	8008a22 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d007      	beq.n	8008a22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a12:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4819      	ldr	r0, [pc, #100]	; (8008a80 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a1c:	f7fe f85f 	bl	8006ade <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a20:	e026      	b.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4413      	add	r3, r2
 8008a28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a2a:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d209      	bcs.n	8008a4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a3a:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f7fe f86d 	bl	8006b26 <vListInsert>
}
 8008a4c:	e010      	b.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f7fe f863 	bl	8006b26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d202      	bcs.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a6a:	4a08      	ldr	r2, [pc, #32]	; (8008a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	6013      	str	r3, [r2, #0]
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	200008f4 	.word	0x200008f4
 8008a7c:	2000041c 	.word	0x2000041c
 8008a80:	200008dc 	.word	0x200008dc
 8008a84:	200008ac 	.word	0x200008ac
 8008a88:	200008a8 	.word	0x200008a8
 8008a8c:	20000910 	.word	0x20000910

08008a90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08a      	sub	sp, #40	; 0x28
 8008a94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a9a:	f000 fb63 	bl	8009164 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <xTimerCreateTimerTask+0x80>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d021      	beq.n	8008aea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008aae:	1d3a      	adds	r2, r7, #4
 8008ab0:	f107 0108 	add.w	r1, r7, #8
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fd ffc9 	bl	8006a50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	9202      	str	r2, [sp, #8]
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	2302      	movs	r3, #2
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	2300      	movs	r3, #0
 8008ace:	460a      	mov	r2, r1
 8008ad0:	4910      	ldr	r1, [pc, #64]	; (8008b14 <xTimerCreateTimerTask+0x84>)
 8008ad2:	4811      	ldr	r0, [pc, #68]	; (8008b18 <xTimerCreateTimerTask+0x88>)
 8008ad4:	f7fe ff06 	bl	80078e4 <xTaskCreateStatic>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	4a10      	ldr	r2, [pc, #64]	; (8008b1c <xTimerCreateTimerTask+0x8c>)
 8008adc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <xTimerCreateTimerTask+0x8c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b06:	697b      	ldr	r3, [r7, #20]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	2000094c 	.word	0x2000094c
 8008b14:	08009b48 	.word	0x08009b48
 8008b18:	08008d0d 	.word	0x08008d0d
 8008b1c:	20000950 	.word	0x20000950

08008b20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008b2e:	202c      	movs	r0, #44	; 0x2c
 8008b30:	f000 fdaa 	bl	8009688 <pvPortMalloc>
 8008b34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00d      	beq.n	8008b58 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 f805 	bl	8008b62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008b58:	697b      	ldr	r3, [r7, #20]
	}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b086      	sub	sp, #24
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10a      	bne.n	8008b8c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	617b      	str	r3, [r7, #20]
}
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d01e      	beq.n	8008bd0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008b92:	f000 fae7 	bl	8009164 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	6a3a      	ldr	r2, [r7, #32]
 8008bac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fd ff86 	bl	8006ac4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d008      	beq.n	8008bd0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bc4:	f043 0304 	orr.w	r3, r3, #4
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008bd0:	bf00      	nop
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08a      	sub	sp, #40	; 0x28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	623b      	str	r3, [r7, #32]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c06:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <xTimerGenericCommand+0x98>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d02a      	beq.n	8008c64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b05      	cmp	r3, #5
 8008c1e:	dc18      	bgt.n	8008c52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c20:	f7ff fc7e 	bl	8008520 <xTaskGetSchedulerState>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d109      	bne.n	8008c3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c2a:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <xTimerGenericCommand+0x98>)
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	f107 0110 	add.w	r1, r7, #16
 8008c32:	2300      	movs	r3, #0
 8008c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c36:	f7fe f949 	bl	8006ecc <xQueueGenericSend>
 8008c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8008c3c:	e012      	b.n	8008c64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <xTimerGenericCommand+0x98>)
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	f107 0110 	add.w	r1, r7, #16
 8008c46:	2300      	movs	r3, #0
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f7fe f93f 	bl	8006ecc <xQueueGenericSend>
 8008c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8008c50:	e008      	b.n	8008c64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c52:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <xTimerGenericCommand+0x98>)
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	f107 0110 	add.w	r1, r7, #16
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	f7fe fa33 	bl	80070c8 <xQueueGenericSendFromISR>
 8008c62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3728      	adds	r7, #40	; 0x28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	2000094c 	.word	0x2000094c

08008c74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7e:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <prvProcessExpiredTimer+0x94>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fd ff83 	bl	8006b98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d022      	beq.n	8008ce6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	699a      	ldr	r2, [r3, #24]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	18d1      	adds	r1, r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	6978      	ldr	r0, [r7, #20]
 8008cae:	f000 f8d1 	bl	8008e54 <prvInsertTimerInActiveList>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01f      	beq.n	8008cf8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	f7ff ff88 	bl	8008bd8 <xTimerGenericCommand>
 8008cc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d113      	bne.n	8008cf8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	60fb      	str	r3, [r7, #12]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	6978      	ldr	r0, [r7, #20]
 8008cfe:	4798      	blx	r3
}
 8008d00:	bf00      	nop
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20000944 	.word	0x20000944

08008d0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d14:	f107 0308 	add.w	r3, r7, #8
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f857 	bl	8008dcc <prvGetNextExpireTime>
 8008d1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4619      	mov	r1, r3
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f803 	bl	8008d30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d2a:	f000 f8d5 	bl	8008ed8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d2e:	e7f1      	b.n	8008d14 <prvTimerTask+0x8>

08008d30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d3a:	f7ff f80f 	bl	8007d5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d3e:	f107 0308 	add.w	r3, r7, #8
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f866 	bl	8008e14 <prvSampleTimeNow>
 8008d48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d130      	bne.n	8008db2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <prvProcessTimerOrBlockTask+0x3c>
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d806      	bhi.n	8008d6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d5e:	f7ff f80b 	bl	8007d78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff ff85 	bl	8008c74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d6a:	e024      	b.n	8008db6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d008      	beq.n	8008d84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <prvProcessTimerOrBlockTask+0x90>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <prvProcessTimerOrBlockTask+0x50>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <prvProcessTimerOrBlockTask+0x52>
 8008d80:	2300      	movs	r3, #0
 8008d82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d84:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <prvProcessTimerOrBlockTask+0x94>)
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4619      	mov	r1, r3
 8008d92:	f7fe fd73 	bl	800787c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d96:	f7fe ffef 	bl	8007d78 <xTaskResumeAll>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008da0:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <prvProcessTimerOrBlockTask+0x98>)
 8008da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	f3bf 8f6f 	isb	sy
}
 8008db0:	e001      	b.n	8008db6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008db2:	f7fe ffe1 	bl	8007d78 <xTaskResumeAll>
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000948 	.word	0x20000948
 8008dc4:	2000094c 	.word	0x2000094c
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	; (8008e10 <prvGetNextExpireTime+0x44>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <prvGetNextExpireTime+0x16>
 8008dde:	2201      	movs	r2, #1
 8008de0:	e000      	b.n	8008de4 <prvGetNextExpireTime+0x18>
 8008de2:	2200      	movs	r2, #0
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d105      	bne.n	8008dfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <prvGetNextExpireTime+0x44>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e001      	b.n	8008e00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e00:	68fb      	ldr	r3, [r7, #12]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000944 	.word	0x20000944

08008e14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e1c:	f7ff f84a 	bl	8007eb4 <xTaskGetTickCount>
 8008e20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <prvSampleTimeNow+0x3c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d205      	bcs.n	8008e38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e2c:	f000 f936 	bl	800909c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	e002      	b.n	8008e3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e3e:	4a04      	ldr	r2, [pc, #16]	; (8008e50 <prvSampleTimeNow+0x3c>)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e44:	68fb      	ldr	r3, [r7, #12]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000954 	.word	0x20000954

08008e54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d812      	bhi.n	8008ea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d302      	bcc.n	8008e8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	e01b      	b.n	8008ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e8e:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <prvInsertTimerInActiveList+0x7c>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3304      	adds	r3, #4
 8008e96:	4619      	mov	r1, r3
 8008e98:	4610      	mov	r0, r2
 8008e9a:	f7fd fe44 	bl	8006b26 <vListInsert>
 8008e9e:	e012      	b.n	8008ec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d206      	bcs.n	8008eb6 <prvInsertTimerInActiveList+0x62>
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d302      	bcc.n	8008eb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	e007      	b.n	8008ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eb6:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <prvInsertTimerInActiveList+0x80>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	f7fd fe30 	bl	8006b26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ec6:	697b      	ldr	r3, [r7, #20]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000948 	.word	0x20000948
 8008ed4:	20000944 	.word	0x20000944

08008ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08e      	sub	sp, #56	; 0x38
 8008edc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ede:	e0ca      	b.n	8009076 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	da18      	bge.n	8008f18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ee6:	1d3b      	adds	r3, r7, #4
 8008ee8:	3304      	adds	r3, #4
 8008eea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	61fb      	str	r3, [r7, #28]
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f0e:	6850      	ldr	r0, [r2, #4]
 8008f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f12:	6892      	ldr	r2, [r2, #8]
 8008f14:	4611      	mov	r1, r2
 8008f16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f2c0 80aa 	blt.w	8009074 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fd fe31 	bl	8006b98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f36:	463b      	mov	r3, r7
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff ff6b 	bl	8008e14 <prvSampleTimeNow>
 8008f3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b09      	cmp	r3, #9
 8008f44:	f200 8097 	bhi.w	8009076 <prvProcessReceivedCommands+0x19e>
 8008f48:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <prvProcessReceivedCommands+0x78>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008f79 	.word	0x08008f79
 8008f54:	08008f79 	.word	0x08008f79
 8008f58:	08008f79 	.word	0x08008f79
 8008f5c:	08008fed 	.word	0x08008fed
 8008f60:	08009001 	.word	0x08009001
 8008f64:	0800904b 	.word	0x0800904b
 8008f68:	08008f79 	.word	0x08008f79
 8008f6c:	08008f79 	.word	0x08008f79
 8008f70:	08008fed 	.word	0x08008fed
 8008f74:	08009001 	.word	0x08009001
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	18d1      	adds	r1, r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f98:	f7ff ff5c 	bl	8008e54 <prvInsertTimerInActiveList>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d069      	beq.n	8009076 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d05e      	beq.n	8009076 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	441a      	add	r2, r3
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fca:	f7ff fe05 	bl	8008bd8 <xTimerGenericCommand>
 8008fce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d14f      	bne.n	8009076 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	61bb      	str	r3, [r7, #24]
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ff2:	f023 0301 	bic.w	r3, r3, #1
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ffe:	e03a      	b.n	8009076 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009006:	f043 0301 	orr.w	r3, r3, #1
 800900a:	b2da      	uxtb	r2, r3
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	617b      	str	r3, [r7, #20]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	18d1      	adds	r1, r2, r3
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009044:	f7ff ff06 	bl	8008e54 <prvInsertTimerInActiveList>
					break;
 8009048:	e015      	b.n	8009076 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d103      	bne.n	8009060 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905a:	f000 fbe1 	bl	8009820 <vPortFree>
 800905e:	e00a      	b.n	8009076 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009066:	f023 0301 	bic.w	r3, r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009072:	e000      	b.n	8009076 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009074:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009076:	4b08      	ldr	r3, [pc, #32]	; (8009098 <prvProcessReceivedCommands+0x1c0>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	1d39      	adds	r1, r7, #4
 800907c:	2200      	movs	r2, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe f8be 	bl	8007200 <xQueueReceive>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	f47f af2a 	bne.w	8008ee0 <prvProcessReceivedCommands+0x8>
	}
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	3730      	adds	r7, #48	; 0x30
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	2000094c 	.word	0x2000094c

0800909c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090a2:	e048      	b.n	8009136 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090a4:	4b2d      	ldr	r3, [pc, #180]	; (800915c <prvSwitchTimerLists+0xc0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ae:	4b2b      	ldr	r3, [pc, #172]	; (800915c <prvSwitchTimerLists+0xc0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fd fd6b 	bl	8006b98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d02e      	beq.n	8009136 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4413      	add	r3, r2
 80090e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d90e      	bls.n	8009108 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090f6:	4b19      	ldr	r3, [pc, #100]	; (800915c <prvSwitchTimerLists+0xc0>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4619      	mov	r1, r3
 8009100:	4610      	mov	r0, r2
 8009102:	f7fd fd10 	bl	8006b26 <vListInsert>
 8009106:	e016      	b.n	8009136 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009108:	2300      	movs	r3, #0
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	2300      	movs	r3, #0
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	2100      	movs	r1, #0
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f7ff fd60 	bl	8008bd8 <xTimerGenericCommand>
 8009118:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	603b      	str	r3, [r7, #0]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <prvSwitchTimerLists+0xc0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1b1      	bne.n	80090a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009140:	4b06      	ldr	r3, [pc, #24]	; (800915c <prvSwitchTimerLists+0xc0>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009146:	4b06      	ldr	r3, [pc, #24]	; (8009160 <prvSwitchTimerLists+0xc4>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a04      	ldr	r2, [pc, #16]	; (800915c <prvSwitchTimerLists+0xc0>)
 800914c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800914e:	4a04      	ldr	r2, [pc, #16]	; (8009160 <prvSwitchTimerLists+0xc4>)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	6013      	str	r3, [r2, #0]
}
 8009154:	bf00      	nop
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	20000944 	.word	0x20000944
 8009160:	20000948 	.word	0x20000948

08009164 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800916a:	f000 f96b 	bl	8009444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800916e:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <prvCheckForValidListAndQueue+0x60>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d120      	bne.n	80091b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009176:	4814      	ldr	r0, [pc, #80]	; (80091c8 <prvCheckForValidListAndQueue+0x64>)
 8009178:	f7fd fc84 	bl	8006a84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800917c:	4813      	ldr	r0, [pc, #76]	; (80091cc <prvCheckForValidListAndQueue+0x68>)
 800917e:	f7fd fc81 	bl	8006a84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009182:	4b13      	ldr	r3, [pc, #76]	; (80091d0 <prvCheckForValidListAndQueue+0x6c>)
 8009184:	4a10      	ldr	r2, [pc, #64]	; (80091c8 <prvCheckForValidListAndQueue+0x64>)
 8009186:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009188:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <prvCheckForValidListAndQueue+0x70>)
 800918a:	4a10      	ldr	r2, [pc, #64]	; (80091cc <prvCheckForValidListAndQueue+0x68>)
 800918c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800918e:	2300      	movs	r3, #0
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <prvCheckForValidListAndQueue+0x74>)
 8009194:	4a11      	ldr	r2, [pc, #68]	; (80091dc <prvCheckForValidListAndQueue+0x78>)
 8009196:	2110      	movs	r1, #16
 8009198:	200a      	movs	r0, #10
 800919a:	f7fd fd8f 	bl	8006cbc <xQueueGenericCreateStatic>
 800919e:	4603      	mov	r3, r0
 80091a0:	4a08      	ldr	r2, [pc, #32]	; (80091c4 <prvCheckForValidListAndQueue+0x60>)
 80091a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091a4:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <prvCheckForValidListAndQueue+0x60>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d005      	beq.n	80091b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091ac:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <prvCheckForValidListAndQueue+0x60>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	490b      	ldr	r1, [pc, #44]	; (80091e0 <prvCheckForValidListAndQueue+0x7c>)
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe fb38 	bl	8007828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091b8:	f000 f974 	bl	80094a4 <vPortExitCritical>
}
 80091bc:	bf00      	nop
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	2000094c 	.word	0x2000094c
 80091c8:	2000091c 	.word	0x2000091c
 80091cc:	20000930 	.word	0x20000930
 80091d0:	20000944 	.word	0x20000944
 80091d4:	20000948 	.word	0x20000948
 80091d8:	200009f8 	.word	0x200009f8
 80091dc:	20000958 	.word	0x20000958
 80091e0:	08009b50 	.word	0x08009b50

080091e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3b04      	subs	r3, #4
 80091f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3b04      	subs	r3, #4
 8009202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f023 0201 	bic.w	r2, r3, #1
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3b04      	subs	r3, #4
 8009212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009214:	4a0c      	ldr	r2, [pc, #48]	; (8009248 <pxPortInitialiseStack+0x64>)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3b14      	subs	r3, #20
 800921e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3b04      	subs	r3, #4
 800922a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f06f 0202 	mvn.w	r2, #2
 8009232:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3b20      	subs	r3, #32
 8009238:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800923a:	68fb      	ldr	r3, [r7, #12]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	0800924d 	.word	0x0800924d

0800924c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009256:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <prvTaskExitError+0x54>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d00a      	beq.n	8009276 <prvTaskExitError+0x2a>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <prvTaskExitError+0x28>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	60bb      	str	r3, [r7, #8]
}
 8009288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800928a:	bf00      	nop
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0fc      	beq.n	800928c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009292:	bf00      	nop
 8009294:	bf00      	nop
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	2000000c 	.word	0x2000000c
	...

080092b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <pxCurrentTCBConst2>)
 80092b2:	6819      	ldr	r1, [r3, #0]
 80092b4:	6808      	ldr	r0, [r1, #0]
 80092b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ba:	f380 8809 	msr	PSP, r0
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8811 	msr	BASEPRI, r0
 80092ca:	4770      	bx	lr
 80092cc:	f3af 8000 	nop.w

080092d0 <pxCurrentTCBConst2>:
 80092d0:	2000041c 	.word	0x2000041c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop

080092d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092d8:	4808      	ldr	r0, [pc, #32]	; (80092fc <prvPortStartFirstTask+0x24>)
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	6800      	ldr	r0, [r0, #0]
 80092de:	f380 8808 	msr	MSP, r0
 80092e2:	f04f 0000 	mov.w	r0, #0
 80092e6:	f380 8814 	msr	CONTROL, r0
 80092ea:	b662      	cpsie	i
 80092ec:	b661      	cpsie	f
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	df00      	svc	0
 80092f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092fa:	bf00      	nop
 80092fc:	e000ed08 	.word	0xe000ed08

08009300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009306:	4b46      	ldr	r3, [pc, #280]	; (8009420 <xPortStartScheduler+0x120>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a46      	ldr	r2, [pc, #280]	; (8009424 <xPortStartScheduler+0x124>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d10a      	bne.n	8009326 <xPortStartScheduler+0x26>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	613b      	str	r3, [r7, #16]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009326:	4b3e      	ldr	r3, [pc, #248]	; (8009420 <xPortStartScheduler+0x120>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a3f      	ldr	r2, [pc, #252]	; (8009428 <xPortStartScheduler+0x128>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d10a      	bne.n	8009346 <xPortStartScheduler+0x46>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	60fb      	str	r3, [r7, #12]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009346:	4b39      	ldr	r3, [pc, #228]	; (800942c <xPortStartScheduler+0x12c>)
 8009348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	22ff      	movs	r2, #255	; 0xff
 8009356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009368:	b2da      	uxtb	r2, r3
 800936a:	4b31      	ldr	r3, [pc, #196]	; (8009430 <xPortStartScheduler+0x130>)
 800936c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800936e:	4b31      	ldr	r3, [pc, #196]	; (8009434 <xPortStartScheduler+0x134>)
 8009370:	2207      	movs	r2, #7
 8009372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009374:	e009      	b.n	800938a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009376:	4b2f      	ldr	r3, [pc, #188]	; (8009434 <xPortStartScheduler+0x134>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3b01      	subs	r3, #1
 800937c:	4a2d      	ldr	r2, [pc, #180]	; (8009434 <xPortStartScheduler+0x134>)
 800937e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	b2db      	uxtb	r3, r3
 8009388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009392:	2b80      	cmp	r3, #128	; 0x80
 8009394:	d0ef      	beq.n	8009376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009396:	4b27      	ldr	r3, [pc, #156]	; (8009434 <xPortStartScheduler+0x134>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f1c3 0307 	rsb	r3, r3, #7
 800939e:	2b04      	cmp	r3, #4
 80093a0:	d00a      	beq.n	80093b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60bb      	str	r3, [r7, #8]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093b8:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <xPortStartScheduler+0x134>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	4a1d      	ldr	r2, [pc, #116]	; (8009434 <xPortStartScheduler+0x134>)
 80093c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093c2:	4b1c      	ldr	r3, [pc, #112]	; (8009434 <xPortStartScheduler+0x134>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093ca:	4a1a      	ldr	r2, [pc, #104]	; (8009434 <xPortStartScheduler+0x134>)
 80093cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093d6:	4b18      	ldr	r3, [pc, #96]	; (8009438 <xPortStartScheduler+0x138>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a17      	ldr	r2, [pc, #92]	; (8009438 <xPortStartScheduler+0x138>)
 80093dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093e2:	4b15      	ldr	r3, [pc, #84]	; (8009438 <xPortStartScheduler+0x138>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a14      	ldr	r2, [pc, #80]	; (8009438 <xPortStartScheduler+0x138>)
 80093e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80093ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093ee:	f000 f8dd 	bl	80095ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <xPortStartScheduler+0x13c>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093f8:	f000 f8fc 	bl	80095f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093fc:	4b10      	ldr	r3, [pc, #64]	; (8009440 <xPortStartScheduler+0x140>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a0f      	ldr	r2, [pc, #60]	; (8009440 <xPortStartScheduler+0x140>)
 8009402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009408:	f7ff ff66 	bl	80092d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800940c:	f7fe fe1c 	bl	8008048 <vTaskSwitchContext>
	prvTaskExitError();
 8009410:	f7ff ff1c 	bl	800924c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	e000ed00 	.word	0xe000ed00
 8009424:	410fc271 	.word	0x410fc271
 8009428:	410fc270 	.word	0x410fc270
 800942c:	e000e400 	.word	0xe000e400
 8009430:	20000a48 	.word	0x20000a48
 8009434:	20000a4c 	.word	0x20000a4c
 8009438:	e000ed20 	.word	0xe000ed20
 800943c:	2000000c 	.word	0x2000000c
 8009440:	e000ef34 	.word	0xe000ef34

08009444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	607b      	str	r3, [r7, #4]
}
 800945c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800945e:	4b0f      	ldr	r3, [pc, #60]	; (800949c <vPortEnterCritical+0x58>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	4a0d      	ldr	r2, [pc, #52]	; (800949c <vPortEnterCritical+0x58>)
 8009466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009468:	4b0c      	ldr	r3, [pc, #48]	; (800949c <vPortEnterCritical+0x58>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d10f      	bne.n	8009490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <vPortEnterCritical+0x5c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <vPortEnterCritical+0x4c>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	603b      	str	r3, [r7, #0]
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <vPortEnterCritical+0x4a>
	}
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	2000000c 	.word	0x2000000c
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094aa:	4b12      	ldr	r3, [pc, #72]	; (80094f4 <vPortExitCritical+0x50>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <vPortExitCritical+0x24>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	607b      	str	r3, [r7, #4]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094c8:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <vPortExitCritical+0x50>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	4a09      	ldr	r2, [pc, #36]	; (80094f4 <vPortExitCritical+0x50>)
 80094d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094d2:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <vPortExitCritical+0x50>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d105      	bne.n	80094e6 <vPortExitCritical+0x42>
 80094da:	2300      	movs	r3, #0
 80094dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	f383 8811 	msr	BASEPRI, r3
}
 80094e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	2000000c 	.word	0x2000000c
	...

08009500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009500:	f3ef 8009 	mrs	r0, PSP
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	4b15      	ldr	r3, [pc, #84]	; (8009560 <pxCurrentTCBConst>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	f01e 0f10 	tst.w	lr, #16
 8009510:	bf08      	it	eq
 8009512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951a:	6010      	str	r0, [r2, #0]
 800951c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009524:	f380 8811 	msr	BASEPRI, r0
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f7fe fd8a 	bl	8008048 <vTaskSwitchContext>
 8009534:	f04f 0000 	mov.w	r0, #0
 8009538:	f380 8811 	msr	BASEPRI, r0
 800953c:	bc09      	pop	{r0, r3}
 800953e:	6819      	ldr	r1, [r3, #0]
 8009540:	6808      	ldr	r0, [r1, #0]
 8009542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009546:	f01e 0f10 	tst.w	lr, #16
 800954a:	bf08      	it	eq
 800954c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009550:	f380 8809 	msr	PSP, r0
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w

08009560 <pxCurrentTCBConst>:
 8009560:	2000041c 	.word	0x2000041c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop

08009568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	607b      	str	r3, [r7, #4]
}
 8009580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009582:	f7fe fca7 	bl	8007ed4 <xTaskIncrementTick>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d003      	beq.n	8009594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800958c:	4b06      	ldr	r3, [pc, #24]	; (80095a8 <xPortSysTickHandler+0x40>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	2300      	movs	r3, #0
 8009596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f383 8811 	msr	BASEPRI, r3
}
 800959e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095b0:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <vPortSetupTimerInterrupt+0x34>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <vPortSetupTimerInterrupt+0x38>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <vPortSetupTimerInterrupt+0x3c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <vPortSetupTimerInterrupt+0x40>)
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	099b      	lsrs	r3, r3, #6
 80095c8:	4a09      	ldr	r2, [pc, #36]	; (80095f0 <vPortSetupTimerInterrupt+0x44>)
 80095ca:	3b01      	subs	r3, #1
 80095cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ce:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <vPortSetupTimerInterrupt+0x34>)
 80095d0:	2207      	movs	r2, #7
 80095d2:	601a      	str	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	e000e010 	.word	0xe000e010
 80095e4:	e000e018 	.word	0xe000e018
 80095e8:	20000000 	.word	0x20000000
 80095ec:	10624dd3 	.word	0x10624dd3
 80095f0:	e000e014 	.word	0xe000e014

080095f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009604 <vPortEnableVFP+0x10>
 80095f8:	6801      	ldr	r1, [r0, #0]
 80095fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80095fe:	6001      	str	r1, [r0, #0]
 8009600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009602:	bf00      	nop
 8009604:	e000ed88 	.word	0xe000ed88

08009608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800960e:	f3ef 8305 	mrs	r3, IPSR
 8009612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b0f      	cmp	r3, #15
 8009618:	d914      	bls.n	8009644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800961a:	4a17      	ldr	r2, [pc, #92]	; (8009678 <vPortValidateInterruptPriority+0x70>)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009624:	4b15      	ldr	r3, [pc, #84]	; (800967c <vPortValidateInterruptPriority+0x74>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	7afa      	ldrb	r2, [r7, #11]
 800962a:	429a      	cmp	r2, r3
 800962c:	d20a      	bcs.n	8009644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	607b      	str	r3, [r7, #4]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009644:	4b0e      	ldr	r3, [pc, #56]	; (8009680 <vPortValidateInterruptPriority+0x78>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800964c:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <vPortValidateInterruptPriority+0x7c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d90a      	bls.n	800966a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	603b      	str	r3, [r7, #0]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <vPortValidateInterruptPriority+0x60>
	}
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	e000e3f0 	.word	0xe000e3f0
 800967c:	20000a48 	.word	0x20000a48
 8009680:	e000ed0c 	.word	0xe000ed0c
 8009684:	20000a4c 	.word	0x20000a4c

08009688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009690:	2300      	movs	r3, #0
 8009692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009694:	f7fe fb62 	bl	8007d5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009698:	4b5b      	ldr	r3, [pc, #364]	; (8009808 <pvPortMalloc+0x180>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096a0:	f000 f920 	bl	80098e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096a4:	4b59      	ldr	r3, [pc, #356]	; (800980c <pvPortMalloc+0x184>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4013      	ands	r3, r2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f040 8093 	bne.w	80097d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01d      	beq.n	80096f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80096b8:	2208      	movs	r2, #8
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4413      	add	r3, r2
 80096be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d014      	beq.n	80096f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	3308      	adds	r3, #8
 80096d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <pvPortMalloc+0x6c>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	617b      	str	r3, [r7, #20]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d06e      	beq.n	80097d8 <pvPortMalloc+0x150>
 80096fa:	4b45      	ldr	r3, [pc, #276]	; (8009810 <pvPortMalloc+0x188>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	d869      	bhi.n	80097d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009704:	4b43      	ldr	r3, [pc, #268]	; (8009814 <pvPortMalloc+0x18c>)
 8009706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009708:	4b42      	ldr	r3, [pc, #264]	; (8009814 <pvPortMalloc+0x18c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800970e:	e004      	b.n	800971a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d903      	bls.n	800972c <pvPortMalloc+0xa4>
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1f1      	bne.n	8009710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800972c:	4b36      	ldr	r3, [pc, #216]	; (8009808 <pvPortMalloc+0x180>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009732:	429a      	cmp	r2, r3
 8009734:	d050      	beq.n	80097d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2208      	movs	r2, #8
 800973c:	4413      	add	r3, r2
 800973e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	1ad2      	subs	r2, r2, r3
 8009750:	2308      	movs	r3, #8
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	429a      	cmp	r2, r3
 8009756:	d91f      	bls.n	8009798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4413      	add	r3, r2
 800975e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <pvPortMalloc+0xf8>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	613b      	str	r3, [r7, #16]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	1ad2      	subs	r2, r2, r3
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009792:	69b8      	ldr	r0, [r7, #24]
 8009794:	f000 f908 	bl	80099a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <pvPortMalloc+0x188>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	4a1b      	ldr	r2, [pc, #108]	; (8009810 <pvPortMalloc+0x188>)
 80097a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097a6:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <pvPortMalloc+0x188>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <pvPortMalloc+0x190>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d203      	bcs.n	80097ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097b2:	4b17      	ldr	r3, [pc, #92]	; (8009810 <pvPortMalloc+0x188>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a18      	ldr	r2, [pc, #96]	; (8009818 <pvPortMalloc+0x190>)
 80097b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	4b13      	ldr	r3, [pc, #76]	; (800980c <pvPortMalloc+0x184>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	431a      	orrs	r2, r3
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <pvPortMalloc+0x194>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3301      	adds	r3, #1
 80097d4:	4a11      	ldr	r2, [pc, #68]	; (800981c <pvPortMalloc+0x194>)
 80097d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097d8:	f7fe face 	bl	8007d78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <pvPortMalloc+0x174>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	60fb      	str	r3, [r7, #12]
}
 80097f8:	bf00      	nop
 80097fa:	e7fe      	b.n	80097fa <pvPortMalloc+0x172>
	return pvReturn;
 80097fc:	69fb      	ldr	r3, [r7, #28]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3728      	adds	r7, #40	; 0x28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	200019f8 	.word	0x200019f8
 800980c:	20001a0c 	.word	0x20001a0c
 8009810:	200019fc 	.word	0x200019fc
 8009814:	200019f0 	.word	0x200019f0
 8009818:	20001a00 	.word	0x20001a00
 800981c:	20001a04 	.word	0x20001a04

08009820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d04d      	beq.n	80098ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009832:	2308      	movs	r3, #8
 8009834:	425b      	negs	r3, r3
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4413      	add	r3, r2
 800983a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	4b24      	ldr	r3, [pc, #144]	; (80098d8 <vPortFree+0xb8>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4013      	ands	r3, r2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10a      	bne.n	8009864 <vPortFree+0x44>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	60fb      	str	r3, [r7, #12]
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00a      	beq.n	8009882 <vPortFree+0x62>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60bb      	str	r3, [r7, #8]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <vPortFree+0xb8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4013      	ands	r3, r2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d01e      	beq.n	80098ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d11a      	bne.n	80098ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4b0e      	ldr	r3, [pc, #56]	; (80098d8 <vPortFree+0xb8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	43db      	mvns	r3, r3
 80098a2:	401a      	ands	r2, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098a8:	f7fe fa58 	bl	8007d5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <vPortFree+0xbc>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4413      	add	r3, r2
 80098b6:	4a09      	ldr	r2, [pc, #36]	; (80098dc <vPortFree+0xbc>)
 80098b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098ba:	6938      	ldr	r0, [r7, #16]
 80098bc:	f000 f874 	bl	80099a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <vPortFree+0xc0>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3301      	adds	r3, #1
 80098c6:	4a06      	ldr	r2, [pc, #24]	; (80098e0 <vPortFree+0xc0>)
 80098c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098ca:	f7fe fa55 	bl	8007d78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ce:	bf00      	nop
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20001a0c 	.word	0x20001a0c
 80098dc:	200019fc 	.word	0x200019fc
 80098e0:	20001a08 	.word	0x20001a08

080098e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098ea:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80098ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098f0:	4b27      	ldr	r3, [pc, #156]	; (8009990 <prvHeapInit+0xac>)
 80098f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00c      	beq.n	8009918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3307      	adds	r3, #7
 8009902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0307 	bic.w	r3, r3, #7
 800990a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	4a1f      	ldr	r2, [pc, #124]	; (8009990 <prvHeapInit+0xac>)
 8009914:	4413      	add	r3, r2
 8009916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800991c:	4a1d      	ldr	r2, [pc, #116]	; (8009994 <prvHeapInit+0xb0>)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009922:	4b1c      	ldr	r3, [pc, #112]	; (8009994 <prvHeapInit+0xb0>)
 8009924:	2200      	movs	r2, #0
 8009926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	4413      	add	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009930:	2208      	movs	r2, #8
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0307 	bic.w	r3, r3, #7
 800993e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4a15      	ldr	r2, [pc, #84]	; (8009998 <prvHeapInit+0xb4>)
 8009944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <prvHeapInit+0xb4>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2200      	movs	r2, #0
 800994c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800994e:	4b12      	ldr	r3, [pc, #72]	; (8009998 <prvHeapInit+0xb4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009964:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <prvHeapInit+0xb4>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	4a0a      	ldr	r2, [pc, #40]	; (800999c <prvHeapInit+0xb8>)
 8009972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	4a09      	ldr	r2, [pc, #36]	; (80099a0 <prvHeapInit+0xbc>)
 800997a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800997c:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <prvHeapInit+0xc0>)
 800997e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009982:	601a      	str	r2, [r3, #0]
}
 8009984:	bf00      	nop
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	20000a50 	.word	0x20000a50
 8009994:	200019f0 	.word	0x200019f0
 8009998:	200019f8 	.word	0x200019f8
 800999c:	20001a00 	.word	0x20001a00
 80099a0:	200019fc 	.word	0x200019fc
 80099a4:	20001a0c 	.word	0x20001a0c

080099a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099b0:	4b28      	ldr	r3, [pc, #160]	; (8009a54 <prvInsertBlockIntoFreeList+0xac>)
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	e002      	b.n	80099bc <prvInsertBlockIntoFreeList+0x14>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d8f7      	bhi.n	80099b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	4413      	add	r3, r2
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d108      	bne.n	80099ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	441a      	add	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	441a      	add	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d118      	bne.n	8009a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b15      	ldr	r3, [pc, #84]	; (8009a58 <prvInsertBlockIntoFreeList+0xb0>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d00d      	beq.n	8009a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	441a      	add	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	e008      	b.n	8009a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a26:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <prvInsertBlockIntoFreeList+0xb0>)
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	e003      	b.n	8009a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d002      	beq.n	8009a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a46:	bf00      	nop
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	200019f0 	.word	0x200019f0
 8009a58:	200019f8 	.word	0x200019f8

08009a5c <__libc_init_array>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	4d0d      	ldr	r5, [pc, #52]	; (8009a94 <__libc_init_array+0x38>)
 8009a60:	4c0d      	ldr	r4, [pc, #52]	; (8009a98 <__libc_init_array+0x3c>)
 8009a62:	1b64      	subs	r4, r4, r5
 8009a64:	10a4      	asrs	r4, r4, #2
 8009a66:	2600      	movs	r6, #0
 8009a68:	42a6      	cmp	r6, r4
 8009a6a:	d109      	bne.n	8009a80 <__libc_init_array+0x24>
 8009a6c:	4d0b      	ldr	r5, [pc, #44]	; (8009a9c <__libc_init_array+0x40>)
 8009a6e:	4c0c      	ldr	r4, [pc, #48]	; (8009aa0 <__libc_init_array+0x44>)
 8009a70:	f000 f82e 	bl	8009ad0 <_init>
 8009a74:	1b64      	subs	r4, r4, r5
 8009a76:	10a4      	asrs	r4, r4, #2
 8009a78:	2600      	movs	r6, #0
 8009a7a:	42a6      	cmp	r6, r4
 8009a7c:	d105      	bne.n	8009a8a <__libc_init_array+0x2e>
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
 8009a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a84:	4798      	blx	r3
 8009a86:	3601      	adds	r6, #1
 8009a88:	e7ee      	b.n	8009a68 <__libc_init_array+0xc>
 8009a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a8e:	4798      	blx	r3
 8009a90:	3601      	adds	r6, #1
 8009a92:	e7f2      	b.n	8009a7a <__libc_init_array+0x1e>
 8009a94:	08009bcc 	.word	0x08009bcc
 8009a98:	08009bcc 	.word	0x08009bcc
 8009a9c:	08009bcc 	.word	0x08009bcc
 8009aa0:	08009bd0 	.word	0x08009bd0

08009aa4 <memcpy>:
 8009aa4:	440a      	add	r2, r1
 8009aa6:	4291      	cmp	r1, r2
 8009aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aac:	d100      	bne.n	8009ab0 <memcpy+0xc>
 8009aae:	4770      	bx	lr
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aba:	4291      	cmp	r1, r2
 8009abc:	d1f9      	bne.n	8009ab2 <memcpy+0xe>
 8009abe:	bd10      	pop	{r4, pc}

08009ac0 <memset>:
 8009ac0:	4402      	add	r2, r0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d100      	bne.n	8009aca <memset+0xa>
 8009ac8:	4770      	bx	lr
 8009aca:	f803 1b01 	strb.w	r1, [r3], #1
 8009ace:	e7f9      	b.n	8009ac4 <memset+0x4>

08009ad0 <_init>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	bf00      	nop
 8009ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad6:	bc08      	pop	{r3}
 8009ad8:	469e      	mov	lr, r3
 8009ada:	4770      	bx	lr

08009adc <_fini>:
 8009adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ade:	bf00      	nop
 8009ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae2:	bc08      	pop	{r3}
 8009ae4:	469e      	mov	lr, r3
 8009ae6:	4770      	bx	lr
