
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c3c  08008c3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008c3c  08008c3c  00018c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c44  08008c44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b14  20000010  08008c5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b24  08008c5c  00021b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000275fb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b28  00000000  00000000  0004763b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  0004c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001880  00000000  00000000  0004dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6c7  00000000  00000000  0004f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd7f  00000000  00000000  00079b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101991  00000000  00000000  00099896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019b227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce0  00000000  00000000  0019b27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b70 	.word	0x08008b70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008b70 	.word	0x08008b70

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;
CANMsg *msg;



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b094      	sub	sp, #80	; 0x50
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef pHeader;
	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pHeader, rxData);
 80004d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f001 f942 	bl	8001764 <HAL_CAN_GetRxMessage>
//	canSend(pHeader.StdId, rxData);
	CANMsg msg={ &pHeader, rxData};
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	2224      	movs	r2, #36	; 0x24
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f008 fb39 	bl	8008b60 <memset>
 80004ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004f8:	60fb      	str	r3, [r7, #12]
	xQueueSendToBackFromISR(CAN_Rx_Queue,&(msg), portMAX_DELAY );
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80004fc:	6818      	ldr	r0, [r3, #0]
 80004fe:	f107 0108 	add.w	r1, r7, #8
 8000502:	2300      	movs	r3, #0
 8000504:	f04f 32ff 	mov.w	r2, #4294967295
 8000508:	f005 feb4 	bl	8006274 <xQueueGenericSendFromISR>


}
 800050c:	bf00      	nop
 800050e:	3750      	adds	r7, #80	; 0x50
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20001900 	.word	0x20001900

08000518 <getCANMessage>:


void getCANMessage() {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	//Provera ima li primljene poruke
	xQueueReceive(CAN_Rx_Queue, &(msg), 0);
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <getCANMessage+0x38>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2200      	movs	r2, #0
 8000524:	490b      	ldr	r1, [pc, #44]	; (8000554 <getCANMessage+0x3c>)
 8000526:	4618      	mov	r0, r3
 8000528:	f005 ff40 	bl	80063ac <xQueueReceive>

	uint32_t messageID = msg->pHeader.StdId;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <getCANMessage+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	607b      	str	r3, [r7, #4]
	uint8_t *rxData = msg->data;
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <getCANMessage+0x3c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	331c      	adds	r3, #28
 800053a:	603b      	str	r3, [r7, #0]
	canSend(messageID, rxData);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	b29b      	uxth	r3, r3
 8000540:	6839      	ldr	r1, [r7, #0]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f87c 	bl	8000640 <canSend>


}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20001900 	.word	0x20001900
 8000554:	20001908 	.word	0x20001908

08000558 <can_task>:


static void can_task(void *parameters){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	while(1){
		if(uxQueueSpacesAvailable(CAN_Rx_Queue)<10){
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <can_task+0x3c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f006 f90d 	bl	8006784 <uxQueueSpacesAvailable>
 800056a:	4603      	mov	r3, r0
 800056c:	2b09      	cmp	r3, #9
 800056e:	d8f7      	bhi.n	8000560 <can_task+0x8>
			xSemaphoreTake(CANMutex, portMAX_DELAY);
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <can_task+0x40>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f04f 31ff 	mov.w	r1, #4294967295
 8000578:	4618      	mov	r0, r3
 800057a:	f005 fff7 	bl	800656c <xQueueSemaphoreTake>
			getCANMessage();
 800057e:	f7ff ffcb 	bl	8000518 <getCANMessage>
			xSemaphoreGive(CANMutex);
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <can_task+0x40>)
 8000584:	6818      	ldr	r0, [r3, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	f005 fd74 	bl	8006078 <xQueueGenericSend>
		if(uxQueueSpacesAvailable(CAN_Rx_Queue)<10){
 8000590:	e7e6      	b.n	8000560 <can_task+0x8>
 8000592:	bf00      	nop
 8000594:	20001900 	.word	0x20001900
 8000598:	20001910 	.word	0x20001910

0800059c <create_CanTask>:
		}
	}
}
void create_CanTask(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af02      	add	r7, sp, #8
		CAN_Rx_Queue = xQueueCreate(10, sizeof(struct CANMessage));
 80005a2:	2200      	movs	r2, #0
 80005a4:	2124      	movs	r1, #36	; 0x24
 80005a6:	200a      	movs	r0, #10
 80005a8:	f005 fcd6 	bl	8005f58 <xQueueGenericCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <create_CanTask+0x44>)
 80005b0:	6013      	str	r3, [r2, #0]
		CANMutex = xSemaphoreCreateMutex();
 80005b2:	2001      	movs	r0, #1
 80005b4:	f005 fd47 	bl	8006046 <xQueueCreateMutex>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <create_CanTask+0x48>)
 80005bc:	6013      	str	r3, [r2, #0]
		xTaskCreate(can_task, "Can_task", 128, NULL, 30, &canHandler);
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <create_CanTask+0x4c>)
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	231e      	movs	r3, #30
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	4908      	ldr	r1, [pc, #32]	; (80005ec <create_CanTask+0x50>)
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <create_CanTask+0x54>)
 80005ce:	f006 fae0 	bl	8006b92 <xTaskCreate>
		HAL_CAN_Start(&hcan1);
 80005d2:	4808      	ldr	r0, [pc, #32]	; (80005f4 <create_CanTask+0x58>)
 80005d4:	f000 ffa7 	bl	8001526 <HAL_CAN_Start>
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20001900 	.word	0x20001900
 80005e4:	20001910 	.word	0x20001910
 80005e8:	20001904 	.word	0x20001904
 80005ec:	08008b88 	.word	0x08008b88
 80005f0:	08000559 	.word	0x08000559
 80005f4:	20001914 	.word	0x20001914

080005f8 <Can_Init>:

void Can_Init(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0


	CAN_FilterTypeDef CanFilter;
	CanFilter.FilterIdHigh = 0x0000;
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
	CanFilter.FilterIdLow = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
	CanFilter.FilterMaskIdHigh = 0x0000;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
	CanFilter.FilterMaskIdLow = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
	CanFilter.FilterBank = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
	CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
	CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 800061e:	2301      	movs	r3, #1
 8000620:	623b      	str	r3, [r7, #32]


	HAL_CAN_ConfigFilter(&hcan1, &CanFilter);
 8000622:	463b      	mov	r3, r7
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <Can_Init+0x44>)
 8000628:	f000 feb3 	bl	8001392 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800062c:	2102      	movs	r1, #2
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <Can_Init+0x44>)
 8000630:	f001 f9aa 	bl	8001988 <HAL_CAN_ActivateNotification>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20001914 	.word	0x20001914

08000640 <canSend>:


void canSend(uint16_t id, uint8_t canMsg[]){
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	80fb      	strh	r3, [r7, #6]

	CAN_TxHeaderTypeDef pHeader;
		pHeader.DLC = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	61bb      	str	r3, [r7, #24]
		pHeader.RTR = CAN_RTR_DATA;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
		pHeader.IDE = CAN_ID_STD;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
		pHeader.StdId = id;
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	60bb      	str	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1,&pHeader , canMsg, &TxMailbox);
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <canSend+0x34>)
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <canSend+0x38>)
 8000666:	f000 ffa2 	bl	80015ae <HAL_CAN_AddTxMessage>
//	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000190c 	.word	0x2000190c
 8000678:	20001914 	.word	0x20001914

0800067c <HAL_TIM_IC_CaptureCallback>:
#include "task.h"
#include "tim.h"



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7f1b      	ldrb	r3, [r3, #28]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d130      	bne.n	80006ee <HAL_TIM_IC_CaptureCallback+0x72>
		// Read the IC value
		float ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800068c:	2104      	movs	r1, #4
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f003 fd58 	bl	8004144 <HAL_TIM_ReadCapturedValue>
 8000694:	ee07 0a90 	vmov	s15, r0
 8000698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800069c:	edc7 7a03 	vstr	s15, [r7, #12]
		if(ICValue!=0){
 80006a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80006a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ac:	d01f      	beq.n	80006ee <HAL_TIM_IC_CaptureCallback+0x72>
			Duty = 100-(HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) *100)/ICValue;
 80006ae:	2100      	movs	r1, #0
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f003 fd47 	bl	8004144 <HAL_TIM_ReadCapturedValue>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2264      	movs	r2, #100	; 0x64
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80006c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80006ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ce:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80006f8 <HAL_TIM_IC_CaptureCallback+0x7c>
 80006d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x80>)
 80006d8:	edc3 7a00 	vstr	s15, [r3]
			Frequency = 4000000/ICValue;
 80006dc:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000700 <HAL_TIM_IC_CaptureCallback+0x84>
 80006e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80006e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x88>)
 80006ea:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	42c80000 	.word	0x42c80000
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	4a742400 	.word	0x4a742400
 8000704:	20000030 	.word	0x20000030

08000708 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_CAN1_Init+0x64>)
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_CAN1_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_CAN1_Init+0x64>)
 8000714:	2201      	movs	r2, #1
 8000716:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_CAN1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_CAN1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_CAN1_Init+0x64>)
 8000726:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800072a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_CAN1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_CAN1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_CAN1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_CAN1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_CAN1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_CAN1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_CAN1_Init+0x64>)
 8000758:	f000 fd20 	bl	800119c <HAL_CAN_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000762:	f000 f98b 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20001914 	.word	0x20001914
 8000770:	40006400 	.word	0x40006400

08000774 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_CAN_MspInit+0xa0>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d139      	bne.n	800080a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <HAL_CAN_MspInit+0xa4>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <HAL_CAN_MspInit+0xa4>)
 800079c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a0:	6593      	str	r3, [r2, #88]	; 0x58
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_CAN_MspInit+0xa4>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_CAN_MspInit+0xa4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_CAN_MspInit+0xa4>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_CAN_MspInit+0xa4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007d8:	2309      	movs	r3, #9
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f001 fc87 	bl	80020f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2105      	movs	r1, #5
 80007ee:	2014      	movs	r0, #20
 80007f0:	f001 fbd8 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007f4:	2014      	movs	r0, #20
 80007f6:	f001 fbf1 	bl	8001fdc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2105      	movs	r1, #5
 80007fe:	2015      	movs	r0, #21
 8000800:	f001 fbd0 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000804:	2015      	movs	r0, #21
 8000806:	f001 fbe9 	bl	8001fdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40006400 	.word	0x40006400
 8000818:	40021000 	.word	0x40021000

0800081c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <MX_FREERTOS_Init+0x18>)
 8000822:	2100      	movs	r1, #0
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_FREERTOS_Init+0x1c>)
 8000826:	f005 f921 	bl	8005a6c <osThreadNew>
 800082a:	4603      	mov	r3, r0
 800082c:	4a03      	ldr	r2, [pc, #12]	; (800083c <MX_FREERTOS_Init+0x20>)
 800082e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08008bd0 	.word	0x08008bd0
 8000838:	08000841 	.word	0x08000841
 800083c:	2000193c 	.word	0x2000193c

08000840 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f005 f9a1 	bl	8005b90 <osDelay>
 800084e:	e7fb      	b.n	8000848 <StartDefaultTask+0x8>

08000850 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b43      	ldr	r3, [pc, #268]	; (8000974 <MX_GPIO_Init+0x124>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a42      	ldr	r2, [pc, #264]	; (8000974 <MX_GPIO_Init+0x124>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b40      	ldr	r3, [pc, #256]	; (8000974 <MX_GPIO_Init+0x124>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_GPIO_Init+0x124>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a3c      	ldr	r2, [pc, #240]	; (8000974 <MX_GPIO_Init+0x124>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <MX_GPIO_Init+0x124>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_GPIO_Init+0x124>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a36      	ldr	r2, [pc, #216]	; (8000974 <MX_GPIO_Init+0x124>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_GPIO_Init+0x124>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <MX_GPIO_Init+0x124>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a30      	ldr	r2, [pc, #192]	; (8000974 <MX_GPIO_Init+0x124>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_GPIO_Init+0x124>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 7123 	mov.w	r1, #652	; 0x28c
 80008cc:	482a      	ldr	r0, [pc, #168]	; (8000978 <MX_GPIO_Init+0x128>)
 80008ce:	f001 fdbd 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f001 fdb6 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Uhvacc_Measurement_Pin|Ihvacc_Measurement_Pin;
 80008e0:	2303      	movs	r3, #3
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4821      	ldr	r0, [pc, #132]	; (8000978 <MX_GPIO_Init+0x128>)
 80008f4:	f001 fc00 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin;
 80008f8:	f44f 7323 	mov.w	r3, #652	; 0x28c
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4819      	ldr	r0, [pc, #100]	; (8000978 <MX_GPIO_Init+0x128>)
 8000912:	f001 fbf1 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AirPlusStatus_Pin|AirMinusStatus_Pin;
 8000916:	23c0      	movs	r3, #192	; 0xc0
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f001 fbe4 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Precharge_Relay_Status_Pin|SHD_Status_Pin|bmsFault_Pin;
 8000930:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_GPIO_Init+0x128>)
 8000946:	f001 fbd7 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_SHD_Control_Pin;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_SHD_Control_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f001 fbc7 	bl	80020f8 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48000800 	.word	0x48000800

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fbd2 	bl	800112a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f821 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f7ff ff61 	bl	8000850 <MX_GPIO_Init>
  MX_TIM2_Init();
 800098e:	f000 f95d 	bl	8000c4c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000992:	f000 fa87 	bl	8000ea4 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000996:	f000 fa55 	bl	8000e44 <MX_UART5_Init>
  MX_CAN1_Init();
 800099a:	f7ff feb5 	bl	8000708 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  Can_Init();
 800099e:	f7ff fe2b 	bl	80005f8 <Can_Init>
  xTaskCreate(userMain, "UserMainThread", 64, NULL, 5, NULL);
 80009a2:	2300      	movs	r3, #0
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2305      	movs	r3, #5
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	4905      	ldr	r1, [pc, #20]	; (80009c4 <main+0x48>)
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <main+0x4c>)
 80009b2:	f006 f8ee 	bl	8006b92 <xTaskCreate>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009b6:	f005 f80f 	bl	80059d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80009ba:	f7ff ff2f 	bl	800081c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009be:	f005 f82f 	bl	8005a20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
 80009c2:	e7fe      	b.n	80009c2 <main+0x46>
 80009c4:	08008ba0 	.word	0x08008ba0
 80009c8:	080010b5 	.word	0x080010b5

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2244      	movs	r2, #68	; 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f008 f8c0 	bl	8008b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009f2:	f001 fd51 	bl	8002498 <HAL_PWREx_ControlVoltageScaling>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009fc:	f000 f83e 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a00:	2310      	movs	r3, #16
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fd93 	bl	8002544 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a24:	f000 f82a 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f965 	bl	8002d10 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a4c:	f000 f816 	bl	8000a7c <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3758      	adds	r7, #88	; 0x58
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6a:	f000 fb77 	bl	800115c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40012c00 	.word	0x40012c00

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	f06f 0001 	mvn.w	r0, #1
 8000ac6:	f001 fa6d 	bl	8001fa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2019      	movs	r0, #25
 8000aee:	f001 fa59 	bl	8001fa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000af2:	2019      	movs	r0, #25
 8000af4:	f001 fa72 	bl	8001fdc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <HAL_InitTick+0x9c>)
 8000afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afc:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <HAL_InitTick+0x9c>)
 8000afe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b02:	6613      	str	r3, [r2, #96]	; 0x60
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_InitTick+0x9c>)
 8000b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fa9e 	bl	800305c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b20:	f002 fa86 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 8000b24:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <HAL_InitTick+0xa0>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0c9b      	lsrs	r3, r3, #18
 8000b30:	3b01      	subs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <HAL_InitTick+0xa8>)
 8000b38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b56:	f002 ffcf 	bl	8003af8 <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d104      	bne.n	8000b6a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b62:	f003 f82b 	bl	8003bbc <HAL_TIM_Base_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3730      	adds	r7, #48	; 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	20001940 	.word	0x20001940
 8000b80:	40012c00 	.word	0x40012c00

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <CAN1_RX0_IRQHandler+0x10>)
 8000bb6:	f000 ff0d 	bl	80019d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20001914 	.word	0x20001914

08000bc4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <CAN1_RX1_IRQHandler+0x10>)
 8000bca:	f000 ff03 	bl	80019d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20001914 	.word	0x20001914

08000bd8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bde:	f003 f8b4 	bl	8003d4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20001940 	.word	0x20001940

08000bec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM2_IRQHandler+0x10>)
 8000bf2:	f003 f8aa 	bl	8003d4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000198c 	.word	0x2000198c

08000c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <USART1_IRQHandler+0x10>)
 8000c06:	f003 fec5 	bl	8004994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20001a5c 	.word	0x20001a5c

08000c14 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <UART5_IRQHandler+0x10>)
 8000c1a:	f003 febb 	bl	8004994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200019d8 	.word	0x200019d8

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ca2:	4829      	ldr	r0, [pc, #164]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000ca4:	f002 fffa 	bl	8003c9c <HAL_TIM_IC_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000cae:	f7ff fee5 	bl	8000a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000cb6:	2360      	movs	r3, #96	; 0x60
 8000cb8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481e      	ldr	r0, [pc, #120]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000cce:	f003 f9f7 	bl	80040c0 <HAL_TIM_SlaveConfigSynchro>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f7ff fed0 	bl	8000a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4814      	ldr	r0, [pc, #80]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000cf6:	f003 f947 	bl	8003f88 <HAL_TIM_IC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000d00:	f7ff febc 	bl	8000a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d04:	2302      	movs	r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2204      	movs	r2, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000d16:	f003 f937 	bl	8003f88 <HAL_TIM_IC_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d20:	f7ff feac 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_TIM2_Init+0xfc>)
 8000d32:	f003 fd3b 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000d3c:	f7ff fe9e 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3730      	adds	r7, #48	; 0x30
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000198c 	.word	0x2000198c

08000d4c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d6c:	d12f      	bne.n	8000dce <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_TIM_IC_MspInit+0x8c>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_TIM_IC_MspInit+0x8c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_TIM_IC_MspInit+0x8c>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_TIM_IC_MspInit+0x8c>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_TIM_IC_MspInit+0x8c>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_TIM_IC_MspInit+0x8c>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dae:	2301      	movs	r3, #1
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <HAL_TIM_IC_MspInit+0x90>)
 8000dba:	f001 f99d 	bl	80020f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	201c      	movs	r0, #28
 8000dc4:	f001 f8ee 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dc8:	201c      	movs	r0, #28
 8000dca:	f001 f907 	bl	8001fdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48000400 	.word	0x48000400

08000de0 <HAL_UART_TxCpltCallback>:

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart5.Instance || huart->Instance == huart1.Instance )
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_UART_TxCpltCallback+0x54>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d005      	beq.n	8000e00 <HAL_UART_TxCpltCallback+0x20>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_UART_TxCpltCallback+0x58>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d114      	bne.n	8000e2a <HAL_UART_TxCpltCallback+0x4a>
	{
		BaseType_t woken = pdFALSE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(UART5_TransmitTaskHandle, &woken);
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_UART_TxCpltCallback+0x5c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fe0a 	bl	8007a28 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(woken);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <HAL_UART_TxCpltCallback+0x4a>
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_UART_TxCpltCallback+0x60>)
 8000e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	f3bf 8f4f 	dsb	sy
 8000e26:	f3bf 8f6f 	isb	sy
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200019d8 	.word	0x200019d8
 8000e38:	20001a5c 	.word	0x20001a5c
 8000e3c:	20000034 	.word	0x20000034
 8000e40:	e000ed04 	.word	0xe000ed04

08000e44 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e4a:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <MX_UART5_Init+0x5c>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e6c:	220c      	movs	r2, #12
 8000e6e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_UART5_Init+0x58>)
 8000e8a:	f003 fd35 	bl	80048f8 <HAL_UART_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_UART5_Init+0x54>
  {
    Error_Handler();
 8000e94:	f7ff fdf2 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200019d8 	.word	0x200019d8
 8000ea0:	40005000 	.word	0x40005000

08000ea4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000eaa:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <MX_USART1_UART_Init+0x5c>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <MX_USART1_UART_Init+0x60>)
 8000eb2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ee8:	f003 fd06 	bl	80048f8 <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ef2:	f7ff fdc3 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20001a5c 	.word	0x20001a5c
 8000f00:	40013800 	.word	0x40013800
 8000f04:	0003d090 	.word	0x0003d090

08000f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ae      	sub	sp, #184	; 0xb8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2288      	movs	r2, #136	; 0x88
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fe19 	bl	8008b60 <memset>
  if(uartHandle->Instance==UART5)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a5b      	ldr	r2, [pc, #364]	; (80010a0 <HAL_UART_MspInit+0x198>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d165      	bne.n	8001004 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 f91b 	bl	8003180 <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f50:	f7ff fd94 	bl	8000a7c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f54:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	4a52      	ldr	r2, [pc, #328]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f60:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f78:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f84:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a46      	ldr	r2, [pc, #280]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4839      	ldr	r0, [pc, #228]	; (80010a8 <HAL_UART_MspInit+0x1a0>)
 8000fc4:	f001 f898 	bl	80020f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fea:	4619      	mov	r1, r3
 8000fec:	482f      	ldr	r0, [pc, #188]	; (80010ac <HAL_UART_MspInit+0x1a4>)
 8000fee:	f001 f883 	bl	80020f8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2035      	movs	r0, #53	; 0x35
 8000ff8:	f000 ffd4 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000ffc:	2035      	movs	r0, #53	; 0x35
 8000ffe:	f000 ffed 	bl	8001fdc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001002:	e049      	b.n	8001098 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <HAL_UART_MspInit+0x1a8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d144      	bne.n	8001098 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800100e:	2301      	movs	r3, #1
 8001010:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001012:	2300      	movs	r3, #0
 8001014:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f8b0 	bl	8003180 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001026:	f7ff fd29 	bl	8000a7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6613      	str	r3, [r2, #96]	; 0x60
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0x19c>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800105a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001074:	2307      	movs	r3, #7
 8001076:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 f838 	bl	80020f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2105      	movs	r1, #5
 800108c:	2025      	movs	r0, #37	; 0x25
 800108e:	f000 ff89 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001092:	2025      	movs	r0, #37	; 0x25
 8001094:	f000 ffa2 	bl	8001fdc <HAL_NVIC_EnableIRQ>
}
 8001098:	bf00      	nop
 800109a:	37b8      	adds	r7, #184	; 0xb8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40005000 	.word	0x40005000
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000800 	.word	0x48000800
 80010ac:	48000c00 	.word	0x48000c00
 80010b0:	40013800 	.word	0x40013800

080010b4 <userMain>:
extern void canSend(uint16_t id,  CANMsg* canMsg);
extern  void create_CanTask();



int userMain(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

//	UART_Init();
//	PwmInInit();
	create_CanTask();
 80010ba:	f7ff fa6f 	bl	800059c <create_CanTask>
//		itoa(d,dc,10);
//		UART_AsyncTransmitString(5, "fr");
//		UART_AsyncTransmitString(5, fc);
//		UART_AsyncTransmitString(5, "du");
//		UART_AsyncTransmitString(5, dc);
		uint8_t niz[8]={0,1,0,1,0,1,0,1};
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <userMain+0x20>)
 80010c0:	463b      	mov	r3, r7
 80010c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c6:	e883 0003 	stmia.w	r3, {r0, r1}
//		canSend(1, niz);
		vTaskDelay(pdMS_TO_TICKS(500));
 80010ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ce:	f005 fea5 	bl	8006e1c <vTaskDelay>
	while(1){
 80010d2:	e7f4      	b.n	80010be <userMain+0xa>
 80010d4:	08008bb0 	.word	0x08008bb0

080010d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff fda4 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f007 fcf9 	bl	8008afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110a:	f7ff fc37 	bl	800097c <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800111c:	08008c4c 	.word	0x08008c4c
  ldr r2, =_sbss
 8001120:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001124:	20001b24 	.word	0x20001b24

08001128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>

0800112a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 ff2a 	bl	8001f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	200f      	movs	r0, #15
 800113c:	f7ff fccc 	bl	8000ad8 <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800114c:	f7ff fc9c 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	79fb      	ldrb	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	20001ae0 	.word	0x20001ae0

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20001ae0 	.word	0x20001ae0

0800119c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0ed      	b.n	800138a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fada 	bl	8000774 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011d0:	f7ff ffd8 	bl	8001184 <HAL_GetTick>
 80011d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011d6:	e012      	b.n	80011fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011d8:	f7ff ffd4 	bl	8001184 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b0a      	cmp	r3, #10
 80011e4:	d90b      	bls.n	80011fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2205      	movs	r2, #5
 80011f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0c5      	b.n	800138a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0e5      	beq.n	80011d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0202 	bic.w	r2, r2, #2
 800121a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800121c:	f7ff ffb2 	bl	8001184 <HAL_GetTick>
 8001220:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001222:	e012      	b.n	800124a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001224:	f7ff ffae 	bl	8001184 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b0a      	cmp	r3, #10
 8001230:	d90b      	bls.n	800124a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2205      	movs	r2, #5
 8001242:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e09f      	b.n	800138a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e5      	bne.n	8001224 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7e1b      	ldrb	r3, [r3, #24]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d108      	bne.n	8001272 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e007      	b.n	8001282 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7e5b      	ldrb	r3, [r3, #25]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d108      	bne.n	800129c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e007      	b.n	80012ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e9b      	ldrb	r3, [r3, #26]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d108      	bne.n	80012c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0220 	orr.w	r2, r2, #32
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e007      	b.n	80012d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0220 	bic.w	r2, r2, #32
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7edb      	ldrb	r3, [r3, #27]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d108      	bne.n	80012f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0210 	bic.w	r2, r2, #16
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e007      	b.n	8001300 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0210 	orr.w	r2, r2, #16
 80012fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7f1b      	ldrb	r3, [r3, #28]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d108      	bne.n	800131a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0208 	orr.w	r2, r2, #8
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e007      	b.n	800132a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0208 	bic.w	r2, r2, #8
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7f5b      	ldrb	r3, [r3, #29]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d108      	bne.n	8001344 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0204 	orr.w	r2, r2, #4
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e007      	b.n	8001354 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0204 	bic.w	r2, r2, #4
 8001352:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	ea42 0103 	orr.w	r1, r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001392:	b480      	push	{r7}
 8001394:	b087      	sub	sp, #28
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013aa:	7cfb      	ldrb	r3, [r7, #19]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d003      	beq.n	80013b8 <HAL_CAN_ConfigFilter+0x26>
 80013b0:	7cfb      	ldrb	r3, [r7, #19]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	f040 80aa 	bne.w	800150c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	2201      	movs	r2, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d123      	bne.n	800143a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	401a      	ands	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001414:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3248      	adds	r2, #72	; 0x48
 800141a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800142e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001430:	6979      	ldr	r1, [r7, #20]
 8001432:	3348      	adds	r3, #72	; 0x48
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d122      	bne.n	8001488 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	431a      	orrs	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001462:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3248      	adds	r2, #72	; 0x48
 8001468:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800147c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800147e:	6979      	ldr	r1, [r7, #20]
 8001480:	3348      	adds	r3, #72	; 0x48
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014a2:	e007      	b.n	80014b4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014ce:	e007      	b.n	80014e0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014fe:	f023 0201 	bic.w	r2, r3, #1
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	e006      	b.n	800151a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
  }
}
 800151a:	4618      	mov	r0, r3
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d12e      	bne.n	8001598 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2202      	movs	r2, #2
 800153e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001552:	f7ff fe17 	bl	8001184 <HAL_GetTick>
 8001556:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001558:	e012      	b.n	8001580 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800155a:	f7ff fe13 	bl	8001184 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b0a      	cmp	r3, #10
 8001566:	d90b      	bls.n	8001580 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2205      	movs	r2, #5
 8001578:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e012      	b.n	80015a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e5      	bne.n	800155a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e006      	b.n	80015a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
  }
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b089      	sub	sp, #36	; 0x24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d003      	beq.n	80015da <HAL_CAN_AddTxMessage+0x2c>
 80015d2:	7ffb      	ldrb	r3, [r7, #31]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	f040 80b8 	bne.w	800174a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10a      	bne.n	80015fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a0 	beq.w	800173a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	0e1b      	lsrs	r3, r3, #24
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d907      	bls.n	800161a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e09e      	b.n	8001758 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800161a:	2201      	movs	r2, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10d      	bne.n	8001648 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001636:	68f9      	ldr	r1, [r7, #12]
 8001638:	6809      	ldr	r1, [r1, #0]
 800163a:	431a      	orrs	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3318      	adds	r3, #24
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	440b      	add	r3, r1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e00f      	b.n	8001668 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001652:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001658:	68f9      	ldr	r1, [r7, #12]
 800165a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800165c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3318      	adds	r3, #24
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	440b      	add	r3, r1
 8001666:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6819      	ldr	r1, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3318      	adds	r3, #24
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	7d1b      	ldrb	r3, [r3, #20]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d111      	bne.n	80016a8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3318      	adds	r3, #24
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	6811      	ldr	r1, [r2, #0]
 8001698:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3318      	adds	r3, #24
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	440b      	add	r3, r1
 80016a4:	3304      	adds	r3, #4
 80016a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3307      	adds	r3, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	061a      	lsls	r2, r3, #24
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3306      	adds	r3, #6
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3305      	adds	r3, #5
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4313      	orrs	r3, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	3204      	adds	r2, #4
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4610      	mov	r0, r2
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	6811      	ldr	r1, [r2, #0]
 80016d0:	ea43 0200 	orr.w	r2, r3, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	440b      	add	r3, r1
 80016da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3303      	adds	r3, #3
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	061a      	lsls	r2, r3, #24
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3302      	adds	r3, #2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3301      	adds	r3, #1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	4313      	orrs	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	4610      	mov	r0, r2
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	6811      	ldr	r1, [r2, #0]
 8001706:	ea43 0200 	orr.w	r2, r3, r0
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	440b      	add	r3, r1
 8001710:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001714:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3318      	adds	r3, #24
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	6811      	ldr	r1, [r2, #0]
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3318      	adds	r3, #24
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	440b      	add	r3, r1
 8001734:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e00e      	b.n	8001758 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e006      	b.n	8001758 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
  }
}
 8001758:	4618      	mov	r0, r3
 800175a:	3724      	adds	r7, #36	; 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001778:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d003      	beq.n	8001788 <HAL_CAN_GetRxMessage+0x24>
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b02      	cmp	r3, #2
 8001784:	f040 80f3 	bne.w	800196e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d116      	bne.n	80017ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0e7      	b.n	800197c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d107      	bne.n	80017ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0d8      	b.n	800197c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	331b      	adds	r3, #27
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0204 	and.w	r2, r3, #4
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10c      	bne.n	8001802 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	331b      	adds	r3, #27
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	0d5b      	lsrs	r3, r3, #21
 80017f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e00b      	b.n	800181a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	331b      	adds	r3, #27
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	331b      	adds	r3, #27
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0202 	and.w	r2, r3, #2
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	331b      	adds	r3, #27
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	4413      	add	r3, r2
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 020f 	and.w	r2, r3, #15
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	331b      	adds	r3, #27
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	3304      	adds	r3, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b2da      	uxtb	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	331b      	adds	r3, #27
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4413      	add	r3, r2
 800186c:	3304      	adds	r3, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4413      	add	r3, r2
 8001882:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	4413      	add	r3, r2
 8001898:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0a1a      	lsrs	r2, r3, #8
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0c1a      	lsrs	r2, r3, #16
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3302      	adds	r3, #2
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0e1a      	lsrs	r2, r3, #24
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3303      	adds	r3, #3
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3304      	adds	r3, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0a1a      	lsrs	r2, r3, #8
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	3305      	adds	r3, #5
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4413      	add	r3, r2
 8001918:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0c1a      	lsrs	r2, r3, #16
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	3306      	adds	r3, #6
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e1a      	lsrs	r2, r3, #24
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3307      	adds	r3, #7
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	e007      	b.n	800196a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0220 	orr.w	r2, r2, #32
 8001968:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e006      	b.n	800197c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
  }
}
 800197c:	4618      	mov	r0, r3
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001998:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d002      	beq.n	80019a6 <HAL_CAN_ActivateNotification+0x1e>
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d109      	bne.n	80019ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6959      	ldr	r1, [r3, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e006      	b.n	80019c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
  }
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d07c      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d023      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f983 	bl	8001d42 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a3c:	e016      	b.n	8001a6c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	e00c      	b.n	8001a6c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	e002      	b.n	8001a6c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f989 	bl	8001d7e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d024      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f963 	bl	8001d56 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a90:	e016      	b.n	8001ac0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	e00c      	b.n	8001ac0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e002      	b.n	8001ac0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f969 	bl	8001d92 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d024      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ad2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f943 	bl	8001d6a <HAL_CAN_TxMailbox2CompleteCallback>
 8001ae4:	e016      	b.n	8001b14 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
 8001af8:	e00c      	b.n	8001b14 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	e002      	b.n	8001b14 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f949 	bl	8001da6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2210      	movs	r2, #16
 8001b36:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2208      	movs	r2, #8
 8001b52:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f930 	bl	8001dba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d009      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fca8 	bl	80004c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00c      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f912 	bl	8001de2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d009      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8f9 	bl	8001dce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f8fc 	bl	8001df6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00b      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2208      	movs	r2, #8
 8001c18:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8f5 	bl	8001e0a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d07b      	beq.n	8001d22 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d072      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d008      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d043      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03e      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca2:	2b60      	cmp	r3, #96	; 0x60
 8001ca4:	d02b      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x32a>
 8001ca6:	2b60      	cmp	r3, #96	; 0x60
 8001ca8:	d82e      	bhi.n	8001d08 <HAL_CAN_IRQHandler+0x334>
 8001caa:	2b50      	cmp	r3, #80	; 0x50
 8001cac:	d022      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x320>
 8001cae:	2b50      	cmp	r3, #80	; 0x50
 8001cb0:	d82a      	bhi.n	8001d08 <HAL_CAN_IRQHandler+0x334>
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d019      	beq.n	8001cea <HAL_CAN_IRQHandler+0x316>
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d826      	bhi.n	8001d08 <HAL_CAN_IRQHandler+0x334>
 8001cba:	2b30      	cmp	r3, #48	; 0x30
 8001cbc:	d010      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x30c>
 8001cbe:	2b30      	cmp	r3, #48	; 0x30
 8001cc0:	d822      	bhi.n	8001d08 <HAL_CAN_IRQHandler+0x334>
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d002      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x2f8>
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d005      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cca:	e01d      	b.n	8001d08 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cd4:	e019      	b.n	8001d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f043 0310 	orr.w	r3, r3, #16
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cde:	e014      	b.n	8001d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f043 0320 	orr.w	r3, r3, #32
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ce8:	e00f      	b.n	8001d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cf2:	e00a      	b.n	8001d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfc:	e005      	b.n	8001d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d06:	e000      	b.n	8001d0a <HAL_CAN_IRQHandler+0x336>
            break;
 8001d08:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d18:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f872 	bl	8001e1e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff4c 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb6:	f7ff ff61 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f7ff ffb1 	bl	8001f28 <NVIC_EncodePriority>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff80 	bl	8001ed4 <__NVIC_SetPriority>
}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff54 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d008      	beq.n	8002022 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2204      	movs	r2, #4
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e022      	b.n	8002068 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 020e 	bic.w	r2, r2, #14
 8002030:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f003 021c 	and.w	r2, r3, #28
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d005      	beq.n	8002098 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2204      	movs	r2, #4
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]
 8002096:	e029      	b.n	80020ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 020e 	bic.w	r2, r2, #14
 80020a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f003 021c 	and.w	r2, r3, #28
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
    }
  }
  return status;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002106:	e17f      	b.n	8002408 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8171 	beq.w	8002402 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d005      	beq.n	8002138 <HAL_GPIO_Init+0x40>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d130      	bne.n	800219a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800216e:	2201      	movs	r2, #1
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 0201 	and.w	r2, r3, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d118      	bne.n	80021d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021ac:	2201      	movs	r2, #1
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	f003 0201 	and.w	r2, r3, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d017      	beq.n	8002214 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d123      	bne.n	8002268 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	08da      	lsrs	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	6939      	ldr	r1, [r7, #16]
 8002264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80ac 	beq.w	8002402 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_GPIO_Init+0x330>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_GPIO_Init+0x330>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6613      	str	r3, [r2, #96]	; 0x60
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_GPIO_Init+0x330>)
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022c2:	4a5a      	ldr	r2, [pc, #360]	; (800242c <HAL_GPIO_Init+0x334>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ec:	d025      	beq.n	800233a <HAL_GPIO_Init+0x242>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_GPIO_Init+0x338>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <HAL_GPIO_Init+0x23e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_GPIO_Init+0x33c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x23a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x340>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x236>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x344>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x232>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_GPIO_Init+0x348>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x22e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <HAL_GPIO_Init+0x34c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x22a>
 800231e:	2306      	movs	r3, #6
 8002320:	e00c      	b.n	800233c <HAL_GPIO_Init+0x244>
 8002322:	2307      	movs	r3, #7
 8002324:	e00a      	b.n	800233c <HAL_GPIO_Init+0x244>
 8002326:	2305      	movs	r3, #5
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x244>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x244>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x244>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x244>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x244>
 800233a:	2300      	movs	r3, #0
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800234c:	4937      	ldr	r1, [pc, #220]	; (800242c <HAL_GPIO_Init+0x334>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_GPIO_Init+0x350>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800237e:	4a32      	ldr	r2, [pc, #200]	; (8002448 <HAL_GPIO_Init+0x350>)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002384:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_GPIO_Init+0x350>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023a8:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_GPIO_Init+0x350>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_GPIO_Init+0x350>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <HAL_GPIO_Init+0x350>)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_GPIO_Init+0x350>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_GPIO_Init+0x350>)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	f47f ae78 	bne.w	8002108 <HAL_GPIO_Init+0x10>
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	48000400 	.word	0x48000400
 8002434:	48000800 	.word	0x48000800
 8002438:	48000c00 	.word	0x48000c00
 800243c:	48001000 	.word	0x48001000
 8002440:	48001400 	.word	0x48001400
 8002444:	48001800 	.word	0x48001800
 8002448:	40010400 	.word	0x40010400

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002468:	e002      	b.n	8002470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_PWREx_GetVoltageRange+0x18>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40007000 	.word	0x40007000

08002498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a6:	d130      	bne.n	800250a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d038      	beq.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2232      	movs	r2, #50	; 0x32
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0c9b      	lsrs	r3, r3, #18
 80024d8:	3301      	adds	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024dc:	e002      	b.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f0:	d102      	bne.n	80024f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f2      	bne.n	80024de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002504:	d110      	bne.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e00f      	b.n	800252a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002516:	d007      	beq.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002520:	4a05      	ldr	r2, [pc, #20]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002526:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40007000 	.word	0x40007000
 800253c:	20000000 	.word	0x20000000
 8002540:	431bde83 	.word	0x431bde83

08002544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e3d4      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	4ba1      	ldr	r3, [pc, #644]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002560:	4b9e      	ldr	r3, [pc, #632]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80e4 	beq.w	8002740 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_RCC_OscConfig+0x4a>
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	f040 808b 	bne.w	800269c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b01      	cmp	r3, #1
 800258a:	f040 8087 	bne.w	800269c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800258e:	4b93      	ldr	r3, [pc, #588]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e3ac      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_RCC_OscConfig+0x7c>
 80025b6:	4b89      	ldr	r3, [pc, #548]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025be:	e005      	b.n	80025cc <HAL_RCC_OscConfig+0x88>
 80025c0:	4b86      	ldr	r3, [pc, #536]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d223      	bcs.n	8002618 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fd73 	bl	80030c0 <RCC_SetFlashLatencyFromMSIRange>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e38d      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e4:	4b7d      	ldr	r3, [pc, #500]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7c      	ldr	r2, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b7a      	ldr	r3, [pc, #488]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4977      	ldr	r1, [pc, #476]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	4972      	ldr	r1, [pc, #456]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
 8002616:	e025      	b.n	8002664 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002618:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	496a      	ldr	r1, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002636:	4b69      	ldr	r3, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	4965      	ldr	r1, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fd33 	bl	80030c0 <RCC_SetFlashLatencyFromMSIRange>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e34d      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002664:	f000 fc36 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	495a      	ldr	r1, [pc, #360]	; (80027e0 <HAL_RCC_OscConfig+0x29c>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <HAL_RCC_OscConfig+0x2a0>)
 8002682:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_OscConfig+0x2a4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fa25 	bl	8000ad8 <HAL_InitTick>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d052      	beq.n	800273e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	e331      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d032      	beq.n	800270a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026a4:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fd68 	bl	8001184 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b8:	f7fe fd64 	bl	8001184 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e31a      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ca:	4b44      	ldr	r3, [pc, #272]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a40      	ldr	r2, [pc, #256]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026dc:	f043 0308 	orr.w	r3, r3, #8
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	493b      	ldr	r1, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f4:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	4936      	ldr	r1, [pc, #216]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
 8002708:	e01a      	b.n	8002740 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a33      	ldr	r2, [pc, #204]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002716:	f7fe fd35 	bl	8001184 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800271e:	f7fe fd31 	bl	8001184 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e2e7      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x1da>
 800273c:	e000      	b.n	8002740 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800273e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d074      	beq.n	8002836 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x21a>
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d10e      	bne.n	8002776 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d10b      	bne.n	8002776 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d064      	beq.n	8002834 <HAL_RCC_OscConfig+0x2f0>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d160      	bne.n	8002834 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e2c4      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x24a>
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a15      	ldr	r2, [pc, #84]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e01d      	b.n	80027ca <HAL_RCC_OscConfig+0x286>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x26e>
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 800279e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0x286>
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a06      	ldr	r2, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x298>)
 80027c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01c      	beq.n	800280c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fcd7 	bl	8001184 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d8:	e011      	b.n	80027fe <HAL_RCC_OscConfig+0x2ba>
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08008bf4 	.word	0x08008bf4
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe fcca 	bl	8001184 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e280      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fe:	4baf      	ldr	r3, [pc, #700]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x2a8>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fcba 	bl	8001184 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fcb6 	bl	8001184 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e26c      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002826:	4ba5      	ldr	r3, [pc, #660]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x2d0>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d060      	beq.n	8002904 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d005      	beq.n	8002854 <HAL_RCC_OscConfig+0x310>
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d119      	bne.n	8002882 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d116      	bne.n	8002882 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	4b99      	ldr	r3, [pc, #612]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_OscConfig+0x328>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e249      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b93      	ldr	r3, [pc, #588]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	4990      	ldr	r1, [pc, #576]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002880:	e040      	b.n	8002904 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d023      	beq.n	80028d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288a:	4b8c      	ldr	r3, [pc, #560]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a8b      	ldr	r2, [pc, #556]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fc75 	bl	8001184 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289e:	f7fe fc71 	bl	8001184 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e227      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b0:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	497c      	ldr	r1, [pc, #496]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	e018      	b.n	8002904 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a79      	ldr	r2, [pc, #484]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fc51 	bl	8001184 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe fc4d 	bl	8001184 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e203      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f8:	4b70      	ldr	r3, [pc, #448]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d03c      	beq.n	800298a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01c      	beq.n	8002952 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002918:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800291a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291e:	4a67      	ldr	r2, [pc, #412]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7fe fc2c 	bl	8001184 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe fc28 	bl	8001184 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1de      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002942:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ef      	beq.n	8002930 <HAL_RCC_OscConfig+0x3ec>
 8002950:	e01b      	b.n	800298a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002952:	4b5a      	ldr	r3, [pc, #360]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7fe fc0f 	bl	8001184 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fc0b 	bl	8001184 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1c1      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800297c:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ef      	bne.n	800296a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80a6 	beq.w	8002ae4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800299c:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10d      	bne.n	80029c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a8:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	4a43      	ldr	r2, [pc, #268]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80029ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b2:	6593      	str	r3, [r2, #88]	; 0x58
 80029b4:	4b41      	ldr	r3, [pc, #260]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c0:	2301      	movs	r3, #1
 80029c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c4:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCC_OscConfig+0x57c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d118      	bne.n	8002a02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_OscConfig+0x57c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a3a      	ldr	r2, [pc, #232]	; (8002ac0 <HAL_RCC_OscConfig+0x57c>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029dc:	f7fe fbd2 	bl	8001184 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e4:	f7fe fbce 	bl	8001184 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e184      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_RCC_OscConfig+0x57c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4d8>
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1a:	e024      	b.n	8002a66 <HAL_RCC_OscConfig+0x522>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d110      	bne.n	8002a46 <HAL_RCC_OscConfig+0x502>
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a44:	e00f      	b.n	8002a66 <HAL_RCC_OscConfig+0x522>
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fb89 	bl	8001184 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe fb85 	bl	8001184 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e139      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_OscConfig+0x578>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ed      	beq.n	8002a76 <HAL_RCC_OscConfig+0x532>
 8002a9a:	e01a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fb72 	bl	8001184 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa2:	e00f      	b.n	8002ac4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fb6e 	bl	8001184 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d906      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e122      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac4:	4b90      	ldr	r3, [pc, #576]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e8      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad2:	7ffb      	ldrb	r3, [r7, #31]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad8:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	4a8a      	ldr	r2, [pc, #552]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8108 	beq.w	8002cfe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	f040 80d0 	bne.w	8002c98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002af8:	4b83      	ldr	r3, [pc, #524]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d130      	bne.n	8002b6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	3b01      	subs	r3, #1
 8002b18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d127      	bne.n	8002b6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d11f      	bne.n	8002b6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b38:	2a07      	cmp	r2, #7
 8002b3a:	bf14      	ite	ne
 8002b3c:	2201      	movne	r2, #1
 8002b3e:	2200      	moveq	r2, #0
 8002b40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d113      	bne.n	8002b6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d109      	bne.n	8002b6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d06e      	beq.n	8002c4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d069      	beq.n	8002c48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b74:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b80:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0b7      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b90:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a5c      	ldr	r2, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b9c:	f7fe faf2 	bl	8001184 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe faee 	bl	8001184 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0a4      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb6:	4b54      	ldr	r3, [pc, #336]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc2:	4b51      	ldr	r3, [pc, #324]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4b51      	ldr	r3, [pc, #324]	; (8002d0c <HAL_RCC_OscConfig+0x7c8>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bdc:	0212      	lsls	r2, r2, #8
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002be4:	0852      	lsrs	r2, r2, #1
 8002be6:	3a01      	subs	r2, #1
 8002be8:	0552      	lsls	r2, r2, #21
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bf0:	0852      	lsrs	r2, r2, #1
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	0652      	lsls	r2, r2, #25
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bfc:	0912      	lsrs	r2, r2, #4
 8002bfe:	0452      	lsls	r2, r2, #17
 8002c00:	430a      	orrs	r2, r1
 8002c02:	4941      	ldr	r1, [pc, #260]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3e      	ldr	r2, [pc, #248]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c14:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c20:	f7fe fab0 	bl	8001184 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe faac 	bl	8001184 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e062      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c46:	e05a      	b.n	8002cfe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e059      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4c:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d152      	bne.n	8002cfe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c58:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c70:	f7fe fa88 	bl	8001184 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fa84 	bl	8001184 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e03a      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x734>
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d02d      	beq.n	8002cfa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002cbc:	f023 0303 	bic.w	r3, r3, #3
 8002cc0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002cc8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fa57 	bl	8001184 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cda:	f7fe fa53 	bl	8001184 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e009      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x7c4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x796>
 8002cf8:	e001      	b.n	8002cfe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	f99d808c 	.word	0xf99d808c

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0c8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4961      	ldr	r1, [pc, #388]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b0      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d04c      	beq.n	8002dfa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d68:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d121      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e09e      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d115      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e092      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d98:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e086      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e07e      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 0203 	bic.w	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	493f      	ldr	r1, [pc, #252]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dca:	f7fe f9db 	bl	8001184 <HAL_GetTick>
 8002dce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd2:	f7fe f9d7 	bl	8001184 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e066      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 020c 	and.w	r2, r3, #12
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d1eb      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e06:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	492c      	ldr	r1, [pc, #176]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d210      	bcs.n	8002e48 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 0207 	bic.w	r2, r3, #7
 8002e2e:	4924      	ldr	r1, [pc, #144]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e036      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4918      	ldr	r1, [pc, #96]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4910      	ldr	r1, [pc, #64]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e86:	f000 f825 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	490c      	ldr	r1, [pc, #48]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	5ccb      	ldrb	r3, [r1, r3]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fe14 	bl	8000ad8 <HAL_InitTick>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08008bf4 	.word	0x08008bf4
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eec:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x34>
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d121      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d11e      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f14:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e005      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f24:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f30:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e004      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d134      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d003      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0xac>
 8002f78:	e005      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f7c:	617b      	str	r3, [r7, #20]
      break;
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f82:	617b      	str	r3, [r7, #20]
      break;
 8002f84:	e002      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	617b      	str	r3, [r7, #20]
      break;
 8002f8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	3301      	adds	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	fb02 f203 	mul.w	r2, r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	0e5b      	lsrs	r3, r3, #25
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	; 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	08008c0c 	.word	0x08008c0c
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000000 	.word	0x20000000

08003004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003008:	f7ff fff0 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4904      	ldr	r1, [pc, #16]	; (800302c <HAL_RCC_GetPCLK1Freq+0x28>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	08008c04 	.word	0x08008c04

08003030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003034:	f7ff ffda 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0adb      	lsrs	r3, r3, #11
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4904      	ldr	r1, [pc, #16]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08008c04 	.word	0x08008c04

0800305c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	220f      	movs	r2, #15
 800306a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_GetClockConfig+0x5c>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0203 	and.w	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCC_GetClockConfig+0x5c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_RCC_GetClockConfig+0x60>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0207 	and.w	r2, r3, #7
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	601a      	str	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40022000 	.word	0x40022000

080030c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030cc:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d8:	f7ff f9d0 	bl	800247c <HAL_PWREx_GetVoltageRange>
 80030dc:	6178      	str	r0, [r7, #20]
 80030de:	e014      	b.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4a24      	ldr	r2, [pc, #144]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030f8:	f7ff f9c0 	bl	800247c <HAL_PWREx_GetVoltageRange>
 80030fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003110:	d10b      	bne.n	800312a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d919      	bls.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2ba0      	cmp	r3, #160	; 0xa0
 800311c:	d902      	bls.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800311e:	2302      	movs	r3, #2
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e013      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003124:	2301      	movs	r3, #1
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	e010      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d902      	bls.n	8003136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003130:	2303      	movs	r3, #3
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	e00a      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d102      	bne.n	8003142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800313c:	2302      	movs	r3, #2
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	e004      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b70      	cmp	r3, #112	; 0x70
 8003146:	d101      	bne.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003148:	2301      	movs	r3, #1
 800314a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 0207 	bic.w	r2, r3, #7
 8003154:	4909      	ldr	r1, [pc, #36]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	40022000 	.word	0x40022000

08003180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003188:	2300      	movs	r3, #0
 800318a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800318c:	2300      	movs	r3, #0
 800318e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003198:	2b00      	cmp	r3, #0
 800319a:	d041      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a4:	d02a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031aa:	d824      	bhi.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b0:	d008      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b6:	d81e      	bhi.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c0:	d010      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031c2:	e018      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c4:	4b86      	ldr	r3, [pc, #536]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a85      	ldr	r2, [pc, #532]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d0:	e015      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fabb 	bl	8003754 <RCCEx_PLLSAI1_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e2:	e00c      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3320      	adds	r3, #32
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fba6 	bl	800393c <RCCEx_PLLSAI2_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f4:	e003      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	74fb      	strb	r3, [r7, #19]
      break;
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003204:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003212:	4973      	ldr	r1, [pc, #460]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800321a:	e001      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d041      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003230:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003234:	d02a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003236:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800323a:	d824      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800323c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003240:	d008      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003246:	d81e      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003250:	d010      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003252:	e018      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003254:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003260:	e015      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fa73 	bl	8003754 <RCCEx_PLLSAI1_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003272:	e00c      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3320      	adds	r3, #32
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fb5e 	bl	800393c <RCCEx_PLLSAI2_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003284:	e003      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	74fb      	strb	r3, [r7, #19]
      break;
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800328c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003294:	4b52      	ldr	r3, [pc, #328]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a2:	494f      	ldr	r1, [pc, #316]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032aa:	e001      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a0 	beq.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00d      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	4a40      	ldr	r2, [pc, #256]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6593      	str	r3, [r2, #88]	; 0x58
 80032e4:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f0:	2301      	movs	r3, #1
 80032f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f4:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003300:	f7fd ff40 	bl	8001184 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003306:	e009      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003308:	f7fd ff3c 	bl	8001184 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d902      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	74fb      	strb	r3, [r7, #19]
        break;
 800331a:	e005      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800331c:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ef      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d15c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003338:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01f      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	d019      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003356:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fd fefb 	bl	8001184 <HAL_GetTick>
 800338e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003390:	e00b      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fd fef7 	bl	8001184 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d902      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	74fb      	strb	r3, [r7, #19]
            break;
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ec      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ce:	4904      	ldr	r1, [pc, #16]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033d6:	e009      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
 80033dc:	e006      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ec:	7c7b      	ldrb	r3, [r7, #17]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f2:	4b9e      	ldr	r3, [pc, #632]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	4a9d      	ldr	r2, [pc, #628]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800340a:	4b98      	ldr	r3, [pc, #608]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f023 0203 	bic.w	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	4994      	ldr	r1, [pc, #592]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800342c:	4b8f      	ldr	r3, [pc, #572]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f023 020c 	bic.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	498c      	ldr	r1, [pc, #560]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800344e:	4b87      	ldr	r3, [pc, #540]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003454:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	4983      	ldr	r1, [pc, #524]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003470:	4b7e      	ldr	r3, [pc, #504]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	497b      	ldr	r1, [pc, #492]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a0:	4972      	ldr	r1, [pc, #456]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b4:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	496a      	ldr	r1, [pc, #424]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d6:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	4961      	ldr	r1, [pc, #388]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034f8:	4b5c      	ldr	r3, [pc, #368]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	4959      	ldr	r1, [pc, #356]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	4950      	ldr	r1, [pc, #320]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800353c:	4b4b      	ldr	r3, [pc, #300]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	4948      	ldr	r1, [pc, #288]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800355e:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	493f      	ldr	r1, [pc, #252]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d028      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003580:	4b3a      	ldr	r3, [pc, #232]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358e:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359e:	d106      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a0:	4b32      	ldr	r3, [pc, #200]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a31      	ldr	r2, [pc, #196]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035aa:	60d3      	str	r3, [r2, #12]
 80035ac:	e011      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f8c8 	bl	8003754 <RCCEx_PLLSAI1_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d028      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	491f      	ldr	r1, [pc, #124]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fc:	d106      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4a1a      	ldr	r2, [pc, #104]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003608:	60d3      	str	r3, [r2, #12]
 800360a:	e011      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003614:	d10c      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f899 	bl	8003754 <RCCEx_PLLSAI1_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02b      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	4908      	ldr	r1, [pc, #32]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800365a:	d109      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a02      	ldr	r2, [pc, #8]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003666:	60d3      	str	r3, [r2, #12]
 8003668:	e014      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2101      	movs	r1, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f867 	bl	8003754 <RCCEx_PLLSAI1_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d02f      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ae:	4928      	ldr	r1, [pc, #160]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036be:	d10d      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	2102      	movs	r1, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f844 	bl	8003754 <RCCEx_PLLSAI1_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d014      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	74bb      	strb	r3, [r7, #18]
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3320      	adds	r3, #32
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f925 	bl	800393c <RCCEx_PLLSAI2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371a:	490d      	ldr	r1, [pc, #52]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373e:	4904      	ldr	r1, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003746:	7cbb      	ldrb	r3, [r7, #18]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000

08003754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003762:	4b75      	ldr	r3, [pc, #468]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800376e:	4b72      	ldr	r3, [pc, #456]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0203 	and.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d10d      	bne.n	800379a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
       ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003786:	4b6c      	ldr	r3, [pc, #432]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
       ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d047      	beq.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	e044      	b.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d018      	beq.n	80037da <RCCEx_PLLSAI1_Config+0x86>
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d825      	bhi.n	80037f8 <RCCEx_PLLSAI1_Config+0xa4>
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d002      	beq.n	80037b6 <RCCEx_PLLSAI1_Config+0x62>
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d009      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x74>
 80037b4:	e020      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037b6:	4b60      	ldr	r3, [pc, #384]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11d      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c6:	e01a      	b.n	80037fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c8:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d116      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d8:	e013      	b.n	8003802 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037da:	4b57      	ldr	r3, [pc, #348]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037f6:	e006      	b.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e004      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003806:	bf00      	nop
    }

    if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	430b      	orrs	r3, r1
 8003824:	4944      	ldr	r1, [pc, #272]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d17d      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003830:	4b41      	ldr	r3, [pc, #260]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a40      	ldr	r2, [pc, #256]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800383a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383c:	f7fd fca2 	bl	8001184 <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003842:	e009      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003844:	f7fd fc9e 	bl	8001184 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	73fb      	strb	r3, [r7, #15]
        break;
 8003856:	e005      	b.n	8003864 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003858:	4b37      	ldr	r3, [pc, #220]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ef      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d160      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003870:	4b31      	ldr	r3, [pc, #196]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	0211      	lsls	r1, r2, #8
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	0912      	lsrs	r2, r2, #4
 8003888:	0452      	lsls	r2, r2, #17
 800388a:	430a      	orrs	r2, r1
 800388c:	492a      	ldr	r1, [pc, #168]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	610b      	str	r3, [r1, #16]
 8003892:	e027      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d112      	bne.n	80038c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800389a:	4b27      	ldr	r3, [pc, #156]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	0211      	lsls	r1, r2, #8
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6912      	ldr	r2, [r2, #16]
 80038b0:	0852      	lsrs	r2, r2, #1
 80038b2:	3a01      	subs	r2, #1
 80038b4:	0552      	lsls	r2, r2, #21
 80038b6:	430a      	orrs	r2, r1
 80038b8:	491f      	ldr	r1, [pc, #124]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	610b      	str	r3, [r1, #16]
 80038be:	e011      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6892      	ldr	r2, [r2, #8]
 80038d0:	0211      	lsls	r1, r2, #8
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6952      	ldr	r2, [r2, #20]
 80038d6:	0852      	lsrs	r2, r2, #1
 80038d8:	3a01      	subs	r2, #1
 80038da:	0652      	lsls	r2, r2, #25
 80038dc:	430a      	orrs	r2, r1
 80038de:	4916      	ldr	r1, [pc, #88]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fc48 	bl	8001184 <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f6:	e009      	b.n	800390c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f8:	f7fd fc44 	bl	8001184 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	73fb      	strb	r3, [r7, #15]
          break;
 800390a:	e005      	b.n	8003918 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ef      	beq.n	80038f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	4904      	ldr	r1, [pc, #16]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800394a:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d018      	beq.n	8003988 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003956:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d10d      	bne.n	8003982 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
       ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800396e:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
       ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d047      	beq.n	8003a12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e044      	b.n	8003a12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d018      	beq.n	80039c2 <RCCEx_PLLSAI2_Config+0x86>
 8003990:	2b03      	cmp	r3, #3
 8003992:	d825      	bhi.n	80039e0 <RCCEx_PLLSAI2_Config+0xa4>
 8003994:	2b01      	cmp	r3, #1
 8003996:	d002      	beq.n	800399e <RCCEx_PLLSAI2_Config+0x62>
 8003998:	2b02      	cmp	r3, #2
 800399a:	d009      	beq.n	80039b0 <RCCEx_PLLSAI2_Config+0x74>
 800399c:	e020      	b.n	80039e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800399e:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11d      	bne.n	80039e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ae:	e01a      	b.n	80039e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039b0:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d116      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c0:	e013      	b.n	80039ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039c2:	4b4c      	ldr	r3, [pc, #304]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ce:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039de:	e006      	b.n	80039ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e004      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039f6:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	4939      	ldr	r1, [pc, #228]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d167      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a35      	ldr	r2, [pc, #212]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a24:	f7fd fbae 	bl	8001184 <HAL_GetTick>
 8003a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a2a:	e009      	b.n	8003a40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a2c:	f7fd fbaa 	bl	8001184 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d902      	bls.n	8003a40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3e:	e005      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a40:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ef      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d14a      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d111      	bne.n	8003a7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a58:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6892      	ldr	r2, [r2, #8]
 8003a68:	0211      	lsls	r1, r2, #8
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68d2      	ldr	r2, [r2, #12]
 8003a6e:	0912      	lsrs	r2, r2, #4
 8003a70:	0452      	lsls	r2, r2, #17
 8003a72:	430a      	orrs	r2, r1
 8003a74:	491f      	ldr	r1, [pc, #124]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	614b      	str	r3, [r1, #20]
 8003a7a:	e011      	b.n	8003aa0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
 8003a8c:	0211      	lsls	r1, r2, #8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6912      	ldr	r2, [r2, #16]
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0652      	lsls	r2, r2, #25
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4916      	ldr	r1, [pc, #88]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd fb6a 	bl	8001184 <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ab2:	e009      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab4:	f7fd fb66 	bl	8001184 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ac6:	e005      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ef      	beq.n	8003ab4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	4904      	ldr	r1, [pc, #16]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000

08003af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e049      	b.n	8003b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f841 	bl	8003ba6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 fb66 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d001      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e04f      	b.n	8003c74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01d      	beq.n	8003c32 <HAL_TIM_Base_Start_IT+0x76>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfe:	d018      	beq.n	8003c32 <HAL_TIM_Base_Start_IT+0x76>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_TIM_Base_Start_IT+0x76>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_TIM_Base_Start_IT+0x76>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_TIM_Base_Start_IT+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_TIM_Base_Start_IT+0x76>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_TIM_Base_Start_IT+0x76>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d115      	bne.n	8003c5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d015      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0xb4>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4a:	d011      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5c:	e008      	b.n	8003c70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e000      	b.n	8003c72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	40000c00 	.word	0x40000c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	00010007 	.word	0x00010007

08003c9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e049      	b.n	8003d42 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd f842 	bl	8000d4c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 fa94 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d122      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d11b      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f06f 0202 	mvn.w	r2, #2
 8003d76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fc fc75 	bl	800067c <HAL_TIM_IC_CaptureCallback>
 8003d92:	e005      	b.n	8003da0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fa19 	bl	80041cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa20 	bl	80041e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d122      	bne.n	8003dfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d11b      	bne.n	8003dfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f06f 0204 	mvn.w	r2, #4
 8003dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fc fc4b 	bl	800067c <HAL_TIM_IC_CaptureCallback>
 8003de6:	e005      	b.n	8003df4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f9ef 	bl	80041cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9f6 	bl	80041e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d122      	bne.n	8003e4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11b      	bne.n	8003e4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f06f 0208 	mvn.w	r2, #8
 8003e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2204      	movs	r2, #4
 8003e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7fc fc21 	bl	800067c <HAL_TIM_IC_CaptureCallback>
 8003e3a:	e005      	b.n	8003e48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f9c5 	bl	80041cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f9cc 	bl	80041e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d122      	bne.n	8003ea2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d11b      	bne.n	8003ea2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f06f 0210 	mvn.w	r2, #16
 8003e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2208      	movs	r2, #8
 8003e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fc fbf7 	bl	800067c <HAL_TIM_IC_CaptureCallback>
 8003e8e:	e005      	b.n	8003e9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f99b 	bl	80041cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9a2 	bl	80041e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d10e      	bne.n	8003ece <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f06f 0201 	mvn.w	r2, #1
 8003ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fc fdc5 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d10e      	bne.n	8003efa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d107      	bne.n	8003efa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fceb 	bl	80048d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f08:	d10e      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d107      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fcde 	bl	80048e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f950 	bl	80041f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0220 	mvn.w	r2, #32
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fc9e 	bl	80048bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e088      	b.n	80040b8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d11b      	bne.n	8003fec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f000 fa4e 	bl	8004464 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 020c 	bic.w	r2, r2, #12
 8003fd6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	619a      	str	r2, [r3, #24]
 8003fea:	e060      	b.n	80040ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d11c      	bne.n	800402c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f000 facc 	bl	800459e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004014:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6999      	ldr	r1, [r3, #24]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	021a      	lsls	r2, r3, #8
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	619a      	str	r2, [r3, #24]
 800402a:	e040      	b.n	80040ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b08      	cmp	r3, #8
 8004030:	d11b      	bne.n	800406a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f000 fb19 	bl	8004678 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 020c 	bic.w	r2, r2, #12
 8004054:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69d9      	ldr	r1, [r3, #28]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	61da      	str	r2, [r3, #28]
 8004068:	e021      	b.n	80040ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d11c      	bne.n	80040aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6819      	ldr	r1, [r3, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f000 fb36 	bl	80046f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004092:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69d9      	ldr	r1, [r3, #28]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	61da      	str	r2, [r3, #28]
 80040a8:	e001      	b.n	80040ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e031      	b.n	800413c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80040e8:	6839      	ldr	r1, [r7, #0]
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f926 	bl	800433c <TIM_SlaveTimer_SetConfig>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e018      	b.n	800413c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004118:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004128:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d831      	bhi.n	80041bc <HAL_TIM_ReadCapturedValue+0x78>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <HAL_TIM_ReadCapturedValue+0x1c>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004195 	.word	0x08004195
 8004164:	080041bd 	.word	0x080041bd
 8004168:	080041bd 	.word	0x080041bd
 800416c:	080041bd 	.word	0x080041bd
 8004170:	0800419f 	.word	0x0800419f
 8004174:	080041bd 	.word	0x080041bd
 8004178:	080041bd 	.word	0x080041bd
 800417c:	080041bd 	.word	0x080041bd
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041bd 	.word	0x080041bd
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080041bd 	.word	0x080041bd
 8004190:	080041b3 	.word	0x080041b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	60fb      	str	r3, [r7, #12]

      break;
 800419c:	e00f      	b.n	80041be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	60fb      	str	r3, [r7, #12]

      break;
 80041a6:	e00a      	b.n	80041be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	60fb      	str	r3, [r7, #12]

      break;
 80041b0:	e005      	b.n	80041be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	60fb      	str	r3, [r7, #12]

      break;
 80041ba:	e000      	b.n	80041be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80041bc:	bf00      	nop
  }

  return tmpreg;
 80041be:	68fb      	ldr	r3, [r7, #12]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a40      	ldr	r2, [pc, #256]	; (800431c <TIM_Base_SetConfig+0x114>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a3d      	ldr	r2, [pc, #244]	; (8004320 <TIM_Base_SetConfig+0x118>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a3c      	ldr	r2, [pc, #240]	; (8004324 <TIM_Base_SetConfig+0x11c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3b      	ldr	r2, [pc, #236]	; (8004328 <TIM_Base_SetConfig+0x120>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3a      	ldr	r2, [pc, #232]	; (800432c <TIM_Base_SetConfig+0x124>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2f      	ldr	r2, [pc, #188]	; (800431c <TIM_Base_SetConfig+0x114>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01f      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d01b      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <TIM_Base_SetConfig+0x118>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d017      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <TIM_Base_SetConfig+0x11c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <TIM_Base_SetConfig+0x120>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00f      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a29      	ldr	r2, [pc, #164]	; (800432c <TIM_Base_SetConfig+0x124>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a28      	ldr	r2, [pc, #160]	; (8004330 <TIM_Base_SetConfig+0x128>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a27      	ldr	r2, [pc, #156]	; (8004334 <TIM_Base_SetConfig+0x12c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0x9a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <TIM_Base_SetConfig+0x130>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a10      	ldr	r2, [pc, #64]	; (800431c <TIM_Base_SetConfig+0x114>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00f      	beq.n	8004300 <TIM_Base_SetConfig+0xf8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <TIM_Base_SetConfig+0x124>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_Base_SetConfig+0xf8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a11      	ldr	r2, [pc, #68]	; (8004330 <TIM_Base_SetConfig+0x128>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_Base_SetConfig+0xf8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a10      	ldr	r2, [pc, #64]	; (8004334 <TIM_Base_SetConfig+0x12c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0xf8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0f      	ldr	r2, [pc, #60]	; (8004338 <TIM_Base_SetConfig+0x130>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	615a      	str	r2, [r3, #20]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40013400 	.word	0x40013400
 8004330:	40014000 	.word	0x40014000
 8004334:	40014400 	.word	0x40014400
 8004338:	40014800 	.word	0x40014800

0800433c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004358:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b70      	cmp	r3, #112	; 0x70
 8004388:	d01a      	beq.n	80043c0 <TIM_SlaveTimer_SetConfig+0x84>
 800438a:	2b70      	cmp	r3, #112	; 0x70
 800438c:	d860      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x114>
 800438e:	2b60      	cmp	r3, #96	; 0x60
 8004390:	d054      	beq.n	800443c <TIM_SlaveTimer_SetConfig+0x100>
 8004392:	2b60      	cmp	r3, #96	; 0x60
 8004394:	d85c      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x114>
 8004396:	2b50      	cmp	r3, #80	; 0x50
 8004398:	d046      	beq.n	8004428 <TIM_SlaveTimer_SetConfig+0xec>
 800439a:	2b50      	cmp	r3, #80	; 0x50
 800439c:	d858      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x114>
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d019      	beq.n	80043d6 <TIM_SlaveTimer_SetConfig+0x9a>
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d854      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x114>
 80043a6:	2b30      	cmp	r3, #48	; 0x30
 80043a8:	d055      	beq.n	8004456 <TIM_SlaveTimer_SetConfig+0x11a>
 80043aa:	2b30      	cmp	r3, #48	; 0x30
 80043ac:	d850      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x114>
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d051      	beq.n	8004456 <TIM_SlaveTimer_SetConfig+0x11a>
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d84c      	bhi.n	8004450 <TIM_SlaveTimer_SetConfig+0x114>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04d      	beq.n	8004456 <TIM_SlaveTimer_SetConfig+0x11a>
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d04b      	beq.n	8004456 <TIM_SlaveTimer_SetConfig+0x11a>
 80043be:	e047      	b.n	8004450 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f000 f9cb 	bl	800476a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80043d4:	e040      	b.n	8004458 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d101      	bne.n	80043e2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e03b      	b.n	800445a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1a      	ldr	r2, [r3, #32]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004408:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	4313      	orrs	r3, r2
 8004414:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	621a      	str	r2, [r3, #32]
      break;
 8004426:	e017      	b.n	8004458 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	461a      	mov	r2, r3
 8004436:	f000 f883 	bl	8004540 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800443a:	e00d      	b.n	8004458 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	461a      	mov	r2, r3
 800444a:	f000 f8e5 	bl	8004618 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800444e:	e003      	b.n	8004458 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	75fb      	strb	r3, [r7, #23]
      break;
 8004454:	e000      	b.n	8004458 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004456:	bf00      	nop
  }

  return status;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <TIM_TI1_SetConfig+0xc4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d017      	beq.n	80044c2 <TIM_TI1_SetConfig+0x5e>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d013      	beq.n	80044c2 <TIM_TI1_SetConfig+0x5e>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a23      	ldr	r2, [pc, #140]	; (800452c <TIM_TI1_SetConfig+0xc8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00f      	beq.n	80044c2 <TIM_TI1_SetConfig+0x5e>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a22      	ldr	r2, [pc, #136]	; (8004530 <TIM_TI1_SetConfig+0xcc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <TIM_TI1_SetConfig+0x5e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a21      	ldr	r2, [pc, #132]	; (8004534 <TIM_TI1_SetConfig+0xd0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_TI1_SetConfig+0x5e>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a20      	ldr	r2, [pc, #128]	; (8004538 <TIM_TI1_SetConfig+0xd4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_TI1_SetConfig+0x5e>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a1f      	ldr	r2, [pc, #124]	; (800453c <TIM_TI1_SetConfig+0xd8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <TIM_TI1_SetConfig+0x62>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <TIM_TI1_SetConfig+0x64>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e003      	b.n	80044e6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f023 030a 	bic.w	r3, r3, #10
 8004500:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f003 030a 	and.w	r3, r3, #10
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40014000 	.word	0x40014000

08004540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f023 0201 	bic.w	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f023 030a 	bic.w	r3, r3, #10
 800457c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800459e:	b480      	push	{r7}
 80045a0:	b087      	sub	sp, #28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f023 0210 	bic.w	r2, r3, #16
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	031b      	lsls	r3, r3, #12
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 0210 	bic.w	r2, r3, #16
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004642:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	031b      	lsls	r3, r3, #12
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004654:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 0303 	bic.w	r3, r3, #3
 80046a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80046c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800472e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	031b      	lsls	r3, r3, #12
 8004734:	b29b      	uxth	r3, r3
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004742:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	031b      	lsls	r3, r3, #12
 8004748:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800476a:	b480      	push	{r7}
 800476c:	b087      	sub	sp, #28
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004784:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	021a      	lsls	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	431a      	orrs	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	609a      	str	r2, [r3, #8]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e068      	b.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d108      	bne.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01d      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d018      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00e      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10c      	bne.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4313      	orrs	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40013400 	.word	0x40013400
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	40014000 	.word	0x40014000

080048bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e040      	b.n	800498c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc faf4 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2224      	movs	r2, #36	; 0x24
 8004924:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0201 	bic.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fb24 	bl	8004f84 <UART_SetConfig>
 800493c:	4603      	mov	r3, r0
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e022      	b.n	800498c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fda2 	bl	8005498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004972:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fe29 	bl	80055dc <UART_CheckIdleState>
 800498a:	4603      	mov	r3, r0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b0ba      	sub	sp, #232	; 0xe8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049be:	f640 030f 	movw	r3, #2063	; 0x80f
 80049c2:	4013      	ands	r3, r2
 80049c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d115      	bne.n	80049fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00f      	beq.n	80049fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 82a6 	beq.w	8004f3e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
      }
      return;
 80049fa:	e2a0      	b.n	8004f3e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80049fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8117 	beq.w	8004c34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a16:	4b85      	ldr	r3, [pc, #532]	; (8004c2c <HAL_UART_IRQHandler+0x298>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 810a 	beq.w	8004c34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d011      	beq.n	8004a50 <HAL_UART_IRQHandler+0xbc>
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a46:	f043 0201 	orr.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <HAL_UART_IRQHandler+0xec>
 8004a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a76:	f043 0204 	orr.w	r2, r3, #4
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x11c>
 8004a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa6:	f043 0202 	orr.w	r2, r3, #2
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d017      	beq.n	8004aec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004acc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00b      	beq.n	8004aec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2208      	movs	r2, #8
 8004ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae2:	f043 0208 	orr.w	r2, r3, #8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_UART_IRQHandler+0x18a>
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b14:	f043 0220 	orr.w	r2, r3, #32
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 820c 	beq.w	8004f42 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d005      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d04f      	beq.n	8004c16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fe3d 	bl	80057f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d141      	bne.n	8004c0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1d9      	bne.n	8004b8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d013      	beq.n	8004c06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <HAL_UART_IRQHandler+0x29c>)
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fd fa42 	bl	8002074 <HAL_DMA_Abort_IT>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d017      	beq.n	8004c26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c00:	4610      	mov	r0, r2
 8004c02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	e00f      	b.n	8004c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9a6 	bl	8004f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	e00b      	b.n	8004c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9a2 	bl	8004f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	e007      	b.n	8004c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f99e 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c24:	e18d      	b.n	8004f42 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c26:	bf00      	nop
    return;
 8004c28:	e18b      	b.n	8004f42 <HAL_UART_IRQHandler+0x5ae>
 8004c2a:	bf00      	nop
 8004c2c:	04000120 	.word	0x04000120
 8004c30:	080058bd 	.word	0x080058bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	f040 8146 	bne.w	8004eca <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 813f 	beq.w	8004eca <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8138 	beq.w	8004eca <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2210      	movs	r2, #16
 8004c60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	f040 80b4 	bne.w	8004dda <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 815f 	beq.w	8004f46 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c92:	429a      	cmp	r2, r3
 8004c94:	f080 8157 	bcs.w	8004f46 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 8085 	bne.w	8004dbe <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ce2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1da      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3308      	adds	r3, #8
 8004d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e1      	bne.n	8004cfe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e3      	bne.n	8004d3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8e:	f023 0310 	bic.w	r3, r3, #16
 8004d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004da2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e4      	bne.n	8004d7e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fd f91d 	bl	8001ff8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f8ca 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dd8:	e0b5      	b.n	8004f46 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 80a7 	beq.w	8004f4a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80a2 	beq.w	8004f4a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e28:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e4      	bne.n	8004e06 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3308      	adds	r3, #8
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e60:	633a      	str	r2, [r7, #48]	; 0x30
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e3      	bne.n	8004e3c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0310 	bic.w	r3, r3, #16
 8004e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	69b9      	ldr	r1, [r7, #24]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e4      	bne.n	8004e86 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f852 	bl	8004f6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ec8:	e03f      	b.n	8004f4a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x560>
 8004ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004eea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fd25 	bl	800593c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ef2:	e02d      	b.n	8004f50 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00e      	beq.n	8004f1e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01c      	beq.n	8004f4e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
    }
    return;
 8004f1c:	e017      	b.n	8004f4e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d012      	beq.n	8004f50 <HAL_UART_IRQHandler+0x5bc>
 8004f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fcd6 	bl	80058e8 <UART_EndTransmit_IT>
    return;
 8004f3c:	e008      	b.n	8004f50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f3e:	bf00      	nop
 8004f40:	e006      	b.n	8004f50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f42:	bf00      	nop
 8004f44:	e004      	b.n	8004f50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f4e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f50:	37e8      	adds	r7, #232	; 0xe8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop

08004f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4bad      	ldr	r3, [pc, #692]	; (8005264 <UART_SetConfig+0x2e0>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	69f9      	ldr	r1, [r7, #28]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4aa2      	ldr	r2, [pc, #648]	; (8005268 <UART_SetConfig+0x2e4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a99      	ldr	r2, [pc, #612]	; (800526c <UART_SetConfig+0x2e8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d121      	bne.n	800504e <UART_SetConfig+0xca>
 800500a:	4b99      	ldr	r3, [pc, #612]	; (8005270 <UART_SetConfig+0x2ec>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	2b03      	cmp	r3, #3
 8005016:	d817      	bhi.n	8005048 <UART_SetConfig+0xc4>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0x9c>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005031 	.word	0x08005031
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005037 	.word	0x08005037
 800502c:	08005043 	.word	0x08005043
 8005030:	2301      	movs	r3, #1
 8005032:	76fb      	strb	r3, [r7, #27]
 8005034:	e0e7      	b.n	8005206 <UART_SetConfig+0x282>
 8005036:	2302      	movs	r3, #2
 8005038:	76fb      	strb	r3, [r7, #27]
 800503a:	e0e4      	b.n	8005206 <UART_SetConfig+0x282>
 800503c:	2304      	movs	r3, #4
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	e0e1      	b.n	8005206 <UART_SetConfig+0x282>
 8005042:	2308      	movs	r3, #8
 8005044:	76fb      	strb	r3, [r7, #27]
 8005046:	e0de      	b.n	8005206 <UART_SetConfig+0x282>
 8005048:	2310      	movs	r3, #16
 800504a:	76fb      	strb	r3, [r7, #27]
 800504c:	e0db      	b.n	8005206 <UART_SetConfig+0x282>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a88      	ldr	r2, [pc, #544]	; (8005274 <UART_SetConfig+0x2f0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d132      	bne.n	80050be <UART_SetConfig+0x13a>
 8005058:	4b85      	ldr	r3, [pc, #532]	; (8005270 <UART_SetConfig+0x2ec>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d828      	bhi.n	80050b8 <UART_SetConfig+0x134>
 8005066:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0xe8>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050b9 	.word	0x080050b9
 8005078:	080050b9 	.word	0x080050b9
 800507c:	080050ad 	.word	0x080050ad
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050b9 	.word	0x080050b9
 8005088:	080050b9 	.word	0x080050b9
 800508c:	080050a7 	.word	0x080050a7
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050b9 	.word	0x080050b9
 800509c:	080050b3 	.word	0x080050b3
 80050a0:	2300      	movs	r3, #0
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e0af      	b.n	8005206 <UART_SetConfig+0x282>
 80050a6:	2302      	movs	r3, #2
 80050a8:	76fb      	strb	r3, [r7, #27]
 80050aa:	e0ac      	b.n	8005206 <UART_SetConfig+0x282>
 80050ac:	2304      	movs	r3, #4
 80050ae:	76fb      	strb	r3, [r7, #27]
 80050b0:	e0a9      	b.n	8005206 <UART_SetConfig+0x282>
 80050b2:	2308      	movs	r3, #8
 80050b4:	76fb      	strb	r3, [r7, #27]
 80050b6:	e0a6      	b.n	8005206 <UART_SetConfig+0x282>
 80050b8:	2310      	movs	r3, #16
 80050ba:	76fb      	strb	r3, [r7, #27]
 80050bc:	e0a3      	b.n	8005206 <UART_SetConfig+0x282>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6d      	ldr	r2, [pc, #436]	; (8005278 <UART_SetConfig+0x2f4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d120      	bne.n	800510a <UART_SetConfig+0x186>
 80050c8:	4b69      	ldr	r3, [pc, #420]	; (8005270 <UART_SetConfig+0x2ec>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050d2:	2b30      	cmp	r3, #48	; 0x30
 80050d4:	d013      	beq.n	80050fe <UART_SetConfig+0x17a>
 80050d6:	2b30      	cmp	r3, #48	; 0x30
 80050d8:	d814      	bhi.n	8005104 <UART_SetConfig+0x180>
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d009      	beq.n	80050f2 <UART_SetConfig+0x16e>
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d810      	bhi.n	8005104 <UART_SetConfig+0x180>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <UART_SetConfig+0x168>
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d006      	beq.n	80050f8 <UART_SetConfig+0x174>
 80050ea:	e00b      	b.n	8005104 <UART_SetConfig+0x180>
 80050ec:	2300      	movs	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e089      	b.n	8005206 <UART_SetConfig+0x282>
 80050f2:	2302      	movs	r3, #2
 80050f4:	76fb      	strb	r3, [r7, #27]
 80050f6:	e086      	b.n	8005206 <UART_SetConfig+0x282>
 80050f8:	2304      	movs	r3, #4
 80050fa:	76fb      	strb	r3, [r7, #27]
 80050fc:	e083      	b.n	8005206 <UART_SetConfig+0x282>
 80050fe:	2308      	movs	r3, #8
 8005100:	76fb      	strb	r3, [r7, #27]
 8005102:	e080      	b.n	8005206 <UART_SetConfig+0x282>
 8005104:	2310      	movs	r3, #16
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	e07d      	b.n	8005206 <UART_SetConfig+0x282>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a5b      	ldr	r2, [pc, #364]	; (800527c <UART_SetConfig+0x2f8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d120      	bne.n	8005156 <UART_SetConfig+0x1d2>
 8005114:	4b56      	ldr	r3, [pc, #344]	; (8005270 <UART_SetConfig+0x2ec>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800511e:	2bc0      	cmp	r3, #192	; 0xc0
 8005120:	d013      	beq.n	800514a <UART_SetConfig+0x1c6>
 8005122:	2bc0      	cmp	r3, #192	; 0xc0
 8005124:	d814      	bhi.n	8005150 <UART_SetConfig+0x1cc>
 8005126:	2b80      	cmp	r3, #128	; 0x80
 8005128:	d009      	beq.n	800513e <UART_SetConfig+0x1ba>
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d810      	bhi.n	8005150 <UART_SetConfig+0x1cc>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <UART_SetConfig+0x1b4>
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d006      	beq.n	8005144 <UART_SetConfig+0x1c0>
 8005136:	e00b      	b.n	8005150 <UART_SetConfig+0x1cc>
 8005138:	2300      	movs	r3, #0
 800513a:	76fb      	strb	r3, [r7, #27]
 800513c:	e063      	b.n	8005206 <UART_SetConfig+0x282>
 800513e:	2302      	movs	r3, #2
 8005140:	76fb      	strb	r3, [r7, #27]
 8005142:	e060      	b.n	8005206 <UART_SetConfig+0x282>
 8005144:	2304      	movs	r3, #4
 8005146:	76fb      	strb	r3, [r7, #27]
 8005148:	e05d      	b.n	8005206 <UART_SetConfig+0x282>
 800514a:	2308      	movs	r3, #8
 800514c:	76fb      	strb	r3, [r7, #27]
 800514e:	e05a      	b.n	8005206 <UART_SetConfig+0x282>
 8005150:	2310      	movs	r3, #16
 8005152:	76fb      	strb	r3, [r7, #27]
 8005154:	e057      	b.n	8005206 <UART_SetConfig+0x282>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a49      	ldr	r2, [pc, #292]	; (8005280 <UART_SetConfig+0x2fc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d125      	bne.n	80051ac <UART_SetConfig+0x228>
 8005160:	4b43      	ldr	r3, [pc, #268]	; (8005270 <UART_SetConfig+0x2ec>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800516e:	d017      	beq.n	80051a0 <UART_SetConfig+0x21c>
 8005170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005174:	d817      	bhi.n	80051a6 <UART_SetConfig+0x222>
 8005176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517a:	d00b      	beq.n	8005194 <UART_SetConfig+0x210>
 800517c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005180:	d811      	bhi.n	80051a6 <UART_SetConfig+0x222>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <UART_SetConfig+0x20a>
 8005186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518a:	d006      	beq.n	800519a <UART_SetConfig+0x216>
 800518c:	e00b      	b.n	80051a6 <UART_SetConfig+0x222>
 800518e:	2300      	movs	r3, #0
 8005190:	76fb      	strb	r3, [r7, #27]
 8005192:	e038      	b.n	8005206 <UART_SetConfig+0x282>
 8005194:	2302      	movs	r3, #2
 8005196:	76fb      	strb	r3, [r7, #27]
 8005198:	e035      	b.n	8005206 <UART_SetConfig+0x282>
 800519a:	2304      	movs	r3, #4
 800519c:	76fb      	strb	r3, [r7, #27]
 800519e:	e032      	b.n	8005206 <UART_SetConfig+0x282>
 80051a0:	2308      	movs	r3, #8
 80051a2:	76fb      	strb	r3, [r7, #27]
 80051a4:	e02f      	b.n	8005206 <UART_SetConfig+0x282>
 80051a6:	2310      	movs	r3, #16
 80051a8:	76fb      	strb	r3, [r7, #27]
 80051aa:	e02c      	b.n	8005206 <UART_SetConfig+0x282>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2d      	ldr	r2, [pc, #180]	; (8005268 <UART_SetConfig+0x2e4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d125      	bne.n	8005202 <UART_SetConfig+0x27e>
 80051b6:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <UART_SetConfig+0x2ec>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c4:	d017      	beq.n	80051f6 <UART_SetConfig+0x272>
 80051c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ca:	d817      	bhi.n	80051fc <UART_SetConfig+0x278>
 80051cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d0:	d00b      	beq.n	80051ea <UART_SetConfig+0x266>
 80051d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d6:	d811      	bhi.n	80051fc <UART_SetConfig+0x278>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <UART_SetConfig+0x260>
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e0:	d006      	beq.n	80051f0 <UART_SetConfig+0x26c>
 80051e2:	e00b      	b.n	80051fc <UART_SetConfig+0x278>
 80051e4:	2300      	movs	r3, #0
 80051e6:	76fb      	strb	r3, [r7, #27]
 80051e8:	e00d      	b.n	8005206 <UART_SetConfig+0x282>
 80051ea:	2302      	movs	r3, #2
 80051ec:	76fb      	strb	r3, [r7, #27]
 80051ee:	e00a      	b.n	8005206 <UART_SetConfig+0x282>
 80051f0:	2304      	movs	r3, #4
 80051f2:	76fb      	strb	r3, [r7, #27]
 80051f4:	e007      	b.n	8005206 <UART_SetConfig+0x282>
 80051f6:	2308      	movs	r3, #8
 80051f8:	76fb      	strb	r3, [r7, #27]
 80051fa:	e004      	b.n	8005206 <UART_SetConfig+0x282>
 80051fc:	2310      	movs	r3, #16
 80051fe:	76fb      	strb	r3, [r7, #27]
 8005200:	e001      	b.n	8005206 <UART_SetConfig+0x282>
 8005202:	2310      	movs	r3, #16
 8005204:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a17      	ldr	r2, [pc, #92]	; (8005268 <UART_SetConfig+0x2e4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	f040 8087 	bne.w	8005320 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005212:	7efb      	ldrb	r3, [r7, #27]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d837      	bhi.n	8005288 <UART_SetConfig+0x304>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0x29c>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	08005245 	.word	0x08005245
 8005224:	08005289 	.word	0x08005289
 8005228:	0800524d 	.word	0x0800524d
 800522c:	08005289 	.word	0x08005289
 8005230:	08005253 	.word	0x08005253
 8005234:	08005289 	.word	0x08005289
 8005238:	08005289 	.word	0x08005289
 800523c:	08005289 	.word	0x08005289
 8005240:	0800525b 	.word	0x0800525b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005244:	f7fd fede 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8005248:	6178      	str	r0, [r7, #20]
        break;
 800524a:	e022      	b.n	8005292 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <UART_SetConfig+0x300>)
 800524e:	617b      	str	r3, [r7, #20]
        break;
 8005250:	e01f      	b.n	8005292 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005252:	f7fd fe3f 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8005256:	6178      	str	r0, [r7, #20]
        break;
 8005258:	e01b      	b.n	8005292 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525e:	617b      	str	r3, [r7, #20]
        break;
 8005260:	e017      	b.n	8005292 <UART_SetConfig+0x30e>
 8005262:	bf00      	nop
 8005264:	efff69f3 	.word	0xefff69f3
 8005268:	40008000 	.word	0x40008000
 800526c:	40013800 	.word	0x40013800
 8005270:	40021000 	.word	0x40021000
 8005274:	40004400 	.word	0x40004400
 8005278:	40004800 	.word	0x40004800
 800527c:	40004c00 	.word	0x40004c00
 8005280:	40005000 	.word	0x40005000
 8005284:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	76bb      	strb	r3, [r7, #26]
        break;
 8005290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80f1 	beq.w	800547c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	4413      	add	r3, r2
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d305      	bcc.n	80052b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d902      	bls.n	80052bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	76bb      	strb	r3, [r7, #26]
 80052ba:	e0df      	b.n	800547c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4618      	mov	r0, r3
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	020b      	lsls	r3, r1, #8
 80052ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052d2:	0202      	lsls	r2, r0, #8
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	6849      	ldr	r1, [r1, #4]
 80052d8:	0849      	lsrs	r1, r1, #1
 80052da:	4608      	mov	r0, r1
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	1814      	adds	r4, r2, r0
 80052e2:	eb43 0501 	adc.w	r5, r3, r1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	4620      	mov	r0, r4
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fa ff6c 	bl	80001d0 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005306:	d308      	bcc.n	800531a <UART_SetConfig+0x396>
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530e:	d204      	bcs.n	800531a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	60da      	str	r2, [r3, #12]
 8005318:	e0b0      	b.n	800547c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	76bb      	strb	r3, [r7, #26]
 800531e:	e0ad      	b.n	800547c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005328:	d15b      	bne.n	80053e2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800532a:	7efb      	ldrb	r3, [r7, #27]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d828      	bhi.n	8005382 <UART_SetConfig+0x3fe>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <UART_SetConfig+0x3b4>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	0800535d 	.word	0x0800535d
 800533c:	08005365 	.word	0x08005365
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005383 	.word	0x08005383
 8005348:	08005373 	.word	0x08005373
 800534c:	08005383 	.word	0x08005383
 8005350:	08005383 	.word	0x08005383
 8005354:	08005383 	.word	0x08005383
 8005358:	0800537b 	.word	0x0800537b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7fd fe52 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8005360:	6178      	str	r0, [r7, #20]
        break;
 8005362:	e013      	b.n	800538c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fd fe64 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 8005368:	6178      	str	r0, [r7, #20]
        break;
 800536a:	e00f      	b.n	800538c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800536c:	4b49      	ldr	r3, [pc, #292]	; (8005494 <UART_SetConfig+0x510>)
 800536e:	617b      	str	r3, [r7, #20]
        break;
 8005370:	e00c      	b.n	800538c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005372:	f7fd fdaf 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8005376:	6178      	str	r0, [r7, #20]
        break;
 8005378:	e008      	b.n	800538c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537e:	617b      	str	r3, [r7, #20]
        break;
 8005380:	e004      	b.n	800538c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	76bb      	strb	r3, [r7, #26]
        break;
 800538a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d074      	beq.n	800547c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	005a      	lsls	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	441a      	add	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b0f      	cmp	r3, #15
 80053ac:	d916      	bls.n	80053dc <UART_SetConfig+0x458>
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b4:	d212      	bcs.n	80053dc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f023 030f 	bic.w	r3, r3, #15
 80053be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	89fb      	ldrh	r3, [r7, #14]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	89fa      	ldrh	r2, [r7, #14]
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	e04f      	b.n	800547c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	76bb      	strb	r3, [r7, #26]
 80053e0:	e04c      	b.n	800547c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e2:	7efb      	ldrb	r3, [r7, #27]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d828      	bhi.n	800543a <UART_SetConfig+0x4b6>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x46c>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543b 	.word	0x0800543b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800543b 	.word	0x0800543b
 8005408:	0800543b 	.word	0x0800543b
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fd fdf6 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8005418:	6178      	str	r0, [r7, #20]
        break;
 800541a:	e013      	b.n	8005444 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fd fe08 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 8005420:	6178      	str	r0, [r7, #20]
        break;
 8005422:	e00f      	b.n	8005444 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <UART_SetConfig+0x510>)
 8005426:	617b      	str	r3, [r7, #20]
        break;
 8005428:	e00c      	b.n	8005444 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fd fd53 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 800542e:	6178      	str	r0, [r7, #20]
        break;
 8005430:	e008      	b.n	8005444 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005436:	617b      	str	r3, [r7, #20]
        break;
 8005438:	e004      	b.n	8005444 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	76bb      	strb	r3, [r7, #26]
        break;
 8005442:	bf00      	nop
    }

    if (pclk != 0U)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d018      	beq.n	800547c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	085a      	lsrs	r2, r3, #1
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	441a      	add	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b0f      	cmp	r3, #15
 8005462:	d909      	bls.n	8005478 <UART_SetConfig+0x4f4>
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546a:	d205      	bcs.n	8005478 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	e001      	b.n	800547c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005488:	7ebb      	ldrb	r3, [r7, #26]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bdb0      	pop	{r4, r5, r7, pc}
 8005492:	bf00      	nop
 8005494:	00f42400 	.word	0x00f42400

08005498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01a      	beq.n	80055ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005596:	d10a      	bne.n	80055ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055ec:	f7fb fdca 	bl	8001184 <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d10e      	bne.n	800561e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f82d 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e023      	b.n	8005666 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d10e      	bne.n	800564a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f817 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e00d      	b.n	8005666 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b09c      	sub	sp, #112	; 0x70
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567e:	e0a5      	b.n	80057cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	f000 80a1 	beq.w	80057cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568a:	f7fb fd7b 	bl	8001184 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005696:	429a      	cmp	r2, r3
 8005698:	d302      	bcc.n	80056a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800569a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569c:	2b00      	cmp	r3, #0
 800569e:	d13e      	bne.n	800571e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056b4:	667b      	str	r3, [r7, #100]	; 0x64
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	663b      	str	r3, [r7, #96]	; 0x60
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80056f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e067      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d04f      	beq.n	80057cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800573a:	d147      	bne.n	80057cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005744:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800575a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
 8005766:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800576a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	613b      	str	r3, [r7, #16]
   return(result);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005798:	623a      	str	r2, [r7, #32]
 800579a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	69f9      	ldr	r1, [r7, #28]
 800579e:	6a3a      	ldr	r2, [r7, #32]
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e5      	bne.n	8005778 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e010      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4013      	ands	r3, r2
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	f43f af4a 	beq.w	8005680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3770      	adds	r7, #112	; 0x70
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b095      	sub	sp, #84	; 0x54
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581c:	643b      	str	r3, [r7, #64]	; 0x40
 800581e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e6      	bne.n	80057fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3308      	adds	r3, #8
 8005836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	64bb      	str	r3, [r7, #72]	; 0x48
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e5      	bne.n	8005830 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	2b01      	cmp	r3, #1
 800586a:	d118      	bne.n	800589e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	60bb      	str	r3, [r7, #8]
   return(result);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f023 0310 	bic.w	r3, r3, #16
 8005880:	647b      	str	r3, [r7, #68]	; 0x44
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6979      	ldr	r1, [r7, #20]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	613b      	str	r3, [r7, #16]
   return(result);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e6      	bne.n	800586c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058b0:	bf00      	nop
 80058b2:	3754      	adds	r7, #84	; 0x54
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7ff fb3c 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e0:	bf00      	nop
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6979      	ldr	r1, [r7, #20]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	613b      	str	r3, [r7, #16]
   return(result);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e6      	bne.n	80058f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fb fa56 	bl	8000de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005934:	bf00      	nop
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <__NVIC_SetPriority>:
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800595c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005960:	2b00      	cmp	r3, #0
 8005962:	db0a      	blt.n	800597a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	490c      	ldr	r1, [pc, #48]	; (800599c <__NVIC_SetPriority+0x4c>)
 800596a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596e:	0112      	lsls	r2, r2, #4
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	440b      	add	r3, r1
 8005974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005978:	e00a      	b.n	8005990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	4908      	ldr	r1, [pc, #32]	; (80059a0 <__NVIC_SetPriority+0x50>)
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	3b04      	subs	r3, #4
 8005988:	0112      	lsls	r2, r2, #4
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	440b      	add	r3, r1
 800598e:	761a      	strb	r2, [r3, #24]
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	e000e100 	.word	0xe000e100
 80059a0:	e000ed00 	.word	0xe000ed00

080059a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <SysTick_Handler+0x1c>)
 80059aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059ac:	f001 feb2 	bl	8007714 <xTaskGetSchedulerState>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d001      	beq.n	80059ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80059b6:	f002 fe27 	bl	8008608 <xPortSysTickHandler>
  }
}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	e000e010 	.word	0xe000e010

080059c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80059c8:	2100      	movs	r1, #0
 80059ca:	f06f 0004 	mvn.w	r0, #4
 80059ce:	f7ff ffbf 	bl	8005950 <__NVIC_SetPriority>
#endif
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059de:	f3ef 8305 	mrs	r3, IPSR
 80059e2:	603b      	str	r3, [r7, #0]
  return(result);
 80059e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80059ea:	f06f 0305 	mvn.w	r3, #5
 80059ee:	607b      	str	r3, [r7, #4]
 80059f0:	e00c      	b.n	8005a0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059f2:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <osKernelInitialize+0x44>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <osKernelInitialize+0x44>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	607b      	str	r3, [r7, #4]
 8005a04:	e002      	b.n	8005a0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a0c:	687b      	ldr	r3, [r7, #4]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20000038 	.word	0x20000038

08005a20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a26:	f3ef 8305 	mrs	r3, IPSR
 8005a2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005a2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a32:	f06f 0305 	mvn.w	r3, #5
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	e010      	b.n	8005a5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <osKernelStart+0x48>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d109      	bne.n	8005a56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a42:	f7ff ffbf 	bl	80059c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <osKernelStart+0x48>)
 8005a48:	2202      	movs	r2, #2
 8005a4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a4c:	f001 fa1a 	bl	8006e84 <vTaskStartScheduler>
      stat = osOK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	e002      	b.n	8005a5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a5c:	687b      	ldr	r3, [r7, #4]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000038 	.word	0x20000038

08005a6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08e      	sub	sp, #56	; 0x38
 8005a70:	af04      	add	r7, sp, #16
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a7c:	f3ef 8305 	mrs	r3, IPSR
 8005a80:	617b      	str	r3, [r7, #20]
  return(result);
 8005a82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d17e      	bne.n	8005b86 <osThreadNew+0x11a>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d07b      	beq.n	8005b86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a92:	2318      	movs	r3, #24
 8005a94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d045      	beq.n	8005b32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <osThreadNew+0x48>
        name = attr->name;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <osThreadNew+0x6e>
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b38      	cmp	r3, #56	; 0x38
 8005acc:	d805      	bhi.n	8005ada <osThreadNew+0x6e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <osThreadNew+0x72>
        return (NULL);
 8005ada:	2300      	movs	r3, #0
 8005adc:	e054      	b.n	8005b88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00e      	beq.n	8005b14 <osThreadNew+0xa8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2b5b      	cmp	r3, #91	; 0x5b
 8005afc:	d90a      	bls.n	8005b14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d006      	beq.n	8005b14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <osThreadNew+0xa8>
        mem = 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	e010      	b.n	8005b36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10c      	bne.n	8005b36 <osThreadNew+0xca>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d108      	bne.n	8005b36 <osThreadNew+0xca>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <osThreadNew+0xca>
          mem = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e001      	b.n	8005b36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d110      	bne.n	8005b5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b44:	9202      	str	r2, [sp, #8]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 ffc0 	bl	8006ad8 <xTaskCreateStatic>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	e013      	b.n	8005b86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d110      	bne.n	8005b86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	f107 0310 	add.w	r3, r7, #16
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f001 f80b 	bl	8006b92 <xTaskCreate>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d001      	beq.n	8005b86 <osThreadNew+0x11a>
            hTask = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b86:	693b      	ldr	r3, [r7, #16]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3728      	adds	r7, #40	; 0x28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b98:	f3ef 8305 	mrs	r3, IPSR
 8005b9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <osDelay+0x1c>
    stat = osErrorISR;
 8005ba4:	f06f 0305 	mvn.w	r3, #5
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e007      	b.n	8005bbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 f930 	bl	8006e1c <vTaskDelay>
    }
  }

  return (stat);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4a06      	ldr	r2, [pc, #24]	; (8005bf8 <vApplicationGetIdleTaskMemory+0x30>)
 8005bde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	601a      	str	r2, [r3, #0]
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	2000003c 	.word	0x2000003c
 8005bf8:	20000098 	.word	0x20000098

08005bfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a07      	ldr	r2, [pc, #28]	; (8005c28 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <vApplicationGetTimerTaskMemory+0x30>)
 8005c12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	20000298 	.word	0x20000298
 8005c2c:	200002f4 	.word	0x200002f4

08005c30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f103 0208 	add.w	r2, r3, #8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295
 8005c48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f103 0208 	add.w	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f103 0208 	add.w	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d103      	bne.n	8005cf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e00c      	b.n	8005d0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e002      	b.n	8005d00 <vListInsert+0x2e>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d2f6      	bcs.n	8005cfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6892      	ldr	r2, [r2, #8]
 8005d5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6852      	ldr	r2, [r2, #4]
 8005d64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d103      	bne.n	8005d78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	1e5a      	subs	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dc2:	f002 fb8f 	bl	80084e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	3b01      	subs	r3, #1
 8005df4:	68f9      	ldr	r1, [r7, #12]
 8005df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	22ff      	movs	r2, #255	; 0xff
 8005e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d114      	bne.n	8005e42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01a      	beq.n	8005e56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3310      	adds	r3, #16
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fab7 	bl	8007398 <xTaskRemoveFromEventList>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d012      	beq.n	8005e56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <xQueueGenericReset+0xcc>)
 8005e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	e009      	b.n	8005e56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3310      	adds	r3, #16
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fef2 	bl	8005c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3324      	adds	r3, #36	; 0x24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff feed 	bl	8005c30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e56:	f002 fb75 	bl	8008544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e5a:	2301      	movs	r3, #1
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08e      	sub	sp, #56	; 0x38
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <xQueueGenericCreateStatic+0x52>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <xQueueGenericCreateStatic+0x56>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueGenericCreateStatic+0x58>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	623b      	str	r3, [r7, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <xQueueGenericCreateStatic+0x7e>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <xQueueGenericCreateStatic+0x82>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xQueueGenericCreateStatic+0x84>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	61fb      	str	r3, [r7, #28]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f06:	2350      	movs	r3, #80	; 0x50
 8005f08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b50      	cmp	r3, #80	; 0x50
 8005f0e:	d00a      	beq.n	8005f26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	61bb      	str	r3, [r7, #24]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00d      	beq.n	8005f4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	4613      	mov	r3, r2
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f83f 	bl	8005fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3730      	adds	r7, #48	; 0x30
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	613b      	str	r3, [r7, #16]
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	3350      	adds	r3, #80	; 0x50
 8005f90:	4618      	mov	r0, r3
 8005f92:	f002 fbc9 	bl	8008728 <pvPortMalloc>
 8005f96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	3350      	adds	r3, #80	; 0x50
 8005fa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fb0:	79fa      	ldrb	r2, [r7, #7]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f805 	bl	8005fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d103      	bne.n	8005fe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e002      	b.n	8005fee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	69b8      	ldr	r0, [r7, #24]
 8005ffe:	f7ff fecb 	bl	8005d98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006032:	2300      	movs	r3, #0
 8006034:	2200      	movs	r2, #0
 8006036:	2100      	movs	r1, #0
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f81d 	bl	8006078 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006046:	b580      	push	{r7, lr}
 8006048:	b086      	sub	sp, #24
 800604a:	af00      	add	r7, sp, #0
 800604c:	4603      	mov	r3, r0
 800604e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	461a      	mov	r2, r3
 800605c:	6939      	ldr	r1, [r7, #16]
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	f7ff ff7a 	bl	8005f58 <xQueueGenericCreate>
 8006064:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff ffd3 	bl	8006012 <prvInitialiseMutex>

		return xNewQueue;
 800606c:	68fb      	ldr	r3, [r7, #12]
	}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08e      	sub	sp, #56	; 0x38
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006086:	2300      	movs	r3, #0
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueGenericSend+0x32>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <xQueueGenericSend+0x40>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <xQueueGenericSend+0x44>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <xQueueGenericSend+0x46>
 80060bc:	2300      	movs	r3, #0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <xQueueGenericSend+0x60>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d103      	bne.n	80060e6 <xQueueGenericSend+0x6e>
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <xQueueGenericSend+0x72>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <xQueueGenericSend+0x74>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xQueueGenericSend+0x8e>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	623b      	str	r3, [r7, #32]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006106:	f001 fb05 	bl	8007714 <xTaskGetSchedulerState>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <xQueueGenericSend+0x9e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <xQueueGenericSend+0xa2>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <xQueueGenericSend+0xa4>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <xQueueGenericSend+0xbe>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	61fb      	str	r3, [r7, #28]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006136:	f002 f9d5 	bl	80084e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	429a      	cmp	r2, r3
 8006144:	d302      	bcc.n	800614c <xQueueGenericSend+0xd4>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d129      	bne.n	80061a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006152:	f000 fb52 	bl	80067fa <prvCopyDataToQueue>
 8006156:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	3324      	adds	r3, #36	; 0x24
 8006164:	4618      	mov	r0, r3
 8006166:	f001 f917 	bl	8007398 <xTaskRemoveFromEventList>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006170:	4b3f      	ldr	r3, [pc, #252]	; (8006270 <xQueueGenericSend+0x1f8>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	e00a      	b.n	8006198 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006188:	4b39      	ldr	r3, [pc, #228]	; (8006270 <xQueueGenericSend+0x1f8>)
 800618a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006198:	f002 f9d4 	bl	8008544 <vPortExitCritical>
				return pdPASS;
 800619c:	2301      	movs	r3, #1
 800619e:	e063      	b.n	8006268 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061a6:	f002 f9cd 	bl	8008544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	e05c      	b.n	8006268 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061b4:	f107 0314 	add.w	r3, r7, #20
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 f951 	bl	8007460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061be:	2301      	movs	r3, #1
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061c2:	f002 f9bf 	bl	8008544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061c6:	f000 fec3 	bl	8006f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ca:	f002 f98b 	bl	80084e4 <vPortEnterCritical>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d4:	b25b      	sxtb	r3, r3
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d103      	bne.n	80061e4 <xQueueGenericSend+0x16c>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d103      	bne.n	80061fa <xQueueGenericSend+0x182>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061fa:	f002 f9a3 	bl	8008544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061fe:	1d3a      	adds	r2, r7, #4
 8006200:	f107 0314 	add.w	r3, r7, #20
 8006204:	4611      	mov	r1, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f001 f940 	bl	800748c <xTaskCheckForTimeOut>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d124      	bne.n	800625c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006214:	f000 fbe9 	bl	80069ea <prvIsQueueFull>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d018      	beq.n	8006250 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	3310      	adds	r3, #16
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4611      	mov	r1, r2
 8006226:	4618      	mov	r0, r3
 8006228:	f001 f866 	bl	80072f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800622c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800622e:	f000 fb74 	bl	800691a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006232:	f000 fe9b 	bl	8006f6c <xTaskResumeAll>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	f47f af7c 	bne.w	8006136 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <xQueueGenericSend+0x1f8>)
 8006240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	e772      	b.n	8006136 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006252:	f000 fb62 	bl	800691a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006256:	f000 fe89 	bl	8006f6c <xTaskResumeAll>
 800625a:	e76c      	b.n	8006136 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800625c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800625e:	f000 fb5c 	bl	800691a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006262:	f000 fe83 	bl	8006f6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006268:	4618      	mov	r0, r3
 800626a:	3738      	adds	r7, #56	; 0x38
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b090      	sub	sp, #64	; 0x40
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <xQueueGenericSendFromISR+0x3c>
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <xQueueGenericSendFromISR+0x40>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <xQueueGenericSendFromISR+0x42>
 80062b4:	2300      	movs	r3, #0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d103      	bne.n	80062de <xQueueGenericSendFromISR+0x6a>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <xQueueGenericSendFromISR+0x6e>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <xQueueGenericSendFromISR+0x70>
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	623b      	str	r3, [r7, #32]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062fe:	f002 f9d3 	bl	80086a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006302:	f3ef 8211 	mrs	r2, BASEPRI
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	61fa      	str	r2, [r7, #28]
 8006318:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800631a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <xQueueGenericSendFromISR+0xbc>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d12f      	bne.n	8006390 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006346:	f000 fa58 	bl	80067fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800634a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d112      	bne.n	800637a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d016      	beq.n	800638a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	3324      	adds	r3, #36	; 0x24
 8006360:	4618      	mov	r0, r3
 8006362:	f001 f819 	bl	8007398 <xTaskRemoveFromEventList>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00e      	beq.n	800638a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	e007      	b.n	800638a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800637a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800637e:	3301      	adds	r3, #1
 8006380:	b2db      	uxtb	r3, r3
 8006382:	b25a      	sxtb	r2, r3
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800638a:	2301      	movs	r3, #1
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800638e:	e001      	b.n	8006394 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800639e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3740      	adds	r7, #64	; 0x40
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <xQueueReceive+0x30>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	623b      	str	r3, [r7, #32]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d103      	bne.n	80063ea <xQueueReceive+0x3e>
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <xQueueReceive+0x42>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xQueueReceive+0x44>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xQueueReceive+0x5e>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	61fb      	str	r3, [r7, #28]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800640a:	f001 f983 	bl	8007714 <xTaskGetSchedulerState>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <xQueueReceive+0x6e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <xQueueReceive+0x72>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xQueueReceive+0x74>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xQueueReceive+0x8e>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	61bb      	str	r3, [r7, #24]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800643a:	f002 f853 	bl	80084e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01f      	beq.n	800648a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800644e:	f000 fa3e 	bl	80068ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1e5a      	subs	r2, r3, #1
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00f      	beq.n	8006482 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	3310      	adds	r3, #16
 8006466:	4618      	mov	r0, r3
 8006468:	f000 ff96 	bl	8007398 <xTaskRemoveFromEventList>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006472:	4b3d      	ldr	r3, [pc, #244]	; (8006568 <xQueueReceive+0x1bc>)
 8006474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006482:	f002 f85f 	bl	8008544 <vPortExitCritical>
				return pdPASS;
 8006486:	2301      	movs	r3, #1
 8006488:	e069      	b.n	800655e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006490:	f002 f858 	bl	8008544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006494:	2300      	movs	r3, #0
 8006496:	e062      	b.n	800655e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800649e:	f107 0310 	add.w	r3, r7, #16
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 ffdc 	bl	8007460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ac:	f002 f84a 	bl	8008544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b0:	f000 fd4e 	bl	8006f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064b4:	f002 f816 	bl	80084e4 <vPortEnterCritical>
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064be:	b25b      	sxtb	r3, r3
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c4:	d103      	bne.n	80064ce <xQueueReceive+0x122>
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064d4:	b25b      	sxtb	r3, r3
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d103      	bne.n	80064e4 <xQueueReceive+0x138>
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e4:	f002 f82e 	bl	8008544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064e8:	1d3a      	adds	r2, r7, #4
 80064ea:	f107 0310 	add.w	r3, r7, #16
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 ffcb 	bl	800748c <xTaskCheckForTimeOut>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d123      	bne.n	8006544 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fe:	f000 fa5e 	bl	80069be <prvIsQueueEmpty>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d017      	beq.n	8006538 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	3324      	adds	r3, #36	; 0x24
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4611      	mov	r1, r2
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fef1 	bl	80072f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006518:	f000 f9ff 	bl	800691a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800651c:	f000 fd26 	bl	8006f6c <xTaskResumeAll>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d189      	bne.n	800643a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006526:	4b10      	ldr	r3, [pc, #64]	; (8006568 <xQueueReceive+0x1bc>)
 8006528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	e780      	b.n	800643a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800653a:	f000 f9ee 	bl	800691a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800653e:	f000 fd15 	bl	8006f6c <xTaskResumeAll>
 8006542:	e77a      	b.n	800643a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006546:	f000 f9e8 	bl	800691a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800654a:	f000 fd0f 	bl	8006f6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800654e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006550:	f000 fa35 	bl	80069be <prvIsQueueEmpty>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	f43f af6f 	beq.w	800643a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800655c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800655e:	4618      	mov	r0, r3
 8006560:	3730      	adds	r7, #48	; 0x30
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08e      	sub	sp, #56	; 0x38
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800657e:	2300      	movs	r3, #0
 8006580:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	623b      	str	r3, [r7, #32]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	61fb      	str	r3, [r7, #28]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065bc:	f001 f8aa 	bl	8007714 <xTaskGetSchedulerState>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <xQueueSemaphoreTake+0x60>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <xQueueSemaphoreTake+0x64>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <xQueueSemaphoreTake+0x66>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	61bb      	str	r3, [r7, #24]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ec:	f001 ff7a 	bl	80084e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d024      	beq.n	8006646 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	1e5a      	subs	r2, r3, #1
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800660c:	f001 f9f8 	bl	8007a00 <pvTaskIncrementMutexHeldCount>
 8006610:	4602      	mov	r2, r0
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00f      	beq.n	800663e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	3310      	adds	r3, #16
 8006622:	4618      	mov	r0, r3
 8006624:	f000 feb8 	bl	8007398 <xTaskRemoveFromEventList>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800662e:	4b54      	ldr	r3, [pc, #336]	; (8006780 <xQueueSemaphoreTake+0x214>)
 8006630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800663e:	f001 ff81 	bl	8008544 <vPortExitCritical>
				return pdPASS;
 8006642:	2301      	movs	r3, #1
 8006644:	e097      	b.n	8006776 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d111      	bne.n	8006670 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	617b      	str	r3, [r7, #20]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006668:	f001 ff6c 	bl	8008544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800666c:	2300      	movs	r3, #0
 800666e:	e082      	b.n	8006776 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006676:	f107 030c 	add.w	r3, r7, #12
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fef0 	bl	8007460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006684:	f001 ff5e 	bl	8008544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006688:	f000 fc62 	bl	8006f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800668c:	f001 ff2a 	bl	80084e4 <vPortEnterCritical>
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006696:	b25b      	sxtb	r3, r3
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669c:	d103      	bne.n	80066a6 <xQueueSemaphoreTake+0x13a>
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d103      	bne.n	80066bc <xQueueSemaphoreTake+0x150>
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066bc:	f001 ff42 	bl	8008544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066c0:	463a      	mov	r2, r7
 80066c2:	f107 030c 	add.w	r3, r7, #12
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fedf 	bl	800748c <xTaskCheckForTimeOut>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d132      	bne.n	800673a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066d6:	f000 f972 	bl	80069be <prvIsQueueEmpty>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d026      	beq.n	800672e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d109      	bne.n	80066fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80066e8:	f001 fefc 	bl	80084e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 f82d 	bl	8007750 <xTaskPriorityInherit>
 80066f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80066f8:	f001 ff24 	bl	8008544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	3324      	adds	r3, #36	; 0x24
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	4611      	mov	r1, r2
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fdf7 	bl	80072f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800670a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800670c:	f000 f905 	bl	800691a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006710:	f000 fc2c 	bl	8006f6c <xTaskResumeAll>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	f47f af68 	bne.w	80065ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800671c:	4b18      	ldr	r3, [pc, #96]	; (8006780 <xQueueSemaphoreTake+0x214>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	e75e      	b.n	80065ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800672e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006730:	f000 f8f3 	bl	800691a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006734:	f000 fc1a 	bl	8006f6c <xTaskResumeAll>
 8006738:	e758      	b.n	80065ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800673a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800673c:	f000 f8ed 	bl	800691a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006740:	f000 fc14 	bl	8006f6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006746:	f000 f93a 	bl	80069be <prvIsQueueEmpty>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	f43f af4d 	beq.w	80065ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00d      	beq.n	8006774 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006758:	f001 fec4 	bl	80084e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800675c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800675e:	f000 f834 	bl	80067ca <prvGetDisinheritPriorityAfterTimeout>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800676a:	4618      	mov	r0, r3
 800676c:	f001 f8c6 	bl	80078fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006770:	f001 fee8 	bl	8008544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006776:	4618      	mov	r0, r3
 8006778:	3738      	adds	r7, #56	; 0x38
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10a      	bne.n	80067ac <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60fb      	str	r3, [r7, #12]
}
 80067a8:	bf00      	nop
 80067aa:	e7fe      	b.n	80067aa <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80067ac:	f001 fe9a 	bl	80084e4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80067bc:	f001 fec2 	bl	8008544 <vPortExitCritical>

	return uxReturn;
 80067c0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d006      	beq.n	80067e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e001      	b.n	80067ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80067ec:	68fb      	ldr	r3, [r7, #12]
	}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10d      	bne.n	8006834 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d14d      	bne.n	80068bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fffb 	bl	8007820 <xTaskPriorityDisinherit>
 800682a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	609a      	str	r2, [r3, #8]
 8006832:	e043      	b.n	80068bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d119      	bne.n	800686e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6858      	ldr	r0, [r3, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	461a      	mov	r2, r3
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	f002 f97d 	bl	8008b44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	441a      	add	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	d32b      	bcc.n	80068bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	605a      	str	r2, [r3, #4]
 800686c:	e026      	b.n	80068bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68d8      	ldr	r0, [r3, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	461a      	mov	r2, r3
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	f002 f963 	bl	8008b44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	425b      	negs	r3, r3
 8006888:	441a      	add	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d207      	bcs.n	80068aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	425b      	negs	r3, r3
 80068a4:	441a      	add	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d105      	bne.n	80068bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068c4:	697b      	ldr	r3, [r7, #20]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d018      	beq.n	8006912 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	441a      	add	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d303      	bcc.n	8006902 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68d9      	ldr	r1, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	461a      	mov	r2, r3
 800690c:	6838      	ldr	r0, [r7, #0]
 800690e:	f002 f919 	bl	8008b44 <memcpy>
	}
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006922:	f001 fddf 	bl	80084e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800692c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800692e:	e011      	b.n	8006954 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d012      	beq.n	800695e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3324      	adds	r3, #36	; 0x24
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fd2b 	bl	8007398 <xTaskRemoveFromEventList>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006948:	f000 fe02 	bl	8007550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	3b01      	subs	r3, #1
 8006950:	b2db      	uxtb	r3, r3
 8006952:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dce9      	bgt.n	8006930 <prvUnlockQueue+0x16>
 800695c:	e000      	b.n	8006960 <prvUnlockQueue+0x46>
					break;
 800695e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	22ff      	movs	r2, #255	; 0xff
 8006964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006968:	f001 fdec 	bl	8008544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800696c:	f001 fdba 	bl	80084e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006976:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006978:	e011      	b.n	800699e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d012      	beq.n	80069a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3310      	adds	r3, #16
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fd06 	bl	8007398 <xTaskRemoveFromEventList>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006992:	f000 fddd 	bl	8007550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	3b01      	subs	r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800699e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	dce9      	bgt.n	800697a <prvUnlockQueue+0x60>
 80069a6:	e000      	b.n	80069aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	22ff      	movs	r2, #255	; 0xff
 80069ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069b2:	f001 fdc7 	bl	8008544 <vPortExitCritical>
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069c6:	f001 fd8d 	bl	80084e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e001      	b.n	80069dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069dc:	f001 fdb2 	bl	8008544 <vPortExitCritical>

	return xReturn;
 80069e0:	68fb      	ldr	r3, [r7, #12]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f2:	f001 fd77 	bl	80084e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d102      	bne.n	8006a08 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a02:	2301      	movs	r3, #1
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	e001      	b.n	8006a0c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a0c:	f001 fd9a 	bl	8008544 <vPortExitCritical>

	return xReturn;
 8006a10:	68fb      	ldr	r3, [r7, #12]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	e014      	b.n	8006a56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a2c:	4a0f      	ldr	r2, [pc, #60]	; (8006a6c <vQueueAddToRegistry+0x50>)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a38:	490c      	ldr	r1, [pc, #48]	; (8006a6c <vQueueAddToRegistry+0x50>)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a42:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <vQueueAddToRegistry+0x50>)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	4413      	add	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a4e:	e006      	b.n	8006a5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b07      	cmp	r3, #7
 8006a5a:	d9e7      	bls.n	8006a2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20001ae4 	.word	0x20001ae4

08006a70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a80:	f001 fd30 	bl	80084e4 <vPortEnterCritical>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a8a:	b25b      	sxtb	r3, r3
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d103      	bne.n	8006a9a <vQueueWaitForMessageRestricted+0x2a>
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa0:	b25b      	sxtb	r3, r3
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d103      	bne.n	8006ab0 <vQueueWaitForMessageRestricted+0x40>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab0:	f001 fd48 	bl	8008544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d106      	bne.n	8006aca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	3324      	adds	r3, #36	; 0x24
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fc3b 	bl	8007340 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006aca:	6978      	ldr	r0, [r7, #20]
 8006acc:	f7ff ff25 	bl	800691a <prvUnlockQueue>
	}
 8006ad0:	bf00      	nop
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08e      	sub	sp, #56	; 0x38
 8006adc:	af04      	add	r7, sp, #16
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	623b      	str	r3, [r7, #32]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <xTaskCreateStatic+0x46>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	61fb      	str	r3, [r7, #28]
}
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b1e:	235c      	movs	r3, #92	; 0x5c
 8006b20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b5c      	cmp	r3, #92	; 0x5c
 8006b26:	d00a      	beq.n	8006b3e <xTaskCreateStatic+0x66>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61bb      	str	r3, [r7, #24]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01e      	beq.n	8006b84 <xTaskCreateStatic+0xac>
 8006b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01b      	beq.n	8006b84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9303      	str	r3, [sp, #12]
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	9302      	str	r3, [sp, #8]
 8006b66:	f107 0314 	add.w	r3, r7, #20
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 f850 	bl	8006c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b7e:	f000 f8dd 	bl	8006d3c <prvAddNewTaskToReadyList>
 8006b82:	e001      	b.n	8006b88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b88:	697b      	ldr	r3, [r7, #20]
	}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3728      	adds	r7, #40	; 0x28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b08c      	sub	sp, #48	; 0x30
 8006b96:	af04      	add	r7, sp, #16
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	603b      	str	r3, [r7, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 fdbe 	bl	8008728 <pvPortMalloc>
 8006bac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bb4:	205c      	movs	r0, #92	; 0x5c
 8006bb6:	f001 fdb7 	bl	8008728 <pvPortMalloc>
 8006bba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc8:	e005      	b.n	8006bd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bca:	6978      	ldr	r0, [r7, #20]
 8006bcc:	f001 fe78 	bl	80088c0 <vPortFree>
 8006bd0:	e001      	b.n	8006bd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d017      	beq.n	8006c0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006be4:	88fa      	ldrh	r2, [r7, #6]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9303      	str	r3, [sp, #12]
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	9302      	str	r3, [sp, #8]
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f80e 	bl	8006c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c00:	69f8      	ldr	r0, [r7, #28]
 8006c02:	f000 f89b 	bl	8006d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c06:	2301      	movs	r3, #1
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	e002      	b.n	8006c12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c12:	69bb      	ldr	r3, [r7, #24]
	}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	461a      	mov	r2, r3
 8006c34:	21a5      	movs	r1, #165	; 0xa5
 8006c36:	f001 ff93 	bl	8008b60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c44:	3b01      	subs	r3, #1
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f023 0307 	bic.w	r3, r3, #7
 8006c52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	617b      	str	r3, [r7, #20]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01f      	beq.n	8006cba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	e012      	b.n	8006ca6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	7819      	ldrb	r1, [r3, #0]
 8006c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3334      	adds	r3, #52	; 0x34
 8006c90:	460a      	mov	r2, r1
 8006c92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d006      	beq.n	8006cae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2b0f      	cmp	r3, #15
 8006caa:	d9e9      	bls.n	8006c80 <prvInitialiseNewTask+0x64>
 8006cac:	e000      	b.n	8006cb0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006cae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb8:	e003      	b.n	8006cc2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	2b37      	cmp	r3, #55	; 0x37
 8006cc6:	d901      	bls.n	8006ccc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cc8:	2337      	movs	r3, #55	; 0x37
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	2200      	movs	r2, #0
 8006cdc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe ffc4 	bl	8005c70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	3318      	adds	r3, #24
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe ffbf 	bl	8005c70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	68f9      	ldr	r1, [r7, #12]
 8006d1a:	69b8      	ldr	r0, [r7, #24]
 8006d1c:	f001 fab8 	bl	8008290 <pxPortInitialiseStack>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d32:	bf00      	nop
 8006d34:	3720      	adds	r7, #32
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d44:	f001 fbce 	bl	80084e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d48:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <prvAddNewTaskToReadyList+0xc4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	4a2c      	ldr	r2, [pc, #176]	; (8006e00 <prvAddNewTaskToReadyList+0xc4>)
 8006d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d52:	4b2c      	ldr	r3, [pc, #176]	; (8006e04 <prvAddNewTaskToReadyList+0xc8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d5a:	4a2a      	ldr	r2, [pc, #168]	; (8006e04 <prvAddNewTaskToReadyList+0xc8>)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <prvAddNewTaskToReadyList+0xc4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d110      	bne.n	8006d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d68:	f000 fc16 	bl	8007598 <prvInitialiseTaskLists>
 8006d6c:	e00d      	b.n	8006d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d6e:	4b26      	ldr	r3, [pc, #152]	; (8006e08 <prvAddNewTaskToReadyList+0xcc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d109      	bne.n	8006d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d76:	4b23      	ldr	r3, [pc, #140]	; (8006e04 <prvAddNewTaskToReadyList+0xc8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d802      	bhi.n	8006d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d84:	4a1f      	ldr	r2, [pc, #124]	; (8006e04 <prvAddNewTaskToReadyList+0xc8>)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d8a:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <prvAddNewTaskToReadyList+0xd0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	4a1e      	ldr	r2, [pc, #120]	; (8006e0c <prvAddNewTaskToReadyList+0xd0>)
 8006d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d94:	4b1d      	ldr	r3, [pc, #116]	; (8006e0c <prvAddNewTaskToReadyList+0xd0>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <prvAddNewTaskToReadyList+0xd4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d903      	bls.n	8006db0 <prvAddNewTaskToReadyList+0x74>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <prvAddNewTaskToReadyList+0xd4>)
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <prvAddNewTaskToReadyList+0xd8>)
 8006dbe:	441a      	add	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f7fe ff5f 	bl	8005c8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006dcc:	f001 fbba 	bl	8008544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <prvAddNewTaskToReadyList+0xcc>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00e      	beq.n	8006df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <prvAddNewTaskToReadyList+0xc8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d207      	bcs.n	8006df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006de6:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <prvAddNewTaskToReadyList+0xdc>)
 8006de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000bc8 	.word	0x20000bc8
 8006e04:	200006f4 	.word	0x200006f4
 8006e08:	20000bd4 	.word	0x20000bd4
 8006e0c:	20000be4 	.word	0x20000be4
 8006e10:	20000bd0 	.word	0x20000bd0
 8006e14:	200006f8 	.word	0x200006f8
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d017      	beq.n	8006e5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e2e:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <vTaskDelay+0x60>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <vTaskDelay+0x30>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60bb      	str	r3, [r7, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e4c:	f000 f880 	bl	8006f50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e50:	2100      	movs	r1, #0
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fe7a 	bl	8007b4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e58:	f000 f888 	bl	8006f6c <xTaskResumeAll>
 8006e5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d107      	bne.n	8006e74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <vTaskDelay+0x64>)
 8006e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000bf0 	.word	0x20000bf0
 8006e80:	e000ed04 	.word	0xe000ed04

08006e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	; 0x28
 8006e88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e92:	463a      	mov	r2, r7
 8006e94:	1d39      	adds	r1, r7, #4
 8006e96:	f107 0308 	add.w	r3, r7, #8
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fe94 	bl	8005bc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	9202      	str	r2, [sp, #8]
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	460a      	mov	r2, r1
 8006eb2:	4921      	ldr	r1, [pc, #132]	; (8006f38 <vTaskStartScheduler+0xb4>)
 8006eb4:	4821      	ldr	r0, [pc, #132]	; (8006f3c <vTaskStartScheduler+0xb8>)
 8006eb6:	f7ff fe0f 	bl	8006ad8 <xTaskCreateStatic>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4a20      	ldr	r2, [pc, #128]	; (8006f40 <vTaskStartScheduler+0xbc>)
 8006ebe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ec0:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <vTaskStartScheduler+0xbc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e001      	b.n	8006ed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d102      	bne.n	8006ede <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ed8:	f000 fe8c 	bl	8007bf4 <xTimerCreateTimerTask>
 8006edc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d116      	bne.n	8006f12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	613b      	str	r3, [r7, #16]
}
 8006ef6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef8:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <vTaskStartScheduler+0xc0>)
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f00:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <vTaskStartScheduler+0xc4>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <vTaskStartScheduler+0xc8>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f0c:	f001 fa48 	bl	80083a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f10:	e00e      	b.n	8006f30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d10a      	bne.n	8006f30 <vTaskStartScheduler+0xac>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	60fb      	str	r3, [r7, #12]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <vTaskStartScheduler+0xaa>
}
 8006f30:	bf00      	nop
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	08008bb8 	.word	0x08008bb8
 8006f3c:	08007569 	.word	0x08007569
 8006f40:	20000bec 	.word	0x20000bec
 8006f44:	20000be8 	.word	0x20000be8
 8006f48:	20000bd4 	.word	0x20000bd4
 8006f4c:	20000bcc 	.word	0x20000bcc

08006f50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <vTaskSuspendAll+0x18>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	4a03      	ldr	r2, [pc, #12]	; (8006f68 <vTaskSuspendAll+0x18>)
 8006f5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f5e:	bf00      	nop
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	20000bf0 	.word	0x20000bf0

08006f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f7a:	4b42      	ldr	r3, [pc, #264]	; (8007084 <xTaskResumeAll+0x118>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	603b      	str	r3, [r7, #0]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f98:	f001 faa4 	bl	80084e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f9c:	4b39      	ldr	r3, [pc, #228]	; (8007084 <xTaskResumeAll+0x118>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	4a38      	ldr	r2, [pc, #224]	; (8007084 <xTaskResumeAll+0x118>)
 8006fa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa6:	4b37      	ldr	r3, [pc, #220]	; (8007084 <xTaskResumeAll+0x118>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d162      	bne.n	8007074 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fae:	4b36      	ldr	r3, [pc, #216]	; (8007088 <xTaskResumeAll+0x11c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d05e      	beq.n	8007074 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fb6:	e02f      	b.n	8007018 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb8:	4b34      	ldr	r3, [pc, #208]	; (800708c <xTaskResumeAll+0x120>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3318      	adds	r3, #24
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe febd 	bl	8005d44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe feb8 	bl	8005d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd8:	4b2d      	ldr	r3, [pc, #180]	; (8007090 <xTaskResumeAll+0x124>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d903      	bls.n	8006fe8 <xTaskResumeAll+0x7c>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	4a2a      	ldr	r2, [pc, #168]	; (8007090 <xTaskResumeAll+0x124>)
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4a27      	ldr	r2, [pc, #156]	; (8007094 <xTaskResumeAll+0x128>)
 8006ff6:	441a      	add	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f7fe fe43 	bl	8005c8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007008:	4b23      	ldr	r3, [pc, #140]	; (8007098 <xTaskResumeAll+0x12c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	429a      	cmp	r2, r3
 8007010:	d302      	bcc.n	8007018 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007012:	4b22      	ldr	r3, [pc, #136]	; (800709c <xTaskResumeAll+0x130>)
 8007014:	2201      	movs	r2, #1
 8007016:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007018:	4b1c      	ldr	r3, [pc, #112]	; (800708c <xTaskResumeAll+0x120>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1cb      	bne.n	8006fb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007026:	f000 fb55 	bl	80076d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800702a:	4b1d      	ldr	r3, [pc, #116]	; (80070a0 <xTaskResumeAll+0x134>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d010      	beq.n	8007058 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007036:	f000 f847 	bl	80070c8 <xTaskIncrementTick>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007040:	4b16      	ldr	r3, [pc, #88]	; (800709c <xTaskResumeAll+0x130>)
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3b01      	subs	r3, #1
 800704a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f1      	bne.n	8007036 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007052:	4b13      	ldr	r3, [pc, #76]	; (80070a0 <xTaskResumeAll+0x134>)
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007058:	4b10      	ldr	r3, [pc, #64]	; (800709c <xTaskResumeAll+0x130>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <xTaskResumeAll+0x138>)
 8007066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007074:	f001 fa66 	bl	8008544 <vPortExitCritical>

	return xAlreadyYielded;
 8007078:	68bb      	ldr	r3, [r7, #8]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000bf0 	.word	0x20000bf0
 8007088:	20000bc8 	.word	0x20000bc8
 800708c:	20000b88 	.word	0x20000b88
 8007090:	20000bd0 	.word	0x20000bd0
 8007094:	200006f8 	.word	0x200006f8
 8007098:	200006f4 	.word	0x200006f4
 800709c:	20000bdc 	.word	0x20000bdc
 80070a0:	20000bd8 	.word	0x20000bd8
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <xTaskGetTickCount+0x1c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070b4:	687b      	ldr	r3, [r7, #4]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000bcc 	.word	0x20000bcc

080070c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d2:	4b4f      	ldr	r3, [pc, #316]	; (8007210 <xTaskIncrementTick+0x148>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 808f 	bne.w	80071fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070dc:	4b4d      	ldr	r3, [pc, #308]	; (8007214 <xTaskIncrementTick+0x14c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3301      	adds	r3, #1
 80070e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070e4:	4a4b      	ldr	r2, [pc, #300]	; (8007214 <xTaskIncrementTick+0x14c>)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d120      	bne.n	8007132 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070f0:	4b49      	ldr	r3, [pc, #292]	; (8007218 <xTaskIncrementTick+0x150>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <xTaskIncrementTick+0x48>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	603b      	str	r3, [r7, #0]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <xTaskIncrementTick+0x46>
 8007110:	4b41      	ldr	r3, [pc, #260]	; (8007218 <xTaskIncrementTick+0x150>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	4b41      	ldr	r3, [pc, #260]	; (800721c <xTaskIncrementTick+0x154>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3f      	ldr	r2, [pc, #252]	; (8007218 <xTaskIncrementTick+0x150>)
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	4a3f      	ldr	r2, [pc, #252]	; (800721c <xTaskIncrementTick+0x154>)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	4b3e      	ldr	r3, [pc, #248]	; (8007220 <xTaskIncrementTick+0x158>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	4a3d      	ldr	r2, [pc, #244]	; (8007220 <xTaskIncrementTick+0x158>)
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	f000 fad1 	bl	80076d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007132:	4b3c      	ldr	r3, [pc, #240]	; (8007224 <xTaskIncrementTick+0x15c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	429a      	cmp	r2, r3
 800713a:	d349      	bcc.n	80071d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800713c:	4b36      	ldr	r3, [pc, #216]	; (8007218 <xTaskIncrementTick+0x150>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007146:	4b37      	ldr	r3, [pc, #220]	; (8007224 <xTaskIncrementTick+0x15c>)
 8007148:	f04f 32ff 	mov.w	r2, #4294967295
 800714c:	601a      	str	r2, [r3, #0]
					break;
 800714e:	e03f      	b.n	80071d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007150:	4b31      	ldr	r3, [pc, #196]	; (8007218 <xTaskIncrementTick+0x150>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d203      	bcs.n	8007170 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007168:	4a2e      	ldr	r2, [pc, #184]	; (8007224 <xTaskIncrementTick+0x15c>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800716e:	e02f      	b.n	80071d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	3304      	adds	r3, #4
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fde5 	bl	8005d44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	3318      	adds	r3, #24
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fddc 	bl	8005d44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4b25      	ldr	r3, [pc, #148]	; (8007228 <xTaskIncrementTick+0x160>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d903      	bls.n	80071a0 <xTaskIncrementTick+0xd8>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4a22      	ldr	r2, [pc, #136]	; (8007228 <xTaskIncrementTick+0x160>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a1f      	ldr	r2, [pc, #124]	; (800722c <xTaskIncrementTick+0x164>)
 80071ae:	441a      	add	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fe fd67 	bl	8005c8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c0:	4b1b      	ldr	r3, [pc, #108]	; (8007230 <xTaskIncrementTick+0x168>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d3b8      	bcc.n	800713c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071ca:	2301      	movs	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ce:	e7b5      	b.n	800713c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071d0:	4b17      	ldr	r3, [pc, #92]	; (8007230 <xTaskIncrementTick+0x168>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4915      	ldr	r1, [pc, #84]	; (800722c <xTaskIncrementTick+0x164>)
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d901      	bls.n	80071ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071ec:	4b11      	ldr	r3, [pc, #68]	; (8007234 <xTaskIncrementTick+0x16c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	e004      	b.n	8007204 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071fa:	4b0f      	ldr	r3, [pc, #60]	; (8007238 <xTaskIncrementTick+0x170>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3301      	adds	r3, #1
 8007200:	4a0d      	ldr	r2, [pc, #52]	; (8007238 <xTaskIncrementTick+0x170>)
 8007202:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007204:	697b      	ldr	r3, [r7, #20]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000bf0 	.word	0x20000bf0
 8007214:	20000bcc 	.word	0x20000bcc
 8007218:	20000b80 	.word	0x20000b80
 800721c:	20000b84 	.word	0x20000b84
 8007220:	20000be0 	.word	0x20000be0
 8007224:	20000be8 	.word	0x20000be8
 8007228:	20000bd0 	.word	0x20000bd0
 800722c:	200006f8 	.word	0x200006f8
 8007230:	200006f4 	.word	0x200006f4
 8007234:	20000bdc 	.word	0x20000bdc
 8007238:	20000bd8 	.word	0x20000bd8

0800723c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007242:	4b28      	ldr	r3, [pc, #160]	; (80072e4 <vTaskSwitchContext+0xa8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800724a:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <vTaskSwitchContext+0xac>)
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007250:	e041      	b.n	80072d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007252:	4b25      	ldr	r3, [pc, #148]	; (80072e8 <vTaskSwitchContext+0xac>)
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007258:	4b24      	ldr	r3, [pc, #144]	; (80072ec <vTaskSwitchContext+0xb0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e010      	b.n	8007282 <vTaskSwitchContext+0x46>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <vTaskSwitchContext+0x40>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	607b      	str	r3, [r7, #4]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <vTaskSwitchContext+0x3e>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3b01      	subs	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	491b      	ldr	r1, [pc, #108]	; (80072f0 <vTaskSwitchContext+0xb4>)
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0e4      	beq.n	8007260 <vTaskSwitchContext+0x24>
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <vTaskSwitchContext+0xb4>)
 80072a2:	4413      	add	r3, r2
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	605a      	str	r2, [r3, #4]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3308      	adds	r3, #8
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d104      	bne.n	80072c6 <vTaskSwitchContext+0x8a>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	605a      	str	r2, [r3, #4]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <vTaskSwitchContext+0xb8>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	4a06      	ldr	r2, [pc, #24]	; (80072ec <vTaskSwitchContext+0xb0>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6013      	str	r3, [r2, #0]
}
 80072d6:	bf00      	nop
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20000bf0 	.word	0x20000bf0
 80072e8:	20000bdc 	.word	0x20000bdc
 80072ec:	20000bd0 	.word	0x20000bd0
 80072f0:	200006f8 	.word	0x200006f8
 80072f4:	200006f4 	.word	0x200006f4

080072f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800731e:	4b07      	ldr	r3, [pc, #28]	; (800733c <vTaskPlaceOnEventList+0x44>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3318      	adds	r3, #24
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fe fcd3 	bl	8005cd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800732c:	2101      	movs	r1, #1
 800732e:	6838      	ldr	r0, [r7, #0]
 8007330:	f000 fc0c 	bl	8007b4c <prvAddCurrentTaskToDelayedList>
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	200006f4 	.word	0x200006f4

08007340 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	617b      	str	r3, [r7, #20]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <vTaskPlaceOnEventListRestricted+0x54>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3318      	adds	r3, #24
 800736e:	4619      	mov	r1, r3
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7fe fc8a 	bl	8005c8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800737c:	f04f 33ff 	mov.w	r3, #4294967295
 8007380:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	68b8      	ldr	r0, [r7, #8]
 8007386:	f000 fbe1 	bl	8007b4c <prvAddCurrentTaskToDelayedList>
	}
 800738a:	bf00      	nop
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	200006f4 	.word	0x200006f4

08007398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	60fb      	str	r3, [r7, #12]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	3318      	adds	r3, #24
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fcbb 	bl	8005d44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ce:	4b1e      	ldr	r3, [pc, #120]	; (8007448 <xTaskRemoveFromEventList+0xb0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d11d      	bne.n	8007412 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3304      	adds	r3, #4
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fcb2 	bl	8005d44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e4:	4b19      	ldr	r3, [pc, #100]	; (800744c <xTaskRemoveFromEventList+0xb4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d903      	bls.n	80073f4 <xTaskRemoveFromEventList+0x5c>
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	4a16      	ldr	r2, [pc, #88]	; (800744c <xTaskRemoveFromEventList+0xb4>)
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4a13      	ldr	r2, [pc, #76]	; (8007450 <xTaskRemoveFromEventList+0xb8>)
 8007402:	441a      	add	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7fe fc3d 	bl	8005c8a <vListInsertEnd>
 8007410:	e005      	b.n	800741e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3318      	adds	r3, #24
 8007416:	4619      	mov	r1, r3
 8007418:	480e      	ldr	r0, [pc, #56]	; (8007454 <xTaskRemoveFromEventList+0xbc>)
 800741a:	f7fe fc36 	bl	8005c8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <xTaskRemoveFromEventList+0xc0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	429a      	cmp	r2, r3
 800742a:	d905      	bls.n	8007438 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <xTaskRemoveFromEventList+0xc4>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e001      	b.n	800743c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800743c:	697b      	ldr	r3, [r7, #20]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000bf0 	.word	0x20000bf0
 800744c:	20000bd0 	.word	0x20000bd0
 8007450:	200006f8 	.word	0x200006f8
 8007454:	20000b88 	.word	0x20000b88
 8007458:	200006f4 	.word	0x200006f4
 800745c:	20000bdc 	.word	0x20000bdc

08007460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007468:	4b06      	ldr	r3, [pc, #24]	; (8007484 <vTaskInternalSetTimeOutState+0x24>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <vTaskInternalSetTimeOutState+0x28>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	605a      	str	r2, [r3, #4]
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	20000be0 	.word	0x20000be0
 8007488:	20000bcc 	.word	0x20000bcc

0800748c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	613b      	str	r3, [r7, #16]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60fb      	str	r3, [r7, #12]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074ce:	f001 f809 	bl	80084e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074d2:	4b1d      	ldr	r3, [pc, #116]	; (8007548 <xTaskCheckForTimeOut+0xbc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	d102      	bne.n	80074f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	e023      	b.n	800753a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4b15      	ldr	r3, [pc, #84]	; (800754c <xTaskCheckForTimeOut+0xc0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d007      	beq.n	800750e <xTaskCheckForTimeOut+0x82>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	429a      	cmp	r2, r3
 8007506:	d302      	bcc.n	800750e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	61fb      	str	r3, [r7, #28]
 800750c:	e015      	b.n	800753a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	429a      	cmp	r2, r3
 8007516:	d20b      	bcs.n	8007530 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ff9b 	bl	8007460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	e004      	b.n	800753a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007536:	2301      	movs	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800753a:	f001 f803 	bl	8008544 <vPortExitCritical>

	return xReturn;
 800753e:	69fb      	ldr	r3, [r7, #28]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20000bcc 	.word	0x20000bcc
 800754c:	20000be0 	.word	0x20000be0

08007550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007554:	4b03      	ldr	r3, [pc, #12]	; (8007564 <vTaskMissedYield+0x14>)
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]
}
 800755a:	bf00      	nop
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	20000bdc 	.word	0x20000bdc

08007568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007570:	f000 f852 	bl	8007618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <prvIdleTask+0x28>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d9f9      	bls.n	8007570 <prvIdleTask+0x8>
			{
				taskYIELD();
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <prvIdleTask+0x2c>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800758c:	e7f0      	b.n	8007570 <prvIdleTask+0x8>
 800758e:	bf00      	nop
 8007590:	200006f8 	.word	0x200006f8
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800759e:	2300      	movs	r3, #0
 80075a0:	607b      	str	r3, [r7, #4]
 80075a2:	e00c      	b.n	80075be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <prvInitialiseTaskLists+0x60>)
 80075b0:	4413      	add	r3, r2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fb3c 	bl	8005c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3301      	adds	r3, #1
 80075bc:	607b      	str	r3, [r7, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b37      	cmp	r3, #55	; 0x37
 80075c2:	d9ef      	bls.n	80075a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075c4:	480d      	ldr	r0, [pc, #52]	; (80075fc <prvInitialiseTaskLists+0x64>)
 80075c6:	f7fe fb33 	bl	8005c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075ca:	480d      	ldr	r0, [pc, #52]	; (8007600 <prvInitialiseTaskLists+0x68>)
 80075cc:	f7fe fb30 	bl	8005c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075d0:	480c      	ldr	r0, [pc, #48]	; (8007604 <prvInitialiseTaskLists+0x6c>)
 80075d2:	f7fe fb2d 	bl	8005c30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075d6:	480c      	ldr	r0, [pc, #48]	; (8007608 <prvInitialiseTaskLists+0x70>)
 80075d8:	f7fe fb2a 	bl	8005c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075dc:	480b      	ldr	r0, [pc, #44]	; (800760c <prvInitialiseTaskLists+0x74>)
 80075de:	f7fe fb27 	bl	8005c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075e2:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <prvInitialiseTaskLists+0x78>)
 80075e4:	4a05      	ldr	r2, [pc, #20]	; (80075fc <prvInitialiseTaskLists+0x64>)
 80075e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075e8:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <prvInitialiseTaskLists+0x7c>)
 80075ea:	4a05      	ldr	r2, [pc, #20]	; (8007600 <prvInitialiseTaskLists+0x68>)
 80075ec:	601a      	str	r2, [r3, #0]
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	200006f8 	.word	0x200006f8
 80075fc:	20000b58 	.word	0x20000b58
 8007600:	20000b6c 	.word	0x20000b6c
 8007604:	20000b88 	.word	0x20000b88
 8007608:	20000b9c 	.word	0x20000b9c
 800760c:	20000bb4 	.word	0x20000bb4
 8007610:	20000b80 	.word	0x20000b80
 8007614:	20000b84 	.word	0x20000b84

08007618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800761e:	e019      	b.n	8007654 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007620:	f000 ff60 	bl	80084e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007624:	4b10      	ldr	r3, [pc, #64]	; (8007668 <prvCheckTasksWaitingTermination+0x50>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3304      	adds	r3, #4
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fb87 	bl	8005d44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007636:	4b0d      	ldr	r3, [pc, #52]	; (800766c <prvCheckTasksWaitingTermination+0x54>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3b01      	subs	r3, #1
 800763c:	4a0b      	ldr	r2, [pc, #44]	; (800766c <prvCheckTasksWaitingTermination+0x54>)
 800763e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007640:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <prvCheckTasksWaitingTermination+0x58>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3b01      	subs	r3, #1
 8007646:	4a0a      	ldr	r2, [pc, #40]	; (8007670 <prvCheckTasksWaitingTermination+0x58>)
 8007648:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800764a:	f000 ff7b 	bl	8008544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f810 	bl	8007674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <prvCheckTasksWaitingTermination+0x58>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e1      	bne.n	8007620 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000b9c 	.word	0x20000b9c
 800766c:	20000bc8 	.word	0x20000bc8
 8007670:	20000bb0 	.word	0x20000bb0

08007674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007682:	2b00      	cmp	r3, #0
 8007684:	d108      	bne.n	8007698 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	4618      	mov	r0, r3
 800768c:	f001 f918 	bl	80088c0 <vPortFree>
				vPortFree( pxTCB );
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 f915 	bl	80088c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007696:	e018      	b.n	80076ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d103      	bne.n	80076aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 f90c 	bl	80088c0 <vPortFree>
	}
 80076a8:	e00f      	b.n	80076ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d00a      	beq.n	80076ca <prvDeleteTCB+0x56>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <prvDeleteTCB+0x54>
	}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <prvResetNextTaskUnblockTime+0x38>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <prvResetNextTaskUnblockTime+0x3c>)
 80076e6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076ec:	e008      	b.n	8007700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <prvResetNextTaskUnblockTime+0x38>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4a04      	ldr	r2, [pc, #16]	; (8007710 <prvResetNextTaskUnblockTime+0x3c>)
 80076fe:	6013      	str	r3, [r2, #0]
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	20000b80 	.word	0x20000b80
 8007710:	20000be8 	.word	0x20000be8

08007714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <xTaskGetSchedulerState+0x34>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007722:	2301      	movs	r3, #1
 8007724:	607b      	str	r3, [r7, #4]
 8007726:	e008      	b.n	800773a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007728:	4b08      	ldr	r3, [pc, #32]	; (800774c <xTaskGetSchedulerState+0x38>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007730:	2302      	movs	r3, #2
 8007732:	607b      	str	r3, [r7, #4]
 8007734:	e001      	b.n	800773a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800773a:	687b      	ldr	r3, [r7, #4]
	}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20000bd4 	.word	0x20000bd4
 800774c:	20000bf0 	.word	0x20000bf0

08007750 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d051      	beq.n	800780a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	4b2a      	ldr	r3, [pc, #168]	; (8007814 <xTaskPriorityInherit+0xc4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	429a      	cmp	r2, r3
 8007772:	d241      	bcs.n	80077f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	db06      	blt.n	800778a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777c:	4b25      	ldr	r3, [pc, #148]	; (8007814 <xTaskPriorityInherit+0xc4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6959      	ldr	r1, [r3, #20]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <xTaskPriorityInherit+0xc8>)
 800779c:	4413      	add	r3, r2
 800779e:	4299      	cmp	r1, r3
 80077a0:	d122      	bne.n	80077e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe facc 	bl	8005d44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077ac:	4b19      	ldr	r3, [pc, #100]	; (8007814 <xTaskPriorityInherit+0xc4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	4b18      	ldr	r3, [pc, #96]	; (800781c <xTaskPriorityInherit+0xcc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d903      	bls.n	80077ca <xTaskPriorityInherit+0x7a>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	4a15      	ldr	r2, [pc, #84]	; (800781c <xTaskPriorityInherit+0xcc>)
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4a10      	ldr	r2, [pc, #64]	; (8007818 <xTaskPriorityInherit+0xc8>)
 80077d8:	441a      	add	r2, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	3304      	adds	r3, #4
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7fe fa52 	bl	8005c8a <vListInsertEnd>
 80077e6:	e004      	b.n	80077f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <xTaskPriorityInherit+0xc4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80077f2:	2301      	movs	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e008      	b.n	800780a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077fc:	4b05      	ldr	r3, [pc, #20]	; (8007814 <xTaskPriorityInherit+0xc4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	429a      	cmp	r2, r3
 8007804:	d201      	bcs.n	800780a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007806:	2301      	movs	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800780a:	68fb      	ldr	r3, [r7, #12]
	}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	200006f4 	.word	0x200006f4
 8007818:	200006f8 	.word	0x200006f8
 800781c:	20000bd0 	.word	0x20000bd0

08007820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d056      	beq.n	80078e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007836:	4b2e      	ldr	r3, [pc, #184]	; (80078f0 <xTaskPriorityDisinherit+0xd0>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	429a      	cmp	r2, r3
 800783e:	d00a      	beq.n	8007856 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	60fb      	str	r3, [r7, #12]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60bb      	str	r3, [r7, #8]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007878:	1e5a      	subs	r2, r3, #1
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007886:	429a      	cmp	r2, r3
 8007888:	d02c      	beq.n	80078e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788e:	2b00      	cmp	r3, #0
 8007890:	d128      	bne.n	80078e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	3304      	adds	r3, #4
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fa54 	bl	8005d44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b4:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <xTaskPriorityDisinherit+0xd4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d903      	bls.n	80078c4 <xTaskPriorityDisinherit+0xa4>
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	4a0c      	ldr	r2, [pc, #48]	; (80078f4 <xTaskPriorityDisinherit+0xd4>)
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4a09      	ldr	r2, [pc, #36]	; (80078f8 <xTaskPriorityDisinherit+0xd8>)
 80078d2:	441a      	add	r2, r3
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fe f9d5 	bl	8005c8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078e0:	2301      	movs	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078e4:	697b      	ldr	r3, [r7, #20]
	}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	200006f4 	.word	0x200006f4
 80078f4:	20000bd0 	.word	0x20000bd0
 80078f8:	200006f8 	.word	0x200006f8

080078fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800790a:	2301      	movs	r3, #1
 800790c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d06a      	beq.n	80079ea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60fb      	str	r3, [r7, #12]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d902      	bls.n	8007942 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	e002      	b.n	8007948 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007946:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	429a      	cmp	r2, r3
 8007950:	d04b      	beq.n	80079ea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	429a      	cmp	r2, r3
 800795a:	d146      	bne.n	80079ea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800795c:	4b25      	ldr	r3, [pc, #148]	; (80079f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	429a      	cmp	r2, r3
 8007964:	d10a      	bne.n	800797c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60bb      	str	r3, [r7, #8]
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	69fa      	ldr	r2, [r7, #28]
 8007986:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	db04      	blt.n	800799a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	6959      	ldr	r1, [r3, #20]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079aa:	4413      	add	r3, r2
 80079ac:	4299      	cmp	r1, r3
 80079ae:	d11c      	bne.n	80079ea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe f9c5 	bl	8005d44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d903      	bls.n	80079ce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	4a0c      	ldr	r2, [pc, #48]	; (80079fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4a07      	ldr	r2, [pc, #28]	; (80079f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079dc:	441a      	add	r2, r3
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	3304      	adds	r3, #4
 80079e2:	4619      	mov	r1, r3
 80079e4:	4610      	mov	r0, r2
 80079e6:	f7fe f950 	bl	8005c8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079ea:	bf00      	nop
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	200006f4 	.word	0x200006f4
 80079f8:	200006f8 	.word	0x200006f8
 80079fc:	20000bd0 	.word	0x20000bd0

08007a00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a04:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a12:	3201      	adds	r2, #1
 8007a14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007a16:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a18:	681b      	ldr	r3, [r3, #0]
	}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	200006f4 	.word	0x200006f4

08007a28 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	61bb      	str	r3, [r7, #24]
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a4e:	f000 fe2b 	bl	80086a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8007a56:	f3ef 8211 	mrs	r2, BASEPRI
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	617a      	str	r2, [r7, #20]
 8007a6c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007a6e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a70:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007a78:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007a8c:	7ffb      	ldrb	r3, [r7, #31]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d146      	bne.n	8007b20 <vTaskNotifyGiveFromISR+0xf8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	60fb      	str	r3, [r7, #12]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ab0:	4b20      	ldr	r3, [pc, #128]	; (8007b34 <vTaskNotifyGiveFromISR+0x10c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11d      	bne.n	8007af4 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe f941 	bl	8005d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	4b1c      	ldr	r3, [pc, #112]	; (8007b38 <vTaskNotifyGiveFromISR+0x110>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d903      	bls.n	8007ad6 <vTaskNotifyGiveFromISR+0xae>
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <vTaskNotifyGiveFromISR+0x110>)
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4a16      	ldr	r2, [pc, #88]	; (8007b3c <vTaskNotifyGiveFromISR+0x114>)
 8007ae4:	441a      	add	r2, r3
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe f8cc 	bl	8005c8a <vListInsertEnd>
 8007af2:	e005      	b.n	8007b00 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	3318      	adds	r3, #24
 8007af8:	4619      	mov	r1, r3
 8007afa:	4811      	ldr	r0, [pc, #68]	; (8007b40 <vTaskNotifyGiveFromISR+0x118>)
 8007afc:	f7fe f8c5 	bl	8005c8a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b04:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <vTaskNotifyGiveFromISR+0x11c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d908      	bls.n	8007b20 <vTaskNotifyGiveFromISR+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <vTaskNotifyGiveFromISR+0xf2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2201      	movs	r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <vTaskNotifyGiveFromISR+0x120>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f383 8811 	msr	BASEPRI, r3
}
 8007b2a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007b2c:	bf00      	nop
 8007b2e:	3728      	adds	r7, #40	; 0x28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20000bf0 	.word	0x20000bf0
 8007b38:	20000bd0 	.word	0x20000bd0
 8007b3c:	200006f8 	.word	0x200006f8
 8007b40:	20000b88 	.word	0x20000b88
 8007b44:	200006f4 	.word	0x200006f4
 8007b48:	20000bdc 	.word	0x20000bdc

08007b4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b56:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <prvAddCurrentTaskToDelayedList+0x90>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b5c:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3304      	adds	r3, #4
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe f8ee 	bl	8005d44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6e:	d10a      	bne.n	8007b86 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d007      	beq.n	8007b86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b76:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4819      	ldr	r0, [pc, #100]	; (8007be4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b80:	f7fe f883 	bl	8005c8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b84:	e026      	b.n	8007bd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d209      	bcs.n	8007bb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b9e:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	f7fe f891 	bl	8005cd2 <vListInsert>
}
 8007bb0:	e010      	b.n	8007bd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bb2:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f7fe f887 	bl	8005cd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d202      	bcs.n	8007bd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bce:	4a08      	ldr	r2, [pc, #32]	; (8007bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	6013      	str	r3, [r2, #0]
}
 8007bd4:	bf00      	nop
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20000bcc 	.word	0x20000bcc
 8007be0:	200006f4 	.word	0x200006f4
 8007be4:	20000bb4 	.word	0x20000bb4
 8007be8:	20000b84 	.word	0x20000b84
 8007bec:	20000b80 	.word	0x20000b80
 8007bf0:	20000be8 	.word	0x20000be8

08007bf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08a      	sub	sp, #40	; 0x28
 8007bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bfe:	f000 fb07 	bl	8008210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c02:	4b1c      	ldr	r3, [pc, #112]	; (8007c74 <xTimerCreateTimerTask+0x80>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d021      	beq.n	8007c4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c12:	1d3a      	adds	r2, r7, #4
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	f107 030c 	add.w	r3, r7, #12
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fd ffed 	bl	8005bfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	9202      	str	r2, [sp, #8]
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	2300      	movs	r3, #0
 8007c32:	460a      	mov	r2, r1
 8007c34:	4910      	ldr	r1, [pc, #64]	; (8007c78 <xTimerCreateTimerTask+0x84>)
 8007c36:	4811      	ldr	r0, [pc, #68]	; (8007c7c <xTimerCreateTimerTask+0x88>)
 8007c38:	f7fe ff4e 	bl	8006ad8 <xTaskCreateStatic>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	4a10      	ldr	r2, [pc, #64]	; (8007c80 <xTimerCreateTimerTask+0x8c>)
 8007c40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c42:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <xTimerCreateTimerTask+0x8c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	613b      	str	r3, [r7, #16]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c6a:	697b      	ldr	r3, [r7, #20]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20000c24 	.word	0x20000c24
 8007c78:	08008bc0 	.word	0x08008bc0
 8007c7c:	08007db9 	.word	0x08007db9
 8007c80:	20000c28 	.word	0x20000c28

08007c84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08a      	sub	sp, #40	; 0x28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10a      	bne.n	8007cb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	623b      	str	r3, [r7, #32]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cb2:	4b1a      	ldr	r3, [pc, #104]	; (8007d1c <xTimerGenericCommand+0x98>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d02a      	beq.n	8007d10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b05      	cmp	r3, #5
 8007cca:	dc18      	bgt.n	8007cfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ccc:	f7ff fd22 	bl	8007714 <xTaskGetSchedulerState>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d109      	bne.n	8007cea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cd6:	4b11      	ldr	r3, [pc, #68]	; (8007d1c <xTimerGenericCommand+0x98>)
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	f107 0110 	add.w	r1, r7, #16
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce2:	f7fe f9c9 	bl	8006078 <xQueueGenericSend>
 8007ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8007ce8:	e012      	b.n	8007d10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cea:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <xTimerGenericCommand+0x98>)
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	f107 0110 	add.w	r1, r7, #16
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f7fe f9bf 	bl	8006078 <xQueueGenericSend>
 8007cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8007cfc:	e008      	b.n	8007d10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cfe:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <xTimerGenericCommand+0x98>)
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f107 0110 	add.w	r1, r7, #16
 8007d06:	2300      	movs	r3, #0
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	f7fe fab3 	bl	8006274 <xQueueGenericSendFromISR>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3728      	adds	r7, #40	; 0x28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000c24 	.word	0x20000c24

08007d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d2a:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <prvProcessExpiredTimer+0x94>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fe f803 	bl	8005d44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d022      	beq.n	8007d92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	699a      	ldr	r2, [r3, #24]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	18d1      	adds	r1, r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	6978      	ldr	r0, [r7, #20]
 8007d5a:	f000 f8d1 	bl	8007f00 <prvInsertTimerInActiveList>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01f      	beq.n	8007da4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d64:	2300      	movs	r3, #0
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f7ff ff88 	bl	8007c84 <xTimerGenericCommand>
 8007d74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d113      	bne.n	8007da4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60fb      	str	r3, [r7, #12]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d98:	f023 0301 	bic.w	r3, r3, #1
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	6978      	ldr	r0, [r7, #20]
 8007daa:	4798      	blx	r3
}
 8007dac:	bf00      	nop
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000c1c 	.word	0x20000c1c

08007db8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dc0:	f107 0308 	add.w	r3, r7, #8
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 f857 	bl	8007e78 <prvGetNextExpireTime>
 8007dca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f803 	bl	8007ddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dd6:	f000 f8d5 	bl	8007f84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dda:	e7f1      	b.n	8007dc0 <prvTimerTask+0x8>

08007ddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007de6:	f7ff f8b3 	bl	8006f50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f866 	bl	8007ec0 <prvSampleTimeNow>
 8007df4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d130      	bne.n	8007e5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <prvProcessTimerOrBlockTask+0x3c>
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d806      	bhi.n	8007e18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e0a:	f7ff f8af 	bl	8006f6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e0e:	68f9      	ldr	r1, [r7, #12]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff ff85 	bl	8007d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e16:	e024      	b.n	8007e62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d008      	beq.n	8007e30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <prvProcessTimerOrBlockTask+0x90>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <prvProcessTimerOrBlockTask+0x50>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e000      	b.n	8007e2e <prvProcessTimerOrBlockTask+0x52>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e30:	4b0f      	ldr	r3, [pc, #60]	; (8007e70 <prvProcessTimerOrBlockTask+0x94>)
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	f7fe fe17 	bl	8006a70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e42:	f7ff f893 	bl	8006f6c <xTaskResumeAll>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <prvProcessTimerOrBlockTask+0x98>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
}
 8007e5c:	e001      	b.n	8007e62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e5e:	f7ff f885 	bl	8006f6c <xTaskResumeAll>
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000c20 	.word	0x20000c20
 8007e70:	20000c24 	.word	0x20000c24
 8007e74:	e000ed04 	.word	0xe000ed04

08007e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e80:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <prvGetNextExpireTime+0x44>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <prvGetNextExpireTime+0x16>
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	e000      	b.n	8007e90 <prvGetNextExpireTime+0x18>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e9c:	4b07      	ldr	r3, [pc, #28]	; (8007ebc <prvGetNextExpireTime+0x44>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	e001      	b.n	8007eac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007eac:	68fb      	ldr	r3, [r7, #12]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	20000c1c 	.word	0x20000c1c

08007ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ec8:	f7ff f8ee 	bl	80070a8 <xTaskGetTickCount>
 8007ecc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ece:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <prvSampleTimeNow+0x3c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d205      	bcs.n	8007ee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ed8:	f000 f936 	bl	8008148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e002      	b.n	8007eea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007eea:	4a04      	ldr	r2, [pc, #16]	; (8007efc <prvSampleTimeNow+0x3c>)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000c2c 	.word	0x20000c2c

08007f00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d812      	bhi.n	8007f4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	1ad2      	subs	r2, r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d302      	bcc.n	8007f3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f34:	2301      	movs	r3, #1
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e01b      	b.n	8007f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f3a:	4b10      	ldr	r3, [pc, #64]	; (8007f7c <prvInsertTimerInActiveList+0x7c>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fd fec4 	bl	8005cd2 <vListInsert>
 8007f4a:	e012      	b.n	8007f72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d206      	bcs.n	8007f62 <prvInsertTimerInActiveList+0x62>
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d302      	bcc.n	8007f62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e007      	b.n	8007f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <prvInsertTimerInActiveList+0x80>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	f7fd feb0 	bl	8005cd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f72:	697b      	ldr	r3, [r7, #20]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20000c20 	.word	0x20000c20
 8007f80:	20000c1c 	.word	0x20000c1c

08007f84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08e      	sub	sp, #56	; 0x38
 8007f88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f8a:	e0ca      	b.n	8008122 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	da18      	bge.n	8007fc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f92:	1d3b      	adds	r3, r7, #4
 8007f94:	3304      	adds	r3, #4
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	61fb      	str	r3, [r7, #28]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fba:	6850      	ldr	r0, [r2, #4]
 8007fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fbe:	6892      	ldr	r2, [r2, #8]
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f2c0 80aa 	blt.w	8008120 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fd feb1 	bl	8005d44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7ff ff6b 	bl	8007ec0 <prvSampleTimeNow>
 8007fea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b09      	cmp	r3, #9
 8007ff0:	f200 8097 	bhi.w	8008122 <prvProcessReceivedCommands+0x19e>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <prvProcessReceivedCommands+0x78>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	08008025 	.word	0x08008025
 8008000:	08008025 	.word	0x08008025
 8008004:	08008025 	.word	0x08008025
 8008008:	08008099 	.word	0x08008099
 800800c:	080080ad 	.word	0x080080ad
 8008010:	080080f7 	.word	0x080080f7
 8008014:	08008025 	.word	0x08008025
 8008018:	08008025 	.word	0x08008025
 800801c:	08008099 	.word	0x08008099
 8008020:	080080ad 	.word	0x080080ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800802a:	f043 0301 	orr.w	r3, r3, #1
 800802e:	b2da      	uxtb	r2, r3
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	18d1      	adds	r1, r2, r3
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008044:	f7ff ff5c 	bl	8007f00 <prvInsertTimerInActiveList>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d069      	beq.n	8008122 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d05e      	beq.n	8008122 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	441a      	add	r2, r3
 800806c:	2300      	movs	r3, #0
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2300      	movs	r3, #0
 8008072:	2100      	movs	r1, #0
 8008074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008076:	f7ff fe05 	bl	8007c84 <xTimerGenericCommand>
 800807a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d14f      	bne.n	8008122 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	61bb      	str	r3, [r7, #24]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800809e:	f023 0301 	bic.w	r3, r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80080aa:	e03a      	b.n	8008122 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	617b      	str	r3, [r7, #20]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	18d1      	adds	r1, r2, r3
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f0:	f7ff ff06 	bl	8007f00 <prvInsertTimerInActiveList>
					break;
 80080f4:	e015      	b.n	8008122 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d103      	bne.n	800810c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008106:	f000 fbdb 	bl	80088c0 <vPortFree>
 800810a:	e00a      	b.n	8008122 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008112:	f023 0301 	bic.w	r3, r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800811e:	e000      	b.n	8008122 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008122:	4b08      	ldr	r3, [pc, #32]	; (8008144 <prvProcessReceivedCommands+0x1c0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	1d39      	adds	r1, r7, #4
 8008128:	2200      	movs	r2, #0
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe f93e 	bl	80063ac <xQueueReceive>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	f47f af2a 	bne.w	8007f8c <prvProcessReceivedCommands+0x8>
	}
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	3730      	adds	r7, #48	; 0x30
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000c24 	.word	0x20000c24

08008148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800814e:	e048      	b.n	80081e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008150:	4b2d      	ldr	r3, [pc, #180]	; (8008208 <prvSwitchTimerLists+0xc0>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815a:	4b2b      	ldr	r3, [pc, #172]	; (8008208 <prvSwitchTimerLists+0xc0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3304      	adds	r3, #4
 8008168:	4618      	mov	r0, r3
 800816a:	f7fd fdeb 	bl	8005d44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d02e      	beq.n	80081e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4413      	add	r3, r2
 800818c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	429a      	cmp	r2, r3
 8008194:	d90e      	bls.n	80081b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081a2:	4b19      	ldr	r3, [pc, #100]	; (8008208 <prvSwitchTimerLists+0xc0>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fd fd90 	bl	8005cd2 <vListInsert>
 80081b2:	e016      	b.n	80081e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081b4:	2300      	movs	r3, #0
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	2300      	movs	r3, #0
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	2100      	movs	r1, #0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7ff fd60 	bl	8007c84 <xTimerGenericCommand>
 80081c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	603b      	str	r3, [r7, #0]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081e2:	4b09      	ldr	r3, [pc, #36]	; (8008208 <prvSwitchTimerLists+0xc0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1b1      	bne.n	8008150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081ec:	4b06      	ldr	r3, [pc, #24]	; (8008208 <prvSwitchTimerLists+0xc0>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081f2:	4b06      	ldr	r3, [pc, #24]	; (800820c <prvSwitchTimerLists+0xc4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a04      	ldr	r2, [pc, #16]	; (8008208 <prvSwitchTimerLists+0xc0>)
 80081f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081fa:	4a04      	ldr	r2, [pc, #16]	; (800820c <prvSwitchTimerLists+0xc4>)
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	6013      	str	r3, [r2, #0]
}
 8008200:	bf00      	nop
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000c1c 	.word	0x20000c1c
 800820c:	20000c20 	.word	0x20000c20

08008210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008216:	f000 f965 	bl	80084e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800821a:	4b15      	ldr	r3, [pc, #84]	; (8008270 <prvCheckForValidListAndQueue+0x60>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d120      	bne.n	8008264 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008222:	4814      	ldr	r0, [pc, #80]	; (8008274 <prvCheckForValidListAndQueue+0x64>)
 8008224:	f7fd fd04 	bl	8005c30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008228:	4813      	ldr	r0, [pc, #76]	; (8008278 <prvCheckForValidListAndQueue+0x68>)
 800822a:	f7fd fd01 	bl	8005c30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <prvCheckForValidListAndQueue+0x6c>)
 8008230:	4a10      	ldr	r2, [pc, #64]	; (8008274 <prvCheckForValidListAndQueue+0x64>)
 8008232:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008234:	4b12      	ldr	r3, [pc, #72]	; (8008280 <prvCheckForValidListAndQueue+0x70>)
 8008236:	4a10      	ldr	r2, [pc, #64]	; (8008278 <prvCheckForValidListAndQueue+0x68>)
 8008238:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800823a:	2300      	movs	r3, #0
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	4b11      	ldr	r3, [pc, #68]	; (8008284 <prvCheckForValidListAndQueue+0x74>)
 8008240:	4a11      	ldr	r2, [pc, #68]	; (8008288 <prvCheckForValidListAndQueue+0x78>)
 8008242:	2110      	movs	r1, #16
 8008244:	200a      	movs	r0, #10
 8008246:	f7fd fe0f 	bl	8005e68 <xQueueGenericCreateStatic>
 800824a:	4603      	mov	r3, r0
 800824c:	4a08      	ldr	r2, [pc, #32]	; (8008270 <prvCheckForValidListAndQueue+0x60>)
 800824e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <prvCheckForValidListAndQueue+0x60>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008258:	4b05      	ldr	r3, [pc, #20]	; (8008270 <prvCheckForValidListAndQueue+0x60>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	490b      	ldr	r1, [pc, #44]	; (800828c <prvCheckForValidListAndQueue+0x7c>)
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fbdc 	bl	8006a1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008264:	f000 f96e 	bl	8008544 <vPortExitCritical>
}
 8008268:	bf00      	nop
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000c24 	.word	0x20000c24
 8008274:	20000bf4 	.word	0x20000bf4
 8008278:	20000c08 	.word	0x20000c08
 800827c:	20000c1c 	.word	0x20000c1c
 8008280:	20000c20 	.word	0x20000c20
 8008284:	20000cd0 	.word	0x20000cd0
 8008288:	20000c30 	.word	0x20000c30
 800828c:	08008bc8 	.word	0x08008bc8

08008290 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3b04      	subs	r3, #4
 80082a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3b04      	subs	r3, #4
 80082ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f023 0201 	bic.w	r2, r3, #1
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3b04      	subs	r3, #4
 80082be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082c0:	4a0c      	ldr	r2, [pc, #48]	; (80082f4 <pxPortInitialiseStack+0x64>)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3b14      	subs	r3, #20
 80082ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3b04      	subs	r3, #4
 80082d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f06f 0202 	mvn.w	r2, #2
 80082de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3b20      	subs	r3, #32
 80082e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082e6:	68fb      	ldr	r3, [r7, #12]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	080082f9 	.word	0x080082f9

080082f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <prvTaskExitError+0x54>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d00a      	beq.n	8008322 <prvTaskExitError+0x2a>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60fb      	str	r3, [r7, #12]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <prvTaskExitError+0x28>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	60bb      	str	r3, [r7, #8]
}
 8008334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008336:	bf00      	nop
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0fc      	beq.n	8008338 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	2000000c 	.word	0x2000000c

08008350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <pxCurrentTCBConst2>)
 8008352:	6819      	ldr	r1, [r3, #0]
 8008354:	6808      	ldr	r0, [r1, #0]
 8008356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	f380 8809 	msr	PSP, r0
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f04f 0000 	mov.w	r0, #0
 8008366:	f380 8811 	msr	BASEPRI, r0
 800836a:	4770      	bx	lr
 800836c:	f3af 8000 	nop.w

08008370 <pxCurrentTCBConst2>:
 8008370:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop

08008378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008378:	4808      	ldr	r0, [pc, #32]	; (800839c <prvPortStartFirstTask+0x24>)
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	6800      	ldr	r0, [r0, #0]
 800837e:	f380 8808 	msr	MSP, r0
 8008382:	f04f 0000 	mov.w	r0, #0
 8008386:	f380 8814 	msr	CONTROL, r0
 800838a:	b662      	cpsie	i
 800838c:	b661      	cpsie	f
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	df00      	svc	0
 8008398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800839a:	bf00      	nop
 800839c:	e000ed08 	.word	0xe000ed08

080083a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083a6:	4b46      	ldr	r3, [pc, #280]	; (80084c0 <xPortStartScheduler+0x120>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a46      	ldr	r2, [pc, #280]	; (80084c4 <xPortStartScheduler+0x124>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d10a      	bne.n	80083c6 <xPortStartScheduler+0x26>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	613b      	str	r3, [r7, #16]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083c6:	4b3e      	ldr	r3, [pc, #248]	; (80084c0 <xPortStartScheduler+0x120>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a3f      	ldr	r2, [pc, #252]	; (80084c8 <xPortStartScheduler+0x128>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d10a      	bne.n	80083e6 <xPortStartScheduler+0x46>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60fb      	str	r3, [r7, #12]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083e6:	4b39      	ldr	r3, [pc, #228]	; (80084cc <xPortStartScheduler+0x12c>)
 80083e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	22ff      	movs	r2, #255	; 0xff
 80083f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b31      	ldr	r3, [pc, #196]	; (80084d0 <xPortStartScheduler+0x130>)
 800840c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800840e:	4b31      	ldr	r3, [pc, #196]	; (80084d4 <xPortStartScheduler+0x134>)
 8008410:	2207      	movs	r2, #7
 8008412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008414:	e009      	b.n	800842a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008416:	4b2f      	ldr	r3, [pc, #188]	; (80084d4 <xPortStartScheduler+0x134>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	4a2d      	ldr	r2, [pc, #180]	; (80084d4 <xPortStartScheduler+0x134>)
 800841e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008432:	2b80      	cmp	r3, #128	; 0x80
 8008434:	d0ef      	beq.n	8008416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008436:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <xPortStartScheduler+0x134>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1c3 0307 	rsb	r3, r3, #7
 800843e:	2b04      	cmp	r3, #4
 8008440:	d00a      	beq.n	8008458 <xPortStartScheduler+0xb8>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	60bb      	str	r3, [r7, #8]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008458:	4b1e      	ldr	r3, [pc, #120]	; (80084d4 <xPortStartScheduler+0x134>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <xPortStartScheduler+0x134>)
 8008460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008462:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <xPortStartScheduler+0x134>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800846a:	4a1a      	ldr	r2, [pc, #104]	; (80084d4 <xPortStartScheduler+0x134>)
 800846c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	b2da      	uxtb	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008476:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <xPortStartScheduler+0x138>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <xPortStartScheduler+0x138>)
 800847c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <xPortStartScheduler+0x138>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <xPortStartScheduler+0x138>)
 8008488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800848c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800848e:	f000 f8dd 	bl	800864c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008492:	4b12      	ldr	r3, [pc, #72]	; (80084dc <xPortStartScheduler+0x13c>)
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008498:	f000 f8fc 	bl	8008694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800849c:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <xPortStartScheduler+0x140>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0f      	ldr	r2, [pc, #60]	; (80084e0 <xPortStartScheduler+0x140>)
 80084a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084a8:	f7ff ff66 	bl	8008378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084ac:	f7fe fec6 	bl	800723c <vTaskSwitchContext>
	prvTaskExitError();
 80084b0:	f7ff ff22 	bl	80082f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	e000ed00 	.word	0xe000ed00
 80084c4:	410fc271 	.word	0x410fc271
 80084c8:	410fc270 	.word	0x410fc270
 80084cc:	e000e400 	.word	0xe000e400
 80084d0:	20000d20 	.word	0x20000d20
 80084d4:	20000d24 	.word	0x20000d24
 80084d8:	e000ed20 	.word	0xe000ed20
 80084dc:	2000000c 	.word	0x2000000c
 80084e0:	e000ef34 	.word	0xe000ef34

080084e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	607b      	str	r3, [r7, #4]
}
 80084fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <vPortEnterCritical+0x58>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	4a0d      	ldr	r2, [pc, #52]	; (800853c <vPortEnterCritical+0x58>)
 8008506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <vPortEnterCritical+0x58>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d10f      	bne.n	8008530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <vPortEnterCritical+0x5c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <vPortEnterCritical+0x4c>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	603b      	str	r3, [r7, #0]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <vPortEnterCritical+0x4a>
	}
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	2000000c 	.word	0x2000000c
 8008540:	e000ed04 	.word	0xe000ed04

08008544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800854a:	4b12      	ldr	r3, [pc, #72]	; (8008594 <vPortExitCritical+0x50>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <vPortExitCritical+0x24>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	607b      	str	r3, [r7, #4]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <vPortExitCritical+0x50>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3b01      	subs	r3, #1
 800856e:	4a09      	ldr	r2, [pc, #36]	; (8008594 <vPortExitCritical+0x50>)
 8008570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <vPortExitCritical+0x50>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <vPortExitCritical+0x42>
 800857a:	2300      	movs	r3, #0
 800857c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	f383 8811 	msr	BASEPRI, r3
}
 8008584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	2000000c 	.word	0x2000000c
	...

080085a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085a0:	f3ef 8009 	mrs	r0, PSP
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	4b15      	ldr	r3, [pc, #84]	; (8008600 <pxCurrentTCBConst>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	f01e 0f10 	tst.w	lr, #16
 80085b0:	bf08      	it	eq
 80085b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ba:	6010      	str	r0, [r2, #0]
 80085bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085c4:	f380 8811 	msr	BASEPRI, r0
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f7fe fe34 	bl	800723c <vTaskSwitchContext>
 80085d4:	f04f 0000 	mov.w	r0, #0
 80085d8:	f380 8811 	msr	BASEPRI, r0
 80085dc:	bc09      	pop	{r0, r3}
 80085de:	6819      	ldr	r1, [r3, #0]
 80085e0:	6808      	ldr	r0, [r1, #0]
 80085e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e6:	f01e 0f10 	tst.w	lr, #16
 80085ea:	bf08      	it	eq
 80085ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085f0:	f380 8809 	msr	PSP, r0
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	f3af 8000 	nop.w

08008600 <pxCurrentTCBConst>:
 8008600:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	607b      	str	r3, [r7, #4]
}
 8008620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008622:	f7fe fd51 	bl	80070c8 <xTaskIncrementTick>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <xPortSysTickHandler+0x40>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	2300      	movs	r3, #0
 8008636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	f383 8811 	msr	BASEPRI, r3
}
 800863e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	e000ed04 	.word	0xe000ed04

0800864c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <vPortSetupTimerInterrupt+0x34>)
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008656:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <vPortSetupTimerInterrupt+0x38>)
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800865c:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <vPortSetupTimerInterrupt+0x3c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a0a      	ldr	r2, [pc, #40]	; (800868c <vPortSetupTimerInterrupt+0x40>)
 8008662:	fba2 2303 	umull	r2, r3, r2, r3
 8008666:	099b      	lsrs	r3, r3, #6
 8008668:	4a09      	ldr	r2, [pc, #36]	; (8008690 <vPortSetupTimerInterrupt+0x44>)
 800866a:	3b01      	subs	r3, #1
 800866c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800866e:	4b04      	ldr	r3, [pc, #16]	; (8008680 <vPortSetupTimerInterrupt+0x34>)
 8008670:	2207      	movs	r2, #7
 8008672:	601a      	str	r2, [r3, #0]
}
 8008674:	bf00      	nop
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	e000e010 	.word	0xe000e010
 8008684:	e000e018 	.word	0xe000e018
 8008688:	20000000 	.word	0x20000000
 800868c:	10624dd3 	.word	0x10624dd3
 8008690:	e000e014 	.word	0xe000e014

08008694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086a4 <vPortEnableVFP+0x10>
 8008698:	6801      	ldr	r1, [r0, #0]
 800869a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869e:	6001      	str	r1, [r0, #0]
 80086a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086a2:	bf00      	nop
 80086a4:	e000ed88 	.word	0xe000ed88

080086a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086ae:	f3ef 8305 	mrs	r3, IPSR
 80086b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b0f      	cmp	r3, #15
 80086b8:	d914      	bls.n	80086e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086ba:	4a17      	ldr	r2, [pc, #92]	; (8008718 <vPortValidateInterruptPriority+0x70>)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086c4:	4b15      	ldr	r3, [pc, #84]	; (800871c <vPortValidateInterruptPriority+0x74>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	7afa      	ldrb	r2, [r7, #11]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d20a      	bcs.n	80086e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	607b      	str	r3, [r7, #4]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <vPortValidateInterruptPriority+0x78>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086ec:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <vPortValidateInterruptPriority+0x7c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d90a      	bls.n	800870a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	603b      	str	r3, [r7, #0]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <vPortValidateInterruptPriority+0x60>
	}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	e000e3f0 	.word	0xe000e3f0
 800871c:	20000d20 	.word	0x20000d20
 8008720:	e000ed0c 	.word	0xe000ed0c
 8008724:	20000d24 	.word	0x20000d24

08008728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008734:	f7fe fc0c 	bl	8006f50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008738:	4b5b      	ldr	r3, [pc, #364]	; (80088a8 <pvPortMalloc+0x180>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008740:	f000 f920 	bl	8008984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008744:	4b59      	ldr	r3, [pc, #356]	; (80088ac <pvPortMalloc+0x184>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 8093 	bne.w	8008878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01d      	beq.n	8008794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008758:	2208      	movs	r2, #8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	2b00      	cmp	r3, #0
 8008768:	d014      	beq.n	8008794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f023 0307 	bic.w	r3, r3, #7
 8008770:	3308      	adds	r3, #8
 8008772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <pvPortMalloc+0x6c>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	617b      	str	r3, [r7, #20]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d06e      	beq.n	8008878 <pvPortMalloc+0x150>
 800879a:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <pvPortMalloc+0x188>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d869      	bhi.n	8008878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087a4:	4b43      	ldr	r3, [pc, #268]	; (80088b4 <pvPortMalloc+0x18c>)
 80087a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087a8:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <pvPortMalloc+0x18c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087ae:	e004      	b.n	80087ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d903      	bls.n	80087cc <pvPortMalloc+0xa4>
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1f1      	bne.n	80087b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087cc:	4b36      	ldr	r3, [pc, #216]	; (80088a8 <pvPortMalloc+0x180>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d050      	beq.n	8008878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2208      	movs	r2, #8
 80087dc:	4413      	add	r3, r2
 80087de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	1ad2      	subs	r2, r2, r3
 80087f0:	2308      	movs	r3, #8
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d91f      	bls.n	8008838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <pvPortMalloc+0xf8>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	613b      	str	r3, [r7, #16]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008832:	69b8      	ldr	r0, [r7, #24]
 8008834:	f000 f908 	bl	8008a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008838:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <pvPortMalloc+0x188>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <pvPortMalloc+0x188>)
 8008844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008846:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <pvPortMalloc+0x188>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b1b      	ldr	r3, [pc, #108]	; (80088b8 <pvPortMalloc+0x190>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d203      	bcs.n	800885a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008852:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <pvPortMalloc+0x188>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a18      	ldr	r2, [pc, #96]	; (80088b8 <pvPortMalloc+0x190>)
 8008858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	4b13      	ldr	r3, [pc, #76]	; (80088ac <pvPortMalloc+0x184>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	431a      	orrs	r2, r3
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <pvPortMalloc+0x194>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3301      	adds	r3, #1
 8008874:	4a11      	ldr	r2, [pc, #68]	; (80088bc <pvPortMalloc+0x194>)
 8008876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008878:	f7fe fb78 	bl	8006f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <pvPortMalloc+0x174>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	60fb      	str	r3, [r7, #12]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <pvPortMalloc+0x172>
	return pvReturn;
 800889c:	69fb      	ldr	r3, [r7, #28]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3728      	adds	r7, #40	; 0x28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	200018e8 	.word	0x200018e8
 80088ac:	200018fc 	.word	0x200018fc
 80088b0:	200018ec 	.word	0x200018ec
 80088b4:	200018e0 	.word	0x200018e0
 80088b8:	200018f0 	.word	0x200018f0
 80088bc:	200018f4 	.word	0x200018f4

080088c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d04d      	beq.n	800896e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088d2:	2308      	movs	r3, #8
 80088d4:	425b      	negs	r3, r3
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	4b24      	ldr	r3, [pc, #144]	; (8008978 <vPortFree+0xb8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4013      	ands	r3, r2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10a      	bne.n	8008904 <vPortFree+0x44>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	60fb      	str	r3, [r7, #12]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <vPortFree+0x62>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60bb      	str	r3, [r7, #8]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <vPortFree+0xb8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01e      	beq.n	800896e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d11a      	bne.n	800896e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <vPortFree+0xb8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	43db      	mvns	r3, r3
 8008942:	401a      	ands	r2, r3
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008948:	f7fe fb02 	bl	8006f50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <vPortFree+0xbc>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4413      	add	r3, r2
 8008956:	4a09      	ldr	r2, [pc, #36]	; (800897c <vPortFree+0xbc>)
 8008958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800895a:	6938      	ldr	r0, [r7, #16]
 800895c:	f000 f874 	bl	8008a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <vPortFree+0xc0>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	4a06      	ldr	r2, [pc, #24]	; (8008980 <vPortFree+0xc0>)
 8008968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800896a:	f7fe faff 	bl	8006f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800896e:	bf00      	nop
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	200018fc 	.word	0x200018fc
 800897c:	200018ec 	.word	0x200018ec
 8008980:	200018f8 	.word	0x200018f8

08008984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800898a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800898e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008990:	4b27      	ldr	r3, [pc, #156]	; (8008a30 <prvHeapInit+0xac>)
 8008992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00c      	beq.n	80089b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3307      	adds	r3, #7
 80089a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	4a1f      	ldr	r2, [pc, #124]	; (8008a30 <prvHeapInit+0xac>)
 80089b4:	4413      	add	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089bc:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <prvHeapInit+0xb0>)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089c2:	4b1c      	ldr	r3, [pc, #112]	; (8008a34 <prvHeapInit+0xb0>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4413      	add	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089d0:	2208      	movs	r2, #8
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0307 	bic.w	r3, r3, #7
 80089de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <prvHeapInit+0xb4>)
 80089e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089e6:	4b14      	ldr	r3, [pc, #80]	; (8008a38 <prvHeapInit+0xb4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ee:	4b12      	ldr	r3, [pc, #72]	; (8008a38 <prvHeapInit+0xb4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a04:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <prvHeapInit+0xb4>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a0a      	ldr	r2, [pc, #40]	; (8008a3c <prvHeapInit+0xb8>)
 8008a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <prvHeapInit+0xbc>)
 8008a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a1c:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <prvHeapInit+0xc0>)
 8008a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	20000d28 	.word	0x20000d28
 8008a34:	200018e0 	.word	0x200018e0
 8008a38:	200018e8 	.word	0x200018e8
 8008a3c:	200018f0 	.word	0x200018f0
 8008a40:	200018ec 	.word	0x200018ec
 8008a44:	200018fc 	.word	0x200018fc

08008a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a50:	4b28      	ldr	r3, [pc, #160]	; (8008af4 <prvInsertBlockIntoFreeList+0xac>)
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e002      	b.n	8008a5c <prvInsertBlockIntoFreeList+0x14>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d8f7      	bhi.n	8008a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	4413      	add	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d108      	bne.n	8008a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	441a      	add	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	441a      	add	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d118      	bne.n	8008ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d00d      	beq.n	8008ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e008      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	e003      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d002      	beq.n	8008ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	200018e0 	.word	0x200018e0
 8008af8:	200018e8 	.word	0x200018e8

08008afc <__libc_init_array>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	4d0d      	ldr	r5, [pc, #52]	; (8008b34 <__libc_init_array+0x38>)
 8008b00:	4c0d      	ldr	r4, [pc, #52]	; (8008b38 <__libc_init_array+0x3c>)
 8008b02:	1b64      	subs	r4, r4, r5
 8008b04:	10a4      	asrs	r4, r4, #2
 8008b06:	2600      	movs	r6, #0
 8008b08:	42a6      	cmp	r6, r4
 8008b0a:	d109      	bne.n	8008b20 <__libc_init_array+0x24>
 8008b0c:	4d0b      	ldr	r5, [pc, #44]	; (8008b3c <__libc_init_array+0x40>)
 8008b0e:	4c0c      	ldr	r4, [pc, #48]	; (8008b40 <__libc_init_array+0x44>)
 8008b10:	f000 f82e 	bl	8008b70 <_init>
 8008b14:	1b64      	subs	r4, r4, r5
 8008b16:	10a4      	asrs	r4, r4, #2
 8008b18:	2600      	movs	r6, #0
 8008b1a:	42a6      	cmp	r6, r4
 8008b1c:	d105      	bne.n	8008b2a <__libc_init_array+0x2e>
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b24:	4798      	blx	r3
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7ee      	b.n	8008b08 <__libc_init_array+0xc>
 8008b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2e:	4798      	blx	r3
 8008b30:	3601      	adds	r6, #1
 8008b32:	e7f2      	b.n	8008b1a <__libc_init_array+0x1e>
 8008b34:	08008c44 	.word	0x08008c44
 8008b38:	08008c44 	.word	0x08008c44
 8008b3c:	08008c44 	.word	0x08008c44
 8008b40:	08008c48 	.word	0x08008c48

08008b44 <memcpy>:
 8008b44:	440a      	add	r2, r1
 8008b46:	4291      	cmp	r1, r2
 8008b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b4c:	d100      	bne.n	8008b50 <memcpy+0xc>
 8008b4e:	4770      	bx	lr
 8008b50:	b510      	push	{r4, lr}
 8008b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	d1f9      	bne.n	8008b52 <memcpy+0xe>
 8008b5e:	bd10      	pop	{r4, pc}

08008b60 <memset>:
 8008b60:	4402      	add	r2, r0
 8008b62:	4603      	mov	r3, r0
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d100      	bne.n	8008b6a <memset+0xa>
 8008b68:	4770      	bx	lr
 8008b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6e:	e7f9      	b.n	8008b64 <memset+0x4>

08008b70 <_init>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr

08008b7c <_fini>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr
