
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009954  08009954  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800995c  0800995c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  20000010  08009974  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c80  08009974  00021c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b23  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bbe  00000000  00000000  00047b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  0004c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001898  00000000  00000000  0004e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6d0  00000000  00000000  0004fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fde9  00000000  00000000  0007a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001019e0  00000000  00000000  00099ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019b8d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d44  00000000  00000000  0019b92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009860 	.word	0x08009860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009860 	.word	0x08009860

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;
CANMsg *msg;



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08e      	sub	sp, #56	; 0x38
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef pHeader;
	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pHeader, rxData);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	f107 021c 	add.w	r2, r7, #28
 80004e8:	2100      	movs	r1, #0
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f001 fa4d 	bl	800198a <HAL_CAN_GetRxMessage>
//	canSend(pHeader.StdId, rxData);
	CANMsg msg={ &pHeader, rxData};
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	721a      	strb	r2, [r3, #8]
 80004fc:	f107 031c 	add.w	r3, r7, #28
 8000500:	b2db      	uxtb	r3, r3
 8000502:	723b      	strb	r3, [r7, #8]
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	b2db      	uxtb	r3, r3
 800050a:	727b      	strb	r3, [r7, #9]
	xQueueSendToBackFromISR(CAN_Rx_Queue,&(msg), portMAX_DELAY );
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800050e:	6818      	ldr	r0, [r3, #0]
 8000510:	f107 0108 	add.w	r1, r7, #8
 8000514:	2300      	movs	r3, #0
 8000516:	f04f 32ff 	mov.w	r2, #4294967295
 800051a:	f006 fc9d 	bl	8006e58 <xQueueGenericSendFromISR>


}
 800051e:	bf00      	nop
 8000520:	3738      	adds	r7, #56	; 0x38
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20001a08 	.word	0x20001a08

0800052c <Can_Init>:
//		CANMutex = xSemaphoreCreateMutex();


}

void Can_Init(){
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0


	CAN_FilterTypeDef CanFilter;
	CanFilter.FilterIdHigh = 0x0000;
 8000532:	2300      	movs	r3, #0
 8000534:	603b      	str	r3, [r7, #0]
	CanFilter.FilterIdLow = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
	CanFilter.FilterMaskIdHigh = 0x0000;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
	CanFilter.FilterMaskIdLow = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
	CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
	CanFilter.FilterBank = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
	CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
	CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800054e:	2301      	movs	r3, #1
 8000550:	61fb      	str	r3, [r7, #28]
	CanFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000552:	2301      	movs	r3, #1
 8000554:	623b      	str	r3, [r7, #32]


	HAL_CAN_ConfigFilter(&hcan1, &CanFilter);
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <Can_Init+0x4c>)
 800055c:	f001 f907 	bl	800176e <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000560:	2102      	movs	r1, #2
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <Can_Init+0x4c>)
 8000564:	f001 fb23 	bl	8001bae <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <Can_Init+0x4c>)
 800056a:	f001 f9ca 	bl	8001902 <HAL_CAN_Start>

}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	; 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20001a1c 	.word	0x20001a1c

0800057c <HAL_TIM_IC_CaptureCallback>:
#include "task.h"
#include "tim.h"



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	7f1b      	ldrb	r3, [r3, #28]
 8000588:	2b02      	cmp	r3, #2
 800058a:	d130      	bne.n	80005ee <HAL_TIM_IC_CaptureCallback+0x72>
		// Read the IC value
		float ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800058c:	2104      	movs	r1, #4
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f004 f804 	bl	800459c <HAL_TIM_ReadCapturedValue>
 8000594:	ee07 0a90 	vmov	s15, r0
 8000598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059c:	edc7 7a03 	vstr	s15, [r7, #12]
		if(ICValue!=0){
 80005a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80005a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80005a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ac:	d01f      	beq.n	80005ee <HAL_TIM_IC_CaptureCallback+0x72>
			Duty = 100-(HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) *100)/ICValue;
 80005ae:	2100      	movs	r1, #0
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f003 fff3 	bl	800459c <HAL_TIM_ReadCapturedValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	fb02 f303 	mul.w	r3, r2, r3
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80005ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ce:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80005f8 <HAL_TIM_IC_CaptureCallback+0x7c>
 80005d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_TIM_IC_CaptureCallback+0x80>)
 80005d8:	edc3 7a00 	vstr	s15, [r3]
			Frequency = 4000000/ICValue;
 80005dc:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000600 <HAL_TIM_IC_CaptureCallback+0x84>
 80005e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80005e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_TIM_IC_CaptureCallback+0x88>)
 80005ea:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	42c80000 	.word	0x42c80000
 80005fc:	2000002c 	.word	0x2000002c
 8000600:	4a742400 	.word	0x4a742400
 8000604:	20000030 	.word	0x20000030

08000608 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_CAN1_Init+0x64>)
 800060e:	4a18      	ldr	r2, [pc, #96]	; (8000670 <MX_CAN1_Init+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_CAN1_Init+0x64>)
 8000614:	2201      	movs	r2, #1
 8000616:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_CAN1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_CAN1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_CAN1_Init+0x64>)
 8000626:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800062a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_CAN1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_CAN1_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_CAN1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_CAN1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_CAN1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_CAN1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_CAN1_Init+0x64>)
 8000658:	f000 ff8e 	bl	8001578 <HAL_CAN_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000662:	f000 f97f 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20001a1c 	.word	0x20001a1c
 8000670:	40006400 	.word	0x40006400

08000674 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <HAL_CAN_MspInit+0xa0>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d139      	bne.n	800070a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <HAL_CAN_MspInit+0xa4>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069a:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <HAL_CAN_MspInit+0xa4>)
 800069c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a0:	6593      	str	r3, [r2, #88]	; 0x58
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <HAL_CAN_MspInit+0xa4>)
 80006a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <HAL_CAN_MspInit+0xa4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a19      	ldr	r2, [pc, #100]	; (8000718 <HAL_CAN_MspInit+0xa4>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <HAL_CAN_MspInit+0xa4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006d8:	2309      	movs	r3, #9
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f001 fe19 	bl	800231c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2105      	movs	r1, #5
 80006ee:	2014      	movs	r0, #20
 80006f0:	f001 fd6a 	bl	80021c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006f4:	2014      	movs	r0, #20
 80006f6:	f001 fd83 	bl	8002200 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2105      	movs	r1, #5
 80006fe:	2015      	movs	r0, #21
 8000700:	f001 fd62 	bl	80021c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000704:	2015      	movs	r0, #21
 8000706:	f001 fd7b 	bl	8002200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40006400 	.word	0x40006400
 8000718:	40021000 	.word	0x40021000

0800071c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <MX_FREERTOS_Init+0x18>)
 8000722:	2100      	movs	r1, #0
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_FREERTOS_Init+0x1c>)
 8000726:	f005 ff93 	bl	8006650 <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <MX_FREERTOS_Init+0x20>)
 800072e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	080098e8 	.word	0x080098e8
 8000738:	08000741 	.word	0x08000741
 800073c:	20001a44 	.word	0x20001a44

08000740 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f006 f813 	bl	8006774 <osDelay>
 800074e:	e7fb      	b.n	8000748 <StartDefaultTask+0x8>

08000750 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <MX_GPIO_Init+0x124>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a42      	ldr	r2, [pc, #264]	; (8000874 <MX_GPIO_Init+0x124>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b40      	ldr	r3, [pc, #256]	; (8000874 <MX_GPIO_Init+0x124>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <MX_GPIO_Init+0x124>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a3c      	ldr	r2, [pc, #240]	; (8000874 <MX_GPIO_Init+0x124>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <MX_GPIO_Init+0x124>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_GPIO_Init+0x124>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a36      	ldr	r2, [pc, #216]	; (8000874 <MX_GPIO_Init+0x124>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_GPIO_Init+0x124>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_GPIO_Init+0x124>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <MX_GPIO_Init+0x124>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_GPIO_Init+0x124>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7123 	mov.w	r1, #652	; 0x28c
 80007cc:	482a      	ldr	r0, [pc, #168]	; (8000878 <MX_GPIO_Init+0x128>)
 80007ce:	f001 ff4f 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_SHD_Control_GPIO_Port, BMS_SHD_Control_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f001 ff48 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Uhvacc_Measurement_Pin|Ihvacc_Measurement_Pin;
 80007e0:	2303      	movs	r3, #3
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4821      	ldr	r0, [pc, #132]	; (8000878 <MX_GPIO_Init+0x128>)
 80007f4:	f001 fd92 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CloseAirPlus_Pin|CloseAirMinus_Pin|Prechrage_Control_Pin|bmsWakeUp_Pin;
 80007f8:	f44f 7323 	mov.w	r3, #652	; 0x28c
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4819      	ldr	r0, [pc, #100]	; (8000878 <MX_GPIO_Init+0x128>)
 8000812:	f001 fd83 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AirPlusStatus_Pin|AirMinusStatus_Pin;
 8000816:	23c0      	movs	r3, #192	; 0xc0
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f001 fd76 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Precharge_Relay_Status_Pin|SHD_Status_Pin|bmsFault_Pin;
 8000830:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_GPIO_Init+0x128>)
 8000846:	f001 fd69 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_SHD_Control_Pin;
 800084a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_SHD_Control_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f001 fd59 	bl	800231c <HAL_GPIO_Init>

}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fe41 	bl	8001506 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f815 	bl	80008b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f7ff ff62 	bl	8000750 <MX_GPIO_Init>
  MX_TIM2_Init();
 800088c:	f000 f952 	bl	8000b34 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000890:	f000 fccc 	bl	800122c <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000894:	f000 fc9a 	bl	80011cc <MX_UART5_Init>
  MX_CAN1_Init();
 8000898:	f7ff feb6 	bl	8000608 <MX_CAN1_Init>
  MX_TIM4_Init();
 800089c:	f000 f9ca 	bl	8000c34 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */



  userMainInit();
 80008a0:	f000 fdca 	bl	8001438 <userMainInit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80008a4:	f005 fe8a 	bl	80065bc <osKernelInitialize>
  MX_FREERTOS_Init();
 80008a8:	f7ff ff38 	bl	800071c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80008ac:	f005 feaa 	bl	8006604 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
 80008b0:	e7fe      	b.n	80008b0 <main+0x34>

080008b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b096      	sub	sp, #88	; 0x58
 80008b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2244      	movs	r2, #68	; 0x44
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f008 ffc5 	bl	8009850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d8:	f001 fef0 	bl	80026bc <HAL_PWREx_ControlVoltageScaling>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008e2:	f000 f83f 	bl	8000964 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008e6:	2310      	movs	r3, #16
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008f2:	2360      	movs	r3, #96	; 0x60
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 ff32 	bl	8002768 <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800090a:	f000 f82b 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	230f      	movs	r3, #15
 8000910:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fb04 	bl	8002f34 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000932:	f000 f817 	bl	8000964 <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3758      	adds	r7, #88	; 0x58
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//////
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000952:	f000 fdf1 	bl	8001538 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//////
  /* USER CODE END Callback 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40012c00 	.word	0x40012c00

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_MspInit+0x4c>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_MspInit+0x4c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	; 0x60
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_MspInit+0x4c>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_MspInit+0x4c>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	; 0x58
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_MspInit+0x4c>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	210f      	movs	r1, #15
 80009aa:	f06f 0001 	mvn.w	r0, #1
 80009ae:	f001 fc0b 	bl	80021c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2019      	movs	r0, #25
 80009d6:	f001 fbf7 	bl	80021c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009da:	2019      	movs	r0, #25
 80009dc:	f001 fc10 	bl	8002200 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <HAL_InitTick+0x9c>)
 80009e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <HAL_InitTick+0x9c>)
 80009e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ea:	6613      	str	r3, [r2, #96]	; 0x60
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_InitTick+0x9c>)
 80009ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fc3c 	bl	8003280 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a08:	f002 fc24 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8000a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <HAL_InitTick+0xa0>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a3e:	f003 f96d 	bl	8003d1c <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a4a:	f003 f9bf 	bl	8003dcc <HAL_TIM_Base_Start_IT>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	20001a48 	.word	0x20001a48
 8000a68:	40012c00 	.word	0x40012c00

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <CAN1_RX0_IRQHandler+0x10>)
 8000a9e:	f001 f8ac 	bl	8001bfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20001a1c 	.word	0x20001a1c

08000aac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <CAN1_RX1_IRQHandler+0x10>)
 8000ab2:	f001 f8a2 	bl	8001bfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20001a1c 	.word	0x20001a1c

08000ac0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ac6:	f003 faa2 	bl	800400e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20001a48 	.word	0x20001a48

08000ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM2_IRQHandler+0x10>)
 8000ada:	f003 fa98 	bl	800400e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20001ae0 	.word	0x20001ae0

08000ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART1_IRQHandler+0x10>)
 8000aee:	f004 fa5b 	bl	8004fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20001bb4 	.word	0x20001bb4

08000afc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <UART5_IRQHandler+0x10>)
 8000b02:	f004 fa51 	bl	8004fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20001b30 	.word	0x20001b30

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b6a:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b8a:	4829      	ldr	r0, [pc, #164]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000b8c:	f003 f98e 	bl	8003eac <HAL_TIM_IC_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b96:	f7ff fee5 	bl	8000964 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000b9e:	2360      	movs	r3, #96	; 0x60
 8000ba0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481e      	ldr	r0, [pc, #120]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000bb6:	f003 fcae 	bl	8004516 <HAL_TIM_SlaveConfigSynchro>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000bc0:	f7ff fed0 	bl	8000964 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4814      	ldr	r0, [pc, #80]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000bde:	f003 fb35 	bl	800424c <HAL_TIM_IC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000be8:	f7ff febc 	bl	8000964 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000bec:	2302      	movs	r3, #2
 8000bee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000bfe:	f003 fb25 	bl	800424c <HAL_TIM_IC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c08:	f7ff feac 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM2_Init+0xfc>)
 8000c1a:	f004 f80d 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000c24:	f7ff fe9e 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20001ae0 	.word	0x20001ae0

08000c34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000c54:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <MX_TIM4_Init+0xac>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000c5a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000c68:	2264      	movs	r2, #100	; 0x64
 8000c6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c78:	4818      	ldr	r0, [pc, #96]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000c7a:	f003 f84f 	bl	8003d1c <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000c84:	f7ff fe6e 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000c96:	f003 fb75 	bl	8004384 <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ca0:	f7ff fe60 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000ca8:	f003 f957 	bl	8003f5a <HAL_TIM_OnePulse_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000cb2:	f7ff fe57 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM4_Init+0xa8>)
 8000cc4:	f003 ffb8 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000cce:	f7ff fe49 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20001a94 	.word	0x20001a94
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d04:	d12f      	bne.n	8000d66 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_TIM_IC_MspInit+0x8c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_TIM_IC_MspInit+0x8c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_TIM_IC_MspInit+0x8c>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_TIM_IC_MspInit+0x8c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_TIM_IC_MspInit+0x8c>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_TIM_IC_MspInit+0x8c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d36:	2308      	movs	r3, #8
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d46:	2301      	movs	r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <HAL_TIM_IC_MspInit+0x90>)
 8000d52:	f001 fae3 	bl	800231c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2105      	movs	r1, #5
 8000d5a:	201c      	movs	r0, #28
 8000d5c:	f001 fa34 	bl	80021c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d60:	201c      	movs	r0, #28
 8000d62:	f001 fa4d 	bl	8002200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48000400 	.word	0x48000400

08000d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10b      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40000800 	.word	0x40000800
 8000db4:	40021000 	.word	0x40021000

08000db8 <UART_TransmitTask>:
uint8_t procitano=0;

static TimerHandle_t timerChecker;
void vCallbackFunction ( TimerHandle_t xTimer );
//
static void UART_TransmitTask(void *parameters) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

	uartMsg buffer;
	while (1) {
		xQueueReceive(UART_TransmitQueueHandle, &buffer, portMAX_DELAY);
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <UART_TransmitTask+0x4c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f107 0108 	add.w	r1, r7, #8
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 f8df 	bl	8006f90 <xQueueReceive>
		if (buffer.idUart == 1) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d107      	bne.n	8000de8 <UART_TransmitTask+0x30>
			HAL_UART_Transmit_IT(&huart1, &buffer.string, sizeof(uint8_t));
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <UART_TransmitTask+0x50>)
 8000de2:	f004 f81d 	bl	8004e20 <HAL_UART_Transmit_IT>
 8000de6:	e006      	b.n	8000df6 <UART_TransmitTask+0x3e>
		} else {
			HAL_UART_Transmit_IT(&huart5, &buffer.string, sizeof(uint8_t));
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	2201      	movs	r2, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <UART_TransmitTask+0x54>)
 8000df2:	f004 f815 	bl	8004e20 <HAL_UART_Transmit_IT>
		}

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000df6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f007 fbe2 	bl	80085c4 <ulTaskNotifyTake>
		xQueueReceive(UART_TransmitQueueHandle, &buffer, portMAX_DELAY);
 8000e00:	e7de      	b.n	8000dc0 <UART_TransmitTask+0x8>
 8000e02:	bf00      	nop
 8000e04:	20000038 	.word	0x20000038
 8000e08:	20001bb4 	.word	0x20001bb4
 8000e0c:	20001b30 	.word	0x20001b30

08000e10 <HAL_UART_TxCpltCallback>:

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

	if (huart->Instance == huart1.Instance
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_UART_TxCpltCallback+0x58>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d005      	beq.n	8000e30 <HAL_UART_TxCpltCallback+0x20>
			|| huart->Instance == huart5.Instance) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_UART_TxCpltCallback+0x5c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d117      	bne.n	8000e60 <HAL_UART_TxCpltCallback+0x50>
		sin = 1;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_UART_TxCpltCallback+0x60>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
		BaseType_t woken = pdFALSE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(UART_TransmitTaskHandle, &woken);
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_UART_TxCpltCallback+0x64>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f107 020c 	add.w	r2, r7, #12
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f007 fc05 	bl	8008654 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(woken);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <HAL_UART_TxCpltCallback+0x50>
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_UART_TxCpltCallback+0x68>)
 8000e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	f3bf 8f6f 	isb	sy

	}

}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20001bb4 	.word	0x20001bb4
 8000e6c:	20001b30 	.word	0x20001b30
 8000e70:	20000040 	.word	0x20000040
 8000e74:	20000034 	.word	0x20000034
 8000e78:	e000ed04 	.word	0xe000ed04

08000e7c <HAL_UART_RxCpltCallback>:
	}
}

extern int flagovi;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	TaskHandle_t pom;
	BaseType_t woken = pdFALSE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
	if (huart->Instance == huart5.Instance) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_RxCpltCallback+0x68>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d110      	bne.n	8000eb6 <HAL_UART_RxCpltCallback+0x3a>
		flagovi=1;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_UART_RxCpltCallback+0x6c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
//		pom=UART5_ReceiveTaskHandle;
		xQueueSendToBackFromISR(UART5_ReceiveQueueHandle, &uartData5, &woken);
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_UART_RxCpltCallback+0x70>)
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	4912      	ldr	r1, [pc, #72]	; (8000ef0 <HAL_UART_RxCpltCallback+0x74>)
 8000ea6:	f005 ffd7 	bl	8006e58 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart5, &uartData5, sizeof(uint8_t));
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4910      	ldr	r1, [pc, #64]	; (8000ef0 <HAL_UART_RxCpltCallback+0x74>)
 8000eae:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <HAL_UART_RxCpltCallback+0x68>)
 8000eb0:	f004 f824 	bl	8004efc <HAL_UART_Receive_IT>
	}


//	vTaskNotifyGiveFromISR(pom, &woken);
//	portYIELD_FROM_ISR(woken);
}
 8000eb4:	e012      	b.n	8000edc <HAL_UART_RxCpltCallback+0x60>
	} else if (huart->Instance == huart1.Instance) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_UART_RxCpltCallback+0x78>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d10c      	bne.n	8000edc <HAL_UART_RxCpltCallback+0x60>
		xQueueSendToBackFromISR(UART1_ReceiveQueueHandle, &uartData1, &woken);
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_UART_RxCpltCallback+0x7c>)
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	f107 020c 	add.w	r2, r7, #12
 8000eca:	2300      	movs	r3, #0
 8000ecc:	490b      	ldr	r1, [pc, #44]	; (8000efc <HAL_UART_RxCpltCallback+0x80>)
 8000ece:	f005 ffc3 	bl	8006e58 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart1, &uartData1, sizeof(uint8_t));
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4909      	ldr	r1, [pc, #36]	; (8000efc <HAL_UART_RxCpltCallback+0x80>)
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <HAL_UART_RxCpltCallback+0x78>)
 8000ed8:	f004 f810 	bl	8004efc <HAL_UART_Receive_IT>
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20001b30 	.word	0x20001b30
 8000ee8:	20000054 	.word	0x20000054
 8000eec:	20000048 	.word	0x20000048
 8000ef0:	20001b2c 	.word	0x20001b2c
 8000ef4:	20001bb4 	.word	0x20001bb4
 8000ef8:	2000004c 	.word	0x2000004c
 8000efc:	20001b2d 	.word	0x20001b2d

08000f00 <UART_Init>:

// GENERAL
// -----------------------------------------------------------------------------

void UART_Init() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af02      	add	r7, sp, #8

	UART_TransmitQueueHandle = xQueueCreate(32, sizeof(uartMsg));
 8000f06:	2200      	movs	r2, #0
 8000f08:	2108      	movs	r1, #8
 8000f0a:	2020      	movs	r0, #32
 8000f0c:	f005 fe16 	bl	8006b3c <xQueueGenericCreate>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <UART_Init+0x94>)
 8000f14:	6013      	str	r3, [r2, #0]
	UART_TransmitMutexHandle = xSemaphoreCreateMutex();
 8000f16:	2001      	movs	r0, #1
 8000f18:	f005 fe87 	bl	8006c2a <xQueueCreateMutex>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <UART_Init+0x98>)
 8000f20:	6013      	str	r3, [r2, #0]
	xTaskCreate(UART_TransmitTask, "transmitTask", 64, NULL, 20,
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <UART_Init+0x9c>)
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	2314      	movs	r3, #20
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2240      	movs	r2, #64	; 0x40
 8000f2e:	491c      	ldr	r1, [pc, #112]	; (8000fa0 <UART_Init+0xa0>)
 8000f30:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <UART_Init+0xa4>)
 8000f32:	f006 fbfc 	bl	800772e <xTaskCreate>
			&UART_TransmitTaskHandle);

	UART5_ReceiveQueueHandle = xQueueCreate(32, sizeof(uint8_t));
 8000f36:	2200      	movs	r2, #0
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2020      	movs	r0, #32
 8000f3c:	f005 fdfe 	bl	8006b3c <xQueueGenericCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <UART_Init+0xa8>)
 8000f44:	6013      	str	r3, [r2, #0]
	UART1_ReceiveQueueHandle = xQueueCreate(32, sizeof(uint8_t));
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2020      	movs	r0, #32
 8000f4c:	f005 fdf6 	bl	8006b3c <xQueueGenericCreate>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <UART_Init+0xac>)
 8000f54:	6013      	str	r3, [r2, #0]
	UART_ReceiveMutexHandle = xSemaphoreCreateMutex();
 8000f56:	2001      	movs	r0, #1
 8000f58:	f005 fe67 	bl	8006c2a <xQueueCreateMutex>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <UART_Init+0xb0>)
 8000f60:	6013      	str	r3, [r2, #0]
//	xTaskCreate(UART_ReceiveTask, "receiveTask1", 64, (void*)1, 20, &UART1_ReceiveTaskHandle);
//	xTaskCreate(UART_ReceiveTask, "receiveTask5", 64, (void*)5, 20, &UART5_ReceiveTaskHandle);

	HAL_UART_Receive_IT(&huart5, &uartData5, sizeof(uint8_t));
 8000f62:	2201      	movs	r2, #1
 8000f64:	4913      	ldr	r1, [pc, #76]	; (8000fb4 <UART_Init+0xb4>)
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <UART_Init+0xb8>)
 8000f68:	f003 ffc8 	bl	8004efc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &uartData1, sizeof(uint8_t));
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4913      	ldr	r1, [pc, #76]	; (8000fbc <UART_Init+0xbc>)
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <UART_Init+0xc0>)
 8000f72:	f003 ffc3 	bl	8004efc <HAL_UART_Receive_IT>

	timerChecker=xTimerCreate("timeChecker", pdMS_TO_TICKS(timeCheckerUart), pdFALSE, NULL, vCallbackFunction);
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <UART_Init+0xc4>)
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000f82:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <UART_Init+0xc8>)
 8000f84:	f007 fc94 	bl	80088b0 <xTimerCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <UART_Init+0xcc>)
 8000f8c:	6013      	str	r3, [r2, #0]

}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000038 	.word	0x20000038
 8000f98:	2000003c 	.word	0x2000003c
 8000f9c:	20000034 	.word	0x20000034
 8000fa0:	08009884 	.word	0x08009884
 8000fa4:	08000db9 	.word	0x08000db9
 8000fa8:	20000048 	.word	0x20000048
 8000fac:	2000004c 	.word	0x2000004c
 8000fb0:	20000050 	.word	0x20000050
 8000fb4:	20001b2c 	.word	0x20001b2c
 8000fb8:	20001b30 	.word	0x20001b30
 8000fbc:	20001b2d 	.word	0x20001b2d
 8000fc0:	20001bb4 	.word	0x20001bb4
 8000fc4:	08000fd1 	.word	0x08000fd1
 8000fc8:	08009894 	.word	0x08009894
 8000fcc:	20000044 	.word	0x20000044

08000fd0 <vCallbackFunction>:


void vCallbackFunction(TimerHandle_t xTimer){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if(procitano==0){
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <vCallbackFunction+0x34>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10c      	bne.n	8000ffa <vCallbackFunction+0x2a>
		uint8_t poruka='\t';
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	73fb      	strb	r3, [r7, #15]
		BaseType_t woken = pdFALSE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
		xQueueSendToBackFromISR(UART5_ReceiveQueueHandle, &poruka, &woken);
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <vCallbackFunction+0x38>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f107 0208 	add.w	r2, r7, #8
 8000ff0:	f107 010f 	add.w	r1, r7, #15
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f005 ff2f 	bl	8006e58 <xQueueGenericSendFromISR>

	}
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000041 	.word	0x20000041
 8001008:	20000048 	.word	0x20000048

0800100c <UART_AsyncTransmitString>:
//		HAL_TIM_Base_Stop(htim);
//		htim->Instance->CNT=0;
//	}
//}

void UART_AsyncTransmitString(int id, uint8_t const string[]) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	if (string != NULL) {
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d02a      	beq.n	8001072 <UART_AsyncTransmitString+0x66>
		xSemaphoreTake(UART_TransmitMutexHandle, portMAX_DELAY);
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <UART_AsyncTransmitString+0x70>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	4618      	mov	r0, r3
 8001026:	f006 f893 	bl	8007150 <xQueueSemaphoreTake>

		for (uint32_t i = 0; i < strlen(string); i++) {
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e012      	b.n	8001056 <UART_AsyncTransmitString+0x4a>
			uartMsg tmp = { string[i], id };
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	733b      	strb	r3, [r7, #12]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	613b      	str	r3, [r7, #16]
			xQueueSendToBack(UART_TransmitQueueHandle, &tmp, portMAX_DELAY);
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <UART_AsyncTransmitString+0x74>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	2300      	movs	r3, #0
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	f005 fe06 	bl	8006c5c <xQueueGenericSend>
		for (uint32_t i = 0; i < strlen(string); i++) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f7ff f8ba 	bl	80001d0 <strlen>
 800105c:	4602      	mov	r2, r0
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	4293      	cmp	r3, r2
 8001062:	d3e5      	bcc.n	8001030 <UART_AsyncTransmitString+0x24>
		}

		xSemaphoreGive(UART_TransmitMutexHandle);
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <UART_AsyncTransmitString+0x70>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	f005 fdf5 	bl	8006c5c <xQueueGenericSend>
	}
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000003c 	.word	0x2000003c
 8001080:	20000038 	.word	0x20000038

08001084 <UART_BlockReceiveString>:
	xSemaphoreGive(UART_ReceiveMutexHandle);

	return character;
}

char* UART_BlockReceiveString(int id) {
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af02      	add	r7, sp, #8
 800108a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(UART_ReceiveMutexHandle, portMAX_DELAY);
 800108c:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <UART_BlockReceiveString+0x11c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	4618      	mov	r0, r3
 8001096:	f006 f85b 	bl	8007150 <xQueueSemaphoreTake>

	char *string = pvPortMalloc(64);
 800109a:	2040      	movs	r0, #64	; 0x40
 800109c:	f008 f9bc 	bl	8009418 <pvPortMalloc>
 80010a0:	6138      	str	r0, [r7, #16]

	if (string != NULL) {
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d06c      	beq.n	8001182 <UART_BlockReceiveString+0xfe>
		uint32_t index = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

		char character = '\0';
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
		procitano=0;
 80010b0:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <UART_BlockReceiveString+0x120>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
		xTimerStart(timerChecker,portMAX_DELAY);
 80010b6:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <UART_BlockReceiveString+0x124>)
 80010b8:	681c      	ldr	r4, [r3, #0]
 80010ba:	f006 fdc3 	bl	8007c44 <xTaskGetTickCount>
 80010be:	4602      	mov	r2, r0
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	4620      	mov	r0, r4
 80010cc:	f007 fc4c 	bl	8008968 <xTimerGenericCommand>
		while (character != '\n' && character!='\t'&& index < 64) {
 80010d0:	e03c      	b.n	800114c <UART_BlockReceiveString+0xc8>
			if (id == 5) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d119      	bne.n	800110c <UART_BlockReceiveString+0x88>
				xTimerStart(timerChecker,portMAX_DELAY);
 80010d8:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <UART_BlockReceiveString+0x124>)
 80010da:	681c      	ldr	r4, [r3, #0]
 80010dc:	f006 fdb2 	bl	8007c44 <xTaskGetTickCount>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2300      	movs	r3, #0
 80010ea:	2101      	movs	r1, #1
 80010ec:	4620      	mov	r0, r4
 80010ee:	f007 fc3b 	bl	8008968 <xTimerGenericCommand>
				xQueueReceive(UART5_ReceiveQueueHandle, &character,
 80010f2:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <UART_BlockReceiveString+0x128>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f107 010f 	add.w	r1, r7, #15
 80010fa:	f04f 32ff 	mov.w	r2, #4294967295
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 ff46 	bl	8006f90 <xQueueReceive>
						portMAX_DELAY);
				procitano=1;
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <UART_BlockReceiveString+0x120>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e018      	b.n	800113e <UART_BlockReceiveString+0xba>
			} else {
				xTimerStart(timerChecker,portMAX_DELAY);
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <UART_BlockReceiveString+0x124>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f006 fd98 	bl	8007c44 <xTaskGetTickCount>
 8001114:	4602      	mov	r2, r0
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2300      	movs	r3, #0
 800111e:	2101      	movs	r1, #1
 8001120:	4620      	mov	r0, r4
 8001122:	f007 fc21 	bl	8008968 <xTimerGenericCommand>
				xQueueReceive(UART1_ReceiveQueueHandle, &character,
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <UART_BlockReceiveString+0x12c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f107 010f 	add.w	r1, r7, #15
 800112e:	f04f 32ff 	mov.w	r2, #4294967295
 8001132:	4618      	mov	r0, r3
 8001134:	f005 ff2c 	bl	8006f90 <xQueueReceive>
						portMAX_DELAY);
				procitano=1;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <UART_BlockReceiveString+0x120>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
			}

			string[index++] = character;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	617a      	str	r2, [r7, #20]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4413      	add	r3, r2
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	701a      	strb	r2, [r3, #0]
		while (character != '\n' && character!='\t'&& index < 64) {
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d005      	beq.n	800115e <UART_BlockReceiveString+0xda>
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b09      	cmp	r3, #9
 8001156:	d002      	beq.n	800115e <UART_BlockReceiveString+0xda>
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b3f      	cmp	r3, #63	; 0x3f
 800115c:	d9b9      	bls.n	80010d2 <UART_BlockReceiveString+0x4e>
		}

		if(character=='\t'){
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b09      	cmp	r3, #9
 8001162:	d106      	bne.n	8001172 <UART_BlockReceiveString+0xee>
			string[index++] = character;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	617a      	str	r2, [r7, #20]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4413      	add	r3, r2
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	701a      	strb	r2, [r3, #0]
		}
		string[--index] = '\0';
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3b01      	subs	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	4413      	add	r3, r2
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
	}

	xSemaphoreGive(UART_ReceiveMutexHandle);
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <UART_BlockReceiveString+0x11c>)
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	2300      	movs	r3, #0
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	f005 fd66 	bl	8006c5c <xQueueGenericSend>
resetQueue();
 8001190:	f000 f810 	bl	80011b4 <resetQueue>
	return string;
 8001194:	693b      	ldr	r3, [r7, #16]
}
 8001196:	4618      	mov	r0, r3
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000050 	.word	0x20000050
 80011a4:	20000041 	.word	0x20000041
 80011a8:	20000044 	.word	0x20000044
 80011ac:	20000048 	.word	0x20000048
 80011b0:	2000004c 	.word	0x2000004c

080011b4 <resetQueue>:

void resetQueue() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	xQueueReset(UART5_ReceiveQueueHandle);
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <resetQueue+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fbdc 	bl	800697c <xQueueGenericReset>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000048 	.word	0x20000048

080011cc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_UART5_Init+0x58>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <MX_UART5_Init+0x5c>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_UART5_Init+0x58>)
 80011d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011dc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_UART5_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_UART5_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_UART5_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_UART5_Init+0x58>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_UART5_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_UART5_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_UART5_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_UART5_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_UART5_Init+0x58>)
 8001210:	f003 fdb8 	bl	8004d84 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800121a:	f7ff fba3 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20001b30 	.word	0x20001b30
 8001228:	40005000 	.word	0x40005000

0800122c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART1_UART_Init+0x54>)
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <MX_USART1_UART_Init+0x58>)
 8001234:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_USART1_UART_Init+0x54>)
 8001238:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_USART1_UART_Init+0x5c>)
 800123a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART1_UART_Init+0x54>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_USART1_UART_Init+0x54>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_USART1_UART_Init+0x54>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART1_UART_Init+0x54>)
 8001250:	220c      	movs	r2, #12
 8001252:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_USART1_UART_Init+0x54>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART1_UART_Init+0x54>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_USART1_UART_Init+0x54>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART1_UART_Init+0x54>)
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART1_UART_Init+0x54>)
 800126e:	f003 fd89 	bl	8004d84 <HAL_UART_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001278:	f7ff fb74 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20001bb4 	.word	0x20001bb4
 8001284:	40013800 	.word	0x40013800
 8001288:	0003d090 	.word	0x0003d090

0800128c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ae      	sub	sp, #184	; 0xb8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	2288      	movs	r2, #136	; 0x88
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f008 facf 	bl	8009850 <memset>
  if(uartHandle->Instance==UART5)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a5b      	ldr	r2, [pc, #364]	; (8001424 <HAL_UART_MspInit+0x198>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d165      	bne.n	8001388 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80012bc:	2310      	movs	r3, #16
 80012be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 f86b 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012d4:	f7ff fb46 	bl	8000964 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80012d8:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012e2:	6593      	str	r3, [r2, #88]	; 0x58
 80012e4:	4b50      	ldr	r3, [pc, #320]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001308:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_UART_MspInit+0x19c>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	4a46      	ldr	r2, [pc, #280]	; (8001428 <HAL_UART_MspInit+0x19c>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001314:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_UART_MspInit+0x19c>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800133a:	2308      	movs	r3, #8
 800133c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001344:	4619      	mov	r1, r3
 8001346:	4839      	ldr	r0, [pc, #228]	; (800142c <HAL_UART_MspInit+0x1a0>)
 8001348:	f000 ffe8 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134c:	2304      	movs	r3, #4
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001364:	2308      	movs	r3, #8
 8001366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800136e:	4619      	mov	r1, r3
 8001370:	482f      	ldr	r0, [pc, #188]	; (8001430 <HAL_UART_MspInit+0x1a4>)
 8001372:	f000 ffd3 	bl	800231c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	2035      	movs	r0, #53	; 0x35
 800137c:	f000 ff24 	bl	80021c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001380:	2035      	movs	r0, #53	; 0x35
 8001382:	f000 ff3d 	bl	8002200 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001386:	e049      	b.n	800141c <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a29      	ldr	r2, [pc, #164]	; (8001434 <HAL_UART_MspInit+0x1a8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d144      	bne.n	800141c <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001392:	2301      	movs	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001396:	2300      	movs	r3, #0
 8001398:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 f800 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0x122>
      Error_Handler();
 80013aa:	f7ff fadb 	bl	8000964 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f8:	2307      	movs	r3, #7
 80013fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f000 ff88 	bl	800231c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2105      	movs	r1, #5
 8001410:	2025      	movs	r0, #37	; 0x25
 8001412:	f000 fed9 	bl	80021c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001416:	2025      	movs	r0, #37	; 0x25
 8001418:	f000 fef2 	bl	8002200 <HAL_NVIC_EnableIRQ>
}
 800141c:	bf00      	nop
 800141e:	37b8      	adds	r7, #184	; 0xb8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40005000 	.word	0x40005000
 8001428:	40021000 	.word	0x40021000
 800142c:	48000800 	.word	0x48000800
 8001430:	48000c00 	.word	0x48000c00
 8001434:	40013800 	.word	0x40013800

08001438 <userMainInit>:
extern void shutDownSlavesCommand();
extern void resetQueue();
int flagovi=0;
TaskHandle_t mainTask;

void userMainInit(){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af02      	add	r7, sp, #8

	Can_Init();
 800143e:	f7ff f875 	bl	800052c <Can_Init>
	UART_Init();
 8001442:	f7ff fd5d 	bl	8000f00 <UART_Init>
//	create_CanTask();
	xTaskCreate(userMain, "UserMainThread", 64, NULL, 20, &mainTask);
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <userMainInit+0x28>)
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2314      	movs	r3, #20
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	4904      	ldr	r1, [pc, #16]	; (8001464 <userMainInit+0x2c>)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <userMainInit+0x30>)
 8001456:	f006 f96a 	bl	800772e <xTaskCreate>
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20001c38 	.word	0x20001c38
 8001464:	080098a0 	.word	0x080098a0
 8001468:	0800146d 	.word	0x0800146d

0800146c <userMain>:


int userMain(void){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
//	masterInit();
//	InitPL455();
//	vTaskDelay(pdMS_TO_TICKS(1000));
//	shutDownSlavesCommand();

char* desavanje="desio se prijem\n";
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <userMain+0x40>)
 8001474:	60fb      	str	r3, [r7, #12]
char* posle="posle ifa\n";
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <userMain+0x44>)
 8001478:	60bb      	str	r3, [r7, #8]



//		if(flagovi==1){
			char* tmp;
			tmp=UART_BlockReceiveString(5);
 800147a:	2005      	movs	r0, #5
 800147c:	f7ff fe02 	bl	8001084 <UART_BlockReceiveString>
 8001480:	6078      	str	r0, [r7, #4]
			UART_AsyncTransmitString(5, tmp);
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2005      	movs	r0, #5
 8001486:	f7ff fdc1 	bl	800100c <UART_AsyncTransmitString>
			UART_AsyncTransmitString(5, desavanje);
 800148a:	68f9      	ldr	r1, [r7, #12]
 800148c:	2005      	movs	r0, #5
 800148e:	f7ff fdbd 	bl	800100c <UART_AsyncTransmitString>
//			flagovi=0;
//
//		}else{

		vTaskDelay(pdMS_TO_TICKS(500));
 8001492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001496:	f006 fa8f 	bl	80079b8 <vTaskDelay>
		UART_AsyncTransmitString(5, posle);
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	2005      	movs	r0, #5
 800149e:	f7ff fdb5 	bl	800100c <UART_AsyncTransmitString>
//		UART_AsyncTransmitString(5, "master\n");
//		UART_AsyncTransmitString(5, "du\n");
//		UART_AsyncTransmitString(5, "dc\n");
//		uint8_t niz[8]={0,1,0,1,0,1,0,1};
//		canSend(1, niz);
		vTaskDelay(pdMS_TO_TICKS(1000));
 80014a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a6:	f006 fa87 	bl	80079b8 <vTaskDelay>
	while(1){
 80014aa:	e7e6      	b.n	800147a <userMain+0xe>
 80014ac:	080098b0 	.word	0x080098b0
 80014b0:	080098c4 	.word	0x080098c4

080014b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b8:	f7ff fb2a 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LoopForever+0xe>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <LoopForever+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f008 f983 	bl	80097ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e6:	f7ff f9c9 	bl	800087c <main>

080014ea <LoopForever>:

LoopForever:
    b LoopForever
 80014ea:	e7fe      	b.n	80014ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014f8:	08009964 	.word	0x08009964
  ldr r2, =_sbss
 80014fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001500:	20001c80 	.word	0x20001c80

08001504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>

08001506 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 fe4e 	bl	80021b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001516:	200f      	movs	r0, #15
 8001518:	f7ff fa52 	bl	80009c0 <HAL_InitTick>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	e001      	b.n	800152c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001528:	f7ff fa22 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800152c:	79fb      	ldrb	r3, [r7, #7]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	20001c3c 	.word	0x20001c3c

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20001c3c 	.word	0x20001c3c

08001578 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0ed      	b.n	8001766 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff f86c 	bl	8000674 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ac:	f7ff ffd8 	bl	8001560 <HAL_GetTick>
 80015b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015b2:	e012      	b.n	80015da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b4:	f7ff ffd4 	bl	8001560 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b0a      	cmp	r3, #10
 80015c0:	d90b      	bls.n	80015da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2205      	movs	r2, #5
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0c5      	b.n	8001766 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0e5      	beq.n	80015b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0202 	bic.w	r2, r2, #2
 80015f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f8:	f7ff ffb2 	bl	8001560 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015fe:	e012      	b.n	8001626 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001600:	f7ff ffae 	bl	8001560 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b0a      	cmp	r3, #10
 800160c:	d90b      	bls.n	8001626 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2205      	movs	r2, #5
 800161e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e09f      	b.n	8001766 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e5      	bne.n	8001600 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e1b      	ldrb	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d108      	bne.n	800164e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e007      	b.n	800165e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7e5b      	ldrb	r3, [r3, #25]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e007      	b.n	8001688 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001686:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7e9b      	ldrb	r3, [r3, #26]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0220 	orr.w	r2, r2, #32
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e007      	b.n	80016b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0220 	bic.w	r2, r2, #32
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7edb      	ldrb	r3, [r3, #27]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d108      	bne.n	80016cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0210 	bic.w	r2, r2, #16
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	e007      	b.n	80016dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0210 	orr.w	r2, r2, #16
 80016da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7f1b      	ldrb	r3, [r3, #28]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0208 	orr.w	r2, r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e007      	b.n	8001706 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0208 	bic.w	r2, r2, #8
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7f5b      	ldrb	r3, [r3, #29]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0204 	orr.w	r2, r2, #4
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e007      	b.n	8001730 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	ea42 0103 	orr.w	r1, r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800176e:	b480      	push	{r7}
 8001770:	b087      	sub	sp, #28
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001786:	7cfb      	ldrb	r3, [r7, #19]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d003      	beq.n	8001794 <HAL_CAN_ConfigFilter+0x26>
 800178c:	7cfb      	ldrb	r3, [r7, #19]
 800178e:	2b02      	cmp	r3, #2
 8001790:	f040 80aa 	bne.w	80018e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2201      	movs	r2, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d123      	bne.n	8001816 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	401a      	ands	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3248      	adds	r2, #72	; 0x48
 80017f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800180a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180c:	6979      	ldr	r1, [r7, #20]
 800180e:	3348      	adds	r3, #72	; 0x48
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d122      	bne.n	8001864 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	431a      	orrs	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800183e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3248      	adds	r2, #72	; 0x48
 8001844:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001858:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	3348      	adds	r3, #72	; 0x48
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800187e:	e007      	b.n	8001890 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	431a      	orrs	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018aa:	e007      	b.n	80018bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d107      	bne.n	80018d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018da:	f023 0201 	bic.w	r2, r3, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e006      	b.n	80018f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
  }
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d12e      	bne.n	8001974 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2202      	movs	r2, #2
 800191a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800192e:	f7ff fe17 	bl	8001560 <HAL_GetTick>
 8001932:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001934:	e012      	b.n	800195c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001936:	f7ff fe13 	bl	8001560 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b0a      	cmp	r3, #10
 8001942:	d90b      	bls.n	800195c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2205      	movs	r2, #5
 8001954:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e012      	b.n	8001982 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e5      	bne.n	8001936 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	e006      	b.n	8001982 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d003      	beq.n	80019ae <HAL_CAN_GetRxMessage+0x24>
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	f040 80f3 	bne.w	8001b94 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10e      	bne.n	80019d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0e7      	b.n	8001ba2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0d8      	b.n	8001ba2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	331b      	adds	r3, #27
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	4413      	add	r3, r2
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0204 	and.w	r2, r3, #4
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	331b      	adds	r3, #27
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0d5b      	lsrs	r3, r3, #21
 8001a1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e00b      	b.n	8001a40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	331b      	adds	r3, #27
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	331b      	adds	r3, #27
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0202 	and.w	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	331b      	adds	r3, #27
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	331b      	adds	r3, #27
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	331b      	adds	r3, #27
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	3304      	adds	r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0a1a      	lsrs	r2, r3, #8
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0c1a      	lsrs	r2, r3, #16
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0e1a      	lsrs	r2, r3, #24
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	3303      	adds	r3, #3
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3304      	adds	r3, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0a1a      	lsrs	r2, r3, #8
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	3305      	adds	r3, #5
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0c1a      	lsrs	r2, r3, #16
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3306      	adds	r3, #6
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e1a      	lsrs	r2, r3, #24
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3307      	adds	r3, #7
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d108      	bne.n	8001b80 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0220 	orr.w	r2, r2, #32
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	e007      	b.n	8001b90 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e006      	b.n	8001ba2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d002      	beq.n	8001bcc <HAL_CAN_ActivateNotification+0x1e>
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d109      	bne.n	8001be0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6959      	ldr	r1, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e006      	b.n	8001bee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
  }
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b08a      	sub	sp, #40	; 0x28
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d07c      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d023      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f983 	bl	8001f68 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c62:	e016      	b.n	8001c92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	e00c      	b.n	8001c92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	e002      	b.n	8001c92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f989 	bl	8001fa4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d024      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f963 	bl	8001f7c <HAL_CAN_TxMailbox1CompleteCallback>
 8001cb6:	e016      	b.n	8001ce6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d004      	beq.n	8001ccc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	e00c      	b.n	8001ce6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cde:	e002      	b.n	8001ce6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f969 	bl	8001fb8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d024      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f943 	bl	8001f90 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d0a:	e016      	b.n	8001d3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e00c      	b.n	8001d3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	e002      	b.n	8001d3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f949 	bl	8001fcc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00c      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00b      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2208      	movs	r2, #8
 8001d78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f930 	bl	8001fe0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe fb9d 	bl	80004d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00c      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00b      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2208      	movs	r2, #8
 8001ddc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f912 	bl	8002008 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8f9 	bl	8001ff4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8fc 	bl	800201c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8f5 	bl	8002030 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d07b      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d072      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d043      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03e      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec8:	2b60      	cmp	r3, #96	; 0x60
 8001eca:	d02b      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x32a>
 8001ecc:	2b60      	cmp	r3, #96	; 0x60
 8001ece:	d82e      	bhi.n	8001f2e <HAL_CAN_IRQHandler+0x334>
 8001ed0:	2b50      	cmp	r3, #80	; 0x50
 8001ed2:	d022      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x320>
 8001ed4:	2b50      	cmp	r3, #80	; 0x50
 8001ed6:	d82a      	bhi.n	8001f2e <HAL_CAN_IRQHandler+0x334>
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	d019      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x316>
 8001edc:	2b40      	cmp	r3, #64	; 0x40
 8001ede:	d826      	bhi.n	8001f2e <HAL_CAN_IRQHandler+0x334>
 8001ee0:	2b30      	cmp	r3, #48	; 0x30
 8001ee2:	d010      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x30c>
 8001ee4:	2b30      	cmp	r3, #48	; 0x30
 8001ee6:	d822      	bhi.n	8001f2e <HAL_CAN_IRQHandler+0x334>
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d002      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x2f8>
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d005      	beq.n	8001efc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ef0:	e01d      	b.n	8001f2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001efa:	e019      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	f043 0310 	orr.w	r3, r3, #16
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f04:	e014      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f043 0320 	orr.w	r3, r3, #32
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f0e:	e00f      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f18:	e00a      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f22:	e005      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f2c:	e000      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2204      	movs	r2, #4
 8001f46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f872 	bl	8002044 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002074:	4013      	ands	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <__NVIC_GetPriorityGrouping+0x18>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	f003 0307 	and.w	r3, r3, #7
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db0b      	blt.n	80020e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	4907      	ldr	r1, [pc, #28]	; (80020f4 <__NVIC_EnableIRQ+0x38>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2001      	movs	r0, #1
 80020de:	fa00 f202 	lsl.w	r2, r0, r2
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	db0a      	blt.n	8002122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	490c      	ldr	r1, [pc, #48]	; (8002144 <__NVIC_SetPriority+0x4c>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002120:	e00a      	b.n	8002138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <__NVIC_SetPriority+0x50>)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3b04      	subs	r3, #4
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	440b      	add	r3, r1
 8002136:	761a      	strb	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f1c3 0307 	rsb	r3, r3, #7
 8002166:	2b04      	cmp	r3, #4
 8002168:	bf28      	it	cs
 800216a:	2304      	movcs	r3, #4
 800216c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3304      	adds	r3, #4
 8002172:	2b06      	cmp	r3, #6
 8002174:	d902      	bls.n	800217c <NVIC_EncodePriority+0x30>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b03      	subs	r3, #3
 800217a:	e000      	b.n	800217e <NVIC_EncodePriority+0x32>
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43d9      	mvns	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	4313      	orrs	r3, r2
         );
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff4c 	bl	8002058 <__NVIC_SetPriorityGrouping>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021da:	f7ff ff61 	bl	80020a0 <__NVIC_GetPriorityGrouping>
 80021de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f7ff ffb1 	bl	800214c <NVIC_EncodePriority>
 80021ea:	4602      	mov	r2, r0
 80021ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff80 	bl	80020f8 <__NVIC_SetPriority>
}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff54 	bl	80020bc <__NVIC_EnableIRQ>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d008      	beq.n	8002246 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e022      	b.n	800228c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 020e 	bic.w	r2, r2, #14
 8002254:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f003 021c 	and.w	r2, r3, #28
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d005      	beq.n	80022bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e029      	b.n	8002310 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 020e 	bic.w	r2, r2, #14
 80022ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f003 021c 	and.w	r2, r3, #28
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
    }
  }
  return status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e17f      	b.n	800262c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8171 	beq.w	8002626 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d005      	beq.n	800235c <HAL_GPIO_Init+0x40>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d118      	bne.n	80023fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b03      	cmp	r3, #3
 8002406:	d017      	beq.n	8002438 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	6939      	ldr	r1, [r7, #16]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80ac 	beq.w	8002626 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_GPIO_Init+0x330>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	4a5e      	ldr	r2, [pc, #376]	; (800264c <HAL_GPIO_Init+0x330>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6613      	str	r3, [r2, #96]	; 0x60
 80024da:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_GPIO_Init+0x330>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024e6:	4a5a      	ldr	r2, [pc, #360]	; (8002650 <HAL_GPIO_Init+0x334>)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002510:	d025      	beq.n	800255e <HAL_GPIO_Init+0x242>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4f      	ldr	r2, [pc, #316]	; (8002654 <HAL_GPIO_Init+0x338>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01f      	beq.n	800255a <HAL_GPIO_Init+0x23e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4e      	ldr	r2, [pc, #312]	; (8002658 <HAL_GPIO_Init+0x33c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d019      	beq.n	8002556 <HAL_GPIO_Init+0x23a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4d      	ldr	r2, [pc, #308]	; (800265c <HAL_GPIO_Init+0x340>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_GPIO_Init+0x236>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_GPIO_Init+0x344>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00d      	beq.n	800254e <HAL_GPIO_Init+0x232>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4b      	ldr	r2, [pc, #300]	; (8002664 <HAL_GPIO_Init+0x348>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <HAL_GPIO_Init+0x22e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_GPIO_Init+0x34c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_GPIO_Init+0x22a>
 8002542:	2306      	movs	r3, #6
 8002544:	e00c      	b.n	8002560 <HAL_GPIO_Init+0x244>
 8002546:	2307      	movs	r3, #7
 8002548:	e00a      	b.n	8002560 <HAL_GPIO_Init+0x244>
 800254a:	2305      	movs	r3, #5
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x244>
 800254e:	2304      	movs	r3, #4
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x244>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x244>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x244>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x244>
 800255e:	2300      	movs	r3, #0
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002570:	4937      	ldr	r1, [pc, #220]	; (8002650 <HAL_GPIO_Init+0x334>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_GPIO_Init+0x350>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025a2:	4a32      	ldr	r2, [pc, #200]	; (800266c <HAL_GPIO_Init+0x350>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025a8:	4b30      	ldr	r3, [pc, #192]	; (800266c <HAL_GPIO_Init+0x350>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025cc:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_GPIO_Init+0x350>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_GPIO_Init+0x350>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_GPIO_Init+0x350>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_GPIO_Init+0x350>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <HAL_GPIO_Init+0x350>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f47f ae78 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40010000 	.word	0x40010000
 8002654:	48000400 	.word	0x48000400
 8002658:	48000800 	.word	0x48000800
 800265c:	48000c00 	.word	0x48000c00
 8002660:	48001000 	.word	0x48001000
 8002664:	48001400 	.word	0x48001400
 8002668:	48001800 	.word	0x48001800
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800268c:	e002      	b.n	8002694 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40007000 	.word	0x40007000

080026bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ca:	d130      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026cc:	4b23      	ldr	r3, [pc, #140]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d8:	d038      	beq.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2232      	movs	r2, #50	; 0x32
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0c9b      	lsrs	r3, r3, #18
 80026fc:	3301      	adds	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002700:	e002      	b.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3b01      	subs	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002714:	d102      	bne.n	800271c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f2      	bne.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002728:	d110      	bne.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e00f      	b.n	800274e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d007      	beq.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40007000 	.word	0x40007000
 8002760:	20000000 	.word	0x20000000
 8002764:	431bde83 	.word	0x431bde83

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e3d4      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	4ba1      	ldr	r3, [pc, #644]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002784:	4b9e      	ldr	r3, [pc, #632]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80e4 	beq.w	8002964 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4a>
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	f040 808b 	bne.w	80028c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 8087 	bne.w	80028c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b2:	4b93      	ldr	r3, [pc, #588]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e3ac      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1a      	ldr	r2, [r3, #32]
 80027ce:	4b8c      	ldr	r3, [pc, #560]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <HAL_RCC_OscConfig+0x7c>
 80027da:	4b89      	ldr	r3, [pc, #548]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e2:	e005      	b.n	80027f0 <HAL_RCC_OscConfig+0x88>
 80027e4:	4b86      	ldr	r3, [pc, #536]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d223      	bcs.n	800283c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fd73 	bl	80032e4 <RCC_SetFlashLatencyFromMSIRange>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e38d      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002808:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4977      	ldr	r1, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	4972      	ldr	r1, [pc, #456]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
 800283a:	e025      	b.n	8002888 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283c:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6f      	ldr	r2, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	496a      	ldr	r1, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285a:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	4965      	ldr	r1, [pc, #404]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fd33 	bl	80032e4 <RCC_SetFlashLatencyFromMSIRange>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e34d      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002888:	f000 fc36 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	495a      	ldr	r1, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x29c>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_RCC_OscConfig+0x2a0>)
 80028a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x2a4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe f887 	bl	80009c0 <HAL_InitTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d052      	beq.n	8002962 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	e331      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d032      	beq.n	800292e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a4c      	ldr	r2, [pc, #304]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fe44 	bl	8001560 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028dc:	f7fe fe40 	bl	8001560 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e31a      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ee:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	493b      	ldr	r1, [pc, #236]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	4936      	ldr	r1, [pc, #216]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	e01a      	b.n	8002964 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a33      	ldr	r2, [pc, #204]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800293a:	f7fe fe11 	bl	8001560 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002942:	f7fe fe0d 	bl	8001560 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e2e7      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x1da>
 8002960:	e000      	b.n	8002964 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002962:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d074      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x21a>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d10e      	bne.n	800299a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d10b      	bne.n	800299a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002982:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d064      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d160      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e2c4      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x24a>
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e01d      	b.n	80029ee <HAL_RCC_OscConfig+0x286>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ba:	d10c      	bne.n	80029d6 <HAL_RCC_OscConfig+0x26e>
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e00b      	b.n	80029ee <HAL_RCC_OscConfig+0x286>
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fdb3 	bl	8001560 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fc:	e011      	b.n	8002a22 <HAL_RCC_OscConfig+0x2ba>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	0800990c 	.word	0x0800990c
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fda6 	bl	8001560 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e280      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a22:	4baf      	ldr	r3, [pc, #700]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2a8>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fd96 	bl	8001560 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe fd92 	bl	8001560 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e26c      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4a:	4ba5      	ldr	r3, [pc, #660]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2d0>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d060      	beq.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x310>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d119      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d116      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a78:	4b99      	ldr	r3, [pc, #612]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x328>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e249      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b93      	ldr	r3, [pc, #588]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	4990      	ldr	r1, [pc, #576]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa4:	e040      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d023      	beq.n	8002af6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aae:	4b8c      	ldr	r3, [pc, #560]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a8b      	ldr	r2, [pc, #556]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fd51 	bl	8001560 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fd4d 	bl	8001560 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e227      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad4:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b7f      	ldr	r3, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	497c      	ldr	r1, [pc, #496]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e018      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	4b7a      	ldr	r3, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a79      	ldr	r2, [pc, #484]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe fd2d 	bl	8001560 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fd29 	bl	8001560 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e203      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b1c:	4b70      	ldr	r3, [pc, #448]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d03c      	beq.n	8002bae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3c:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b42:	4a67      	ldr	r2, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fd08 	bl	8001560 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe fd04 	bl	8001560 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1de      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b66:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ef      	beq.n	8002b54 <HAL_RCC_OscConfig+0x3ec>
 8002b74:	e01b      	b.n	8002bae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fceb 	bl	8001560 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fce7 	bl	8001560 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1c1      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ef      	bne.n	8002b8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80a6 	beq.w	8002d08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc0:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	4a43      	ldr	r2, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd8:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be8:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <HAL_RCC_OscConfig+0x57c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d118      	bne.n	8002c26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf4:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_RCC_OscConfig+0x57c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a3a      	ldr	r2, [pc, #232]	; (8002ce4 <HAL_RCC_OscConfig+0x57c>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fcae 	bl	8001560 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c08:	f7fe fcaa 	bl	8001560 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e184      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1a:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <HAL_RCC_OscConfig+0x57c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4d8>
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c3e:	e024      	b.n	8002c8a <HAL_RCC_OscConfig+0x522>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d110      	bne.n	8002c6a <HAL_RCC_OscConfig+0x502>
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c68:	e00f      	b.n	8002c8a <HAL_RCC_OscConfig+0x522>
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f7fe fc65 	bl	8001560 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fc61 	bl	8001560 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e139      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ed      	beq.n	8002c9a <HAL_RCC_OscConfig+0x532>
 8002cbe:	e01a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fc4e 	bl	8001560 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fc4a 	bl	8001560 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d906      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e122      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce8:	4b90      	ldr	r3, [pc, #576]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1e8      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b8b      	ldr	r3, [pc, #556]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4a8a      	ldr	r2, [pc, #552]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8108 	beq.w	8002f22 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	f040 80d0 	bne.w	8002ebc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d1c:	4b83      	ldr	r3, [pc, #524]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0203 	and.w	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d130      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d127      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d11f      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d5c:	2a07      	cmp	r2, #7
 8002d5e:	bf14      	ite	ne
 8002d60:	2201      	movne	r2, #1
 8002d62:	2200      	moveq	r2, #0
 8002d64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d113      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d06e      	beq.n	8002e70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d069      	beq.n	8002e6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d98:	4b64      	ldr	r3, [pc, #400]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002da4:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0b7      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db4:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5c      	ldr	r2, [pc, #368]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc0:	f7fe fbce 	bl	8001560 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fbca 	bl	8001560 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0a4      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	4b51      	ldr	r3, [pc, #324]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x7c8>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002df6:	3a01      	subs	r2, #1
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e00:	0212      	lsls	r2, r2, #8
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0552      	lsls	r2, r2, #21
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e14:	0852      	lsrs	r2, r2, #1
 8002e16:	3a01      	subs	r2, #1
 8002e18:	0652      	lsls	r2, r2, #25
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e20:	0912      	lsrs	r2, r2, #4
 8002e22:	0452      	lsls	r2, r2, #17
 8002e24:	430a      	orrs	r2, r1
 8002e26:	4941      	ldr	r1, [pc, #260]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e38:	4b3c      	ldr	r3, [pc, #240]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e44:	f7fe fb8c 	bl	8001560 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fb88 	bl	8001560 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e062      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6a:	e05a      	b.n	8002f22 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e059      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e70:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d152      	bne.n	8002f22 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2a      	ldr	r2, [pc, #168]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e94:	f7fe fb64 	bl	8001560 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe fb60 	bl	8001560 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e03a      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x734>
 8002eba:	e032      	b.n	8002f22 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d02d      	beq.n	8002f1e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002ec8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002ee0:	f023 0303 	bic.w	r3, r3, #3
 8002ee4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002eec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fb33 	bl	8001560 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fe fb2f 	bl	8001560 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e009      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_RCC_OscConfig+0x7c4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x796>
 8002f1c:	e001      	b.n	8002f22 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	f99d808c 	.word	0xf99d808c

08002f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0c8      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	4961      	ldr	r1, [pc, #388]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b0      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d04c      	beq.n	800301e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8c:	4b56      	ldr	r3, [pc, #344]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d121      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e09e      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d115      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e092      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fbc:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e086      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e07e      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fdc:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f023 0203 	bic.w	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	493f      	ldr	r1, [pc, #252]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fee:	f7fe fab7 	bl	8001560 <HAL_GetTick>
 8002ff2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff6:	f7fe fab3 	bl	8001560 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e066      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 020c 	and.w	r2, r3, #12
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	429a      	cmp	r2, r3
 800301c:	d1eb      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	492c      	ldr	r1, [pc, #176]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d210      	bcs.n	800306c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	4924      	ldr	r1, [pc, #144]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e036      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4918      	ldr	r1, [pc, #96]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4910      	ldr	r1, [pc, #64]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030aa:	f000 f825 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490c      	ldr	r1, [pc, #48]	; (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fc76 	bl	80009c0 <HAL_InitTick>
 80030d4:	4603      	mov	r3, r0
 80030d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80030d8:	7afb      	ldrb	r3, [r7, #11]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40021000 	.word	0x40021000
 80030ec:	0800990c 	.word	0x0800990c
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004

080030f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003110:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x34>
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d121      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d11e      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003138:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e005      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10d      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d102      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <HAL_RCC_GetSysClockFreq+0x110>)
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	e004      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d101      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800317c:	4b23      	ldr	r3, [pc, #140]	; (800320c <HAL_RCC_GetSysClockFreq+0x114>)
 800317e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b0c      	cmp	r3, #12
 8003184:	d134      	bne.n	80031f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0xa6>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d003      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0xac>
 800319c:	e005      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_RCC_GetSysClockFreq+0x110>)
 80031a0:	617b      	str	r3, [r7, #20]
      break;
 80031a2:	e005      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCC_GetSysClockFreq+0x114>)
 80031a6:	617b      	str	r3, [r7, #20]
      break;
 80031a8:	e002      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	617b      	str	r3, [r7, #20]
      break;
 80031ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	3301      	adds	r3, #1
 80031bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	fb02 f203 	mul.w	r2, r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	0e5b      	lsrs	r3, r3, #25
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	3301      	adds	r3, #1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031f0:	69bb      	ldr	r3, [r7, #24]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	08009924 	.word	0x08009924
 8003208:	00f42400 	.word	0x00f42400
 800320c:	007a1200 	.word	0x007a1200

08003210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000000 	.word	0x20000000

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800322c:	f7ff fff0 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4904      	ldr	r1, [pc, #16]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	0800991c 	.word	0x0800991c

08003254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003258:	f7ff ffda 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0adb      	lsrs	r3, r3, #11
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <HAL_RCC_GetPCLK2Freq+0x28>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	0800991c 	.word	0x0800991c

08003280 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	220f      	movs	r2, #15
 800328e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_RCC_GetClockConfig+0x5c>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_RCC_GetClockConfig+0x5c>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_RCC_GetClockConfig+0x5c>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_GetClockConfig+0x5c>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_RCC_GetClockConfig+0x60>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0207 	and.w	r2, r3, #7
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40022000 	.word	0x40022000

080032e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032f0:	4b2a      	ldr	r3, [pc, #168]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032fc:	f7ff f9d0 	bl	80026a0 <HAL_PWREx_GetVoltageRange>
 8003300:	6178      	str	r0, [r7, #20]
 8003302:	e014      	b.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	4a24      	ldr	r2, [pc, #144]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6593      	str	r3, [r2, #88]	; 0x58
 8003310:	4b22      	ldr	r3, [pc, #136]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800331c:	f7ff f9c0 	bl	80026a0 <HAL_PWREx_GetVoltageRange>
 8003320:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	4a1d      	ldr	r2, [pc, #116]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003334:	d10b      	bne.n	800334e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d919      	bls.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2ba0      	cmp	r3, #160	; 0xa0
 8003340:	d902      	bls.n	8003348 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003342:	2302      	movs	r3, #2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	e013      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003348:	2301      	movs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e010      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b80      	cmp	r3, #128	; 0x80
 8003352:	d902      	bls.n	800335a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003354:	2303      	movs	r3, #3
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	e00a      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d102      	bne.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003360:	2302      	movs	r3, #2
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e004      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b70      	cmp	r3, #112	; 0x70
 800336a:	d101      	bne.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800336c:	2301      	movs	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 0207 	bic.w	r2, r3, #7
 8003378:	4909      	ldr	r1, [pc, #36]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003380:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	40022000 	.word	0x40022000

080033a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033ac:	2300      	movs	r3, #0
 80033ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b0:	2300      	movs	r3, #0
 80033b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d041      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033c8:	d02a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033ce:	d824      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033da:	d81e      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e4:	d010      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033e6:	e018      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033e8:	4b86      	ldr	r3, [pc, #536]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a85      	ldr	r2, [pc, #532]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f4:	e015      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fabb 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003406:	e00c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3320      	adds	r3, #32
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fba6 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	74fb      	strb	r3, [r7, #19]
      break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003428:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003436:	4973      	ldr	r1, [pc, #460]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800343e:	e001      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d041      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003458:	d02a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800345a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800345e:	d824      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003464:	d008      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800346a:	d81e      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003474:	d010      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003476:	e018      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003478:	4b62      	ldr	r3, [pc, #392]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a61      	ldr	r2, [pc, #388]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003482:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003484:	e015      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fa73 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003496:	e00c      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3320      	adds	r3, #32
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fb5e 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	74fb      	strb	r3, [r7, #19]
      break;
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034b8:	4b52      	ldr	r3, [pc, #328]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c6:	494f      	ldr	r1, [pc, #316]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034ce:	e001      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a0 	beq.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	4a40      	ldr	r2, [pc, #256]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	; 0x58
 8003508:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003518:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3a      	ldr	r2, [pc, #232]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003524:	f7fe f81c 	bl	8001560 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800352a:	e009      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352c:	f7fe f818 	bl	8001560 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	74fb      	strb	r3, [r7, #19]
        break;
 800353e:	e005      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d15c      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01f      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d019      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800359c:	4a19      	ldr	r2, [pc, #100]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fd ffd7 	bl	8001560 <HAL_GetTick>
 80035b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b4:	e00b      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fd ffd3 	bl	8001560 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d902      	bls.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	74fb      	strb	r3, [r7, #19]
            break;
 80035cc:	e006      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ec      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f2:	4904      	ldr	r1, [pc, #16]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035fa:	e009      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003610:	7c7b      	ldrb	r3, [r7, #17]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b9e      	ldr	r3, [pc, #632]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	4a9d      	ldr	r2, [pc, #628]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800362e:	4b98      	ldr	r3, [pc, #608]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f023 0203 	bic.w	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	4994      	ldr	r1, [pc, #592]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003650:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 020c 	bic.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	498c      	ldr	r1, [pc, #560]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003672:	4b87      	ldr	r3, [pc, #540]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	4983      	ldr	r1, [pc, #524]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003694:	4b7e      	ldr	r3, [pc, #504]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	497b      	ldr	r1, [pc, #492]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036b6:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c4:	4972      	ldr	r1, [pc, #456]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036d8:	4b6d      	ldr	r3, [pc, #436]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	496a      	ldr	r1, [pc, #424]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036fa:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	4961      	ldr	r1, [pc, #388]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800371c:	4b5c      	ldr	r3, [pc, #368]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	4959      	ldr	r1, [pc, #356]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800373e:	4b54      	ldr	r3, [pc, #336]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374c:	4950      	ldr	r1, [pc, #320]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003760:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	4948      	ldr	r1, [pc, #288]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	493f      	ldr	r1, [pc, #252]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d028      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a4:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b2:	4937      	ldr	r1, [pc, #220]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c4:	4b32      	ldr	r3, [pc, #200]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a31      	ldr	r2, [pc, #196]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ce:	60d3      	str	r3, [r2, #12]
 80037d0:	e011      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037da:	d10c      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	2101      	movs	r1, #1
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f8c8 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d028      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	491f      	ldr	r1, [pc, #124]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003820:	d106      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382c:	60d3      	str	r3, [r2, #12]
 800382e:	e011      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003838:	d10c      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f000 f899 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386e:	4908      	ldr	r1, [pc, #32]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800387e:	d109      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a02      	ldr	r2, [pc, #8]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388a:	60d3      	str	r3, [r2, #12]
 800388c:	e014      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f867 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02f      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c4:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d2:	4928      	ldr	r1, [pc, #160]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e2:	d10d      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f844 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d014      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	74bb      	strb	r3, [r7, #18]
 80038fe:	e011      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3320      	adds	r3, #32
 800390e:	2102      	movs	r1, #2
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f925 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393e:	490d      	ldr	r1, [pc, #52]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003962:	4904      	ldr	r1, [pc, #16]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800396a:	7cbb      	ldrb	r3, [r7, #18]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000

08003978 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003986:	4b75      	ldr	r3, [pc, #468]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003992:	4b72      	ldr	r3, [pc, #456]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0203 	and.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d10d      	bne.n	80039be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
       ||
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039aa:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d047      	beq.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e044      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d018      	beq.n	80039fe <RCCEx_PLLSAI1_Config+0x86>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d825      	bhi.n	8003a1c <RCCEx_PLLSAI1_Config+0xa4>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <RCCEx_PLLSAI1_Config+0x62>
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d009      	beq.n	80039ec <RCCEx_PLLSAI1_Config+0x74>
 80039d8:	e020      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039da:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ea:	e01a      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ec:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fc:	e013      	b.n	8003a26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039fe:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0a:	4b54      	ldr	r3, [pc, #336]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1a:	e006      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e004      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	430b      	orrs	r3, r1
 8003a48:	4944      	ldr	r1, [pc, #272]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d17d      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd fd7e 	bl	8001560 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a68:	f7fd fd7a 	bl	8001560 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a7c:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ef      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d160      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a94:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	0211      	lsls	r1, r2, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	0912      	lsrs	r2, r2, #4
 8003aac:	0452      	lsls	r2, r2, #17
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	492a      	ldr	r1, [pc, #168]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
 8003ab6:	e027      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d112      	bne.n	8003ae4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ac6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	0211      	lsls	r1, r2, #8
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6912      	ldr	r2, [r2, #16]
 8003ad4:	0852      	lsrs	r2, r2, #1
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0552      	lsls	r2, r2, #21
 8003ada:	430a      	orrs	r2, r1
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	610b      	str	r3, [r1, #16]
 8003ae2:	e011      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6952      	ldr	r2, [r2, #20]
 8003afa:	0852      	lsrs	r2, r2, #1
 8003afc:	3a01      	subs	r2, #1
 8003afe:	0652      	lsls	r2, r2, #25
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4916      	ldr	r1, [pc, #88]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fd24 	bl	8001560 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b1c:	f7fd fd20 	bl	8001560 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d018      	beq.n	8003bac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0203 	and.w	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d10d      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b92:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d047      	beq.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e044      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d018      	beq.n	8003be6 <RCCEx_PLLSAI2_Config+0x86>
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d825      	bhi.n	8003c04 <RCCEx_PLLSAI2_Config+0xa4>
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d002      	beq.n	8003bc2 <RCCEx_PLLSAI2_Config+0x62>
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d009      	beq.n	8003bd4 <RCCEx_PLLSAI2_Config+0x74>
 8003bc0:	e020      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bc2:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11d      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd2:	e01a      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d116      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be4:	e013      	b.n	8003c0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003be6:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bf2:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c02:	e006      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e004      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10d      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	4939      	ldr	r1, [pc, #228]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d167      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a35      	ldr	r2, [pc, #212]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fd fc8a 	bl	8001560 <HAL_GetTick>
 8003c4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c4e:	e009      	b.n	8003c64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c50:	f7fd fc86 	bl	8001560 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d902      	bls.n	8003c64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	73fb      	strb	r3, [r7, #15]
        break;
 8003c62:	e005      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ef      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d14a      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d111      	bne.n	8003ca0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6892      	ldr	r2, [r2, #8]
 8003c8c:	0211      	lsls	r1, r2, #8
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	0912      	lsrs	r2, r2, #4
 8003c94:	0452      	lsls	r2, r2, #17
 8003c96:	430a      	orrs	r2, r1
 8003c98:	491f      	ldr	r1, [pc, #124]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	614b      	str	r3, [r1, #20]
 8003c9e:	e011      	b.n	8003cc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6912      	ldr	r2, [r2, #16]
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	4916      	ldr	r1, [pc, #88]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fc46 	bl	8001560 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cd8:	f7fd fc42 	bl	8001560 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4904      	ldr	r1, [pc, #16]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e049      	b.n	8003dc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd f818 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fc80 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e04f      	b.n	8003e84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <HAL_TIM_Base_Start_IT+0x76>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0e:	d018      	beq.n	8003e42 <HAL_TIM_Base_Start_IT+0x76>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_TIM_Base_Start_IT+0x76>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_TIM_Base_Start_IT+0x76>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_TIM_Base_Start_IT+0x76>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_TIM_Base_Start_IT+0x76>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d115      	bne.n	8003e6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	d015      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0xb4>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5a:	d011      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	e008      	b.n	8003e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e000      	b.n	8003e82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40000c00 	.word	0x40000c00
 8003ea0:	40013400 	.word	0x40013400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	00010007 	.word	0x00010007

08003eac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e049      	b.n	8003f52 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc ff06 	bl	8000ce4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 fbb8 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e041      	b.n	8003ff2 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f839 	bl	8003ffa <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 fb60 	bl	8004660 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0208 	bic.w	r2, r2, #8
 8003fae:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6819      	ldr	r1, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d122      	bne.n	800406a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d11b      	bne.n	800406a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f06f 0202 	mvn.w	r2, #2
 800403a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fc fa93 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 8004056:	e005      	b.n	8004064 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fae3 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 faea 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d122      	bne.n	80040be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b04      	cmp	r3, #4
 8004084:	d11b      	bne.n	80040be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0204 	mvn.w	r2, #4
 800408e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fc fa69 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 80040aa:	e005      	b.n	80040b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fab9 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fac0 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d122      	bne.n	8004112 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d11b      	bne.n	8004112 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f06f 0208 	mvn.w	r2, #8
 80040e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2204      	movs	r2, #4
 80040e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fc fa3f 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 80040fe:	e005      	b.n	800410c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fa8f 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa96 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b10      	cmp	r3, #16
 800411e:	d122      	bne.n	8004166 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b10      	cmp	r3, #16
 800412c:	d11b      	bne.n	8004166 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f06f 0210 	mvn.w	r2, #16
 8004136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2208      	movs	r2, #8
 800413c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fc fa15 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 8004152:	e005      	b.n	8004160 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fa65 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fa6c 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10e      	bne.n	8004192 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f06f 0201 	mvn.w	r2, #1
 800418a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fc fbd7 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d10e      	bne.n	80041be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b80      	cmp	r3, #128	; 0x80
 80041ac:	d107      	bne.n	80041be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fdcf 	bl	8004d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fdc2 	bl	8004d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa1a 	bl	800464c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b20      	cmp	r3, #32
 8004224:	d10e      	bne.n	8004244 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b20      	cmp	r3, #32
 8004232:	d107      	bne.n	8004244 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0220 	mvn.w	r2, #32
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fd82 	bl	8004d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004266:	2302      	movs	r3, #2
 8004268:	e088      	b.n	800437c <HAL_TIM_IC_ConfigChannel+0x130>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f000 fb18 	bl	80048bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 020c 	bic.w	r2, r2, #12
 800429a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6999      	ldr	r1, [r3, #24]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	619a      	str	r2, [r3, #24]
 80042ae:	e060      	b.n	8004372 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d11c      	bne.n	80042f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6819      	ldr	r1, [r3, #0]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f000 fb96 	bl	80049f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6999      	ldr	r1, [r3, #24]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	021a      	lsls	r2, r3, #8
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	619a      	str	r2, [r3, #24]
 80042ee:	e040      	b.n	8004372 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d11b      	bne.n	800432e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f000 fbe3 	bl	8004ad0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 020c 	bic.w	r2, r2, #12
 8004318:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	61da      	str	r2, [r3, #28]
 800432c:	e021      	b.n	8004372 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b0c      	cmp	r3, #12
 8004332:	d11c      	bne.n	800436e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6819      	ldr	r1, [r3, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f000 fc00 	bl	8004b48 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004356:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69d9      	ldr	r1, [r3, #28]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	61da      	str	r2, [r3, #28]
 800436c:	e001      	b.n	8004372 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c>
 800439c:	2302      	movs	r3, #2
 800439e:	e0b6      	b.n	800450e <HAL_TIM_ConfigClockSource+0x18a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043dc:	d03e      	beq.n	800445c <HAL_TIM_ConfigClockSource+0xd8>
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e2:	f200 8087 	bhi.w	80044f4 <HAL_TIM_ConfigClockSource+0x170>
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	f000 8086 	beq.w	80044fa <HAL_TIM_ConfigClockSource+0x176>
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f2:	d87f      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x170>
 80043f4:	2b70      	cmp	r3, #112	; 0x70
 80043f6:	d01a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xaa>
 80043f8:	2b70      	cmp	r3, #112	; 0x70
 80043fa:	d87b      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x170>
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d050      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0x11e>
 8004400:	2b60      	cmp	r3, #96	; 0x60
 8004402:	d877      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x170>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d03c      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0xfe>
 8004408:	2b50      	cmp	r3, #80	; 0x50
 800440a:	d873      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x170>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d058      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x13e>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d86f      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x170>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d064      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004418:	2b30      	cmp	r3, #48	; 0x30
 800441a:	d86b      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x170>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d060      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004420:	2b20      	cmp	r3, #32
 8004422:	d867      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x170>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d05c      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004428:	2b10      	cmp	r3, #16
 800442a:	d05a      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x15e>
 800442c:	e062      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6899      	ldr	r1, [r3, #8]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f000 fbdb 	bl	8004bf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	609a      	str	r2, [r3, #8]
      break;
 800445a:	e04f      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6899      	ldr	r1, [r3, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f000 fbc4 	bl	8004bf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447e:	609a      	str	r2, [r3, #8]
      break;
 8004480:	e03c      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6859      	ldr	r1, [r3, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	461a      	mov	r2, r3
 8004490:	f000 fa82 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2150      	movs	r1, #80	; 0x50
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fb91 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 80044a0:	e02c      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 fade 	bl	8004a70 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2160      	movs	r1, #96	; 0x60
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fb81 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 80044c0:	e01c      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 fa62 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2140      	movs	r1, #64	; 0x40
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fb71 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 80044e0:	e00c      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f000 fb68 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 80044f2:	e003      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      break;
 80044f8:	e000      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_TIM_SlaveConfigSynchro+0x18>
 800452a:	2302      	movs	r3, #2
 800452c:	e031      	b.n	8004592 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f927 	bl	8004794 <TIM_SlaveTimer_SetConfig>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e018      	b.n	8004592 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800457e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	d831      	bhi.n	8004614 <HAL_TIM_ReadCapturedValue+0x78>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	08004615 	.word	0x08004615
 80045c0:	08004615 	.word	0x08004615
 80045c4:	08004615 	.word	0x08004615
 80045c8:	080045f7 	.word	0x080045f7
 80045cc:	08004615 	.word	0x08004615
 80045d0:	08004615 	.word	0x08004615
 80045d4:	08004615 	.word	0x08004615
 80045d8:	08004601 	.word	0x08004601
 80045dc:	08004615 	.word	0x08004615
 80045e0:	08004615 	.word	0x08004615
 80045e4:	08004615 	.word	0x08004615
 80045e8:	0800460b 	.word	0x0800460b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	60fb      	str	r3, [r7, #12]

      break;
 80045f4:	e00f      	b.n	8004616 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	60fb      	str	r3, [r7, #12]

      break;
 80045fe:	e00a      	b.n	8004616 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	60fb      	str	r3, [r7, #12]

      break;
 8004608:	e005      	b.n	8004616 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	60fb      	str	r3, [r7, #12]

      break;
 8004612:	e000      	b.n	8004616 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004614:	bf00      	nop
  }

  return tmpreg;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a40      	ldr	r2, [pc, #256]	; (8004774 <TIM_Base_SetConfig+0x114>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467e:	d00f      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <TIM_Base_SetConfig+0x118>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00b      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a3c      	ldr	r2, [pc, #240]	; (800477c <TIM_Base_SetConfig+0x11c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3b      	ldr	r2, [pc, #236]	; (8004780 <TIM_Base_SetConfig+0x120>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3a      	ldr	r2, [pc, #232]	; (8004784 <TIM_Base_SetConfig+0x124>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2f      	ldr	r2, [pc, #188]	; (8004774 <TIM_Base_SetConfig+0x114>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01f      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d01b      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2c      	ldr	r2, [pc, #176]	; (8004778 <TIM_Base_SetConfig+0x118>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d017      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2b      	ldr	r2, [pc, #172]	; (800477c <TIM_Base_SetConfig+0x11c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <TIM_Base_SetConfig+0x120>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00f      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <TIM_Base_SetConfig+0x124>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a28      	ldr	r2, [pc, #160]	; (8004788 <TIM_Base_SetConfig+0x128>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a27      	ldr	r2, [pc, #156]	; (800478c <TIM_Base_SetConfig+0x12c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a26      	ldr	r2, [pc, #152]	; (8004790 <TIM_Base_SetConfig+0x130>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a10      	ldr	r2, [pc, #64]	; (8004774 <TIM_Base_SetConfig+0x114>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00f      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <TIM_Base_SetConfig+0x124>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <TIM_Base_SetConfig+0x128>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a10      	ldr	r2, [pc, #64]	; (800478c <TIM_Base_SetConfig+0x12c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <TIM_Base_SetConfig+0x130>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d103      	bne.n	8004760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	615a      	str	r2, [r3, #20]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40014000 	.word	0x40014000
 800478c:	40014400 	.word	0x40014400
 8004790:	40014800 	.word	0x40014800

08004794 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b70      	cmp	r3, #112	; 0x70
 80047e0:	d01a      	beq.n	8004818 <TIM_SlaveTimer_SetConfig+0x84>
 80047e2:	2b70      	cmp	r3, #112	; 0x70
 80047e4:	d860      	bhi.n	80048a8 <TIM_SlaveTimer_SetConfig+0x114>
 80047e6:	2b60      	cmp	r3, #96	; 0x60
 80047e8:	d054      	beq.n	8004894 <TIM_SlaveTimer_SetConfig+0x100>
 80047ea:	2b60      	cmp	r3, #96	; 0x60
 80047ec:	d85c      	bhi.n	80048a8 <TIM_SlaveTimer_SetConfig+0x114>
 80047ee:	2b50      	cmp	r3, #80	; 0x50
 80047f0:	d046      	beq.n	8004880 <TIM_SlaveTimer_SetConfig+0xec>
 80047f2:	2b50      	cmp	r3, #80	; 0x50
 80047f4:	d858      	bhi.n	80048a8 <TIM_SlaveTimer_SetConfig+0x114>
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d019      	beq.n	800482e <TIM_SlaveTimer_SetConfig+0x9a>
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d854      	bhi.n	80048a8 <TIM_SlaveTimer_SetConfig+0x114>
 80047fe:	2b30      	cmp	r3, #48	; 0x30
 8004800:	d055      	beq.n	80048ae <TIM_SlaveTimer_SetConfig+0x11a>
 8004802:	2b30      	cmp	r3, #48	; 0x30
 8004804:	d850      	bhi.n	80048a8 <TIM_SlaveTimer_SetConfig+0x114>
 8004806:	2b20      	cmp	r3, #32
 8004808:	d051      	beq.n	80048ae <TIM_SlaveTimer_SetConfig+0x11a>
 800480a:	2b20      	cmp	r3, #32
 800480c:	d84c      	bhi.n	80048a8 <TIM_SlaveTimer_SetConfig+0x114>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d04d      	beq.n	80048ae <TIM_SlaveTimer_SetConfig+0x11a>
 8004812:	2b10      	cmp	r3, #16
 8004814:	d04b      	beq.n	80048ae <TIM_SlaveTimer_SetConfig+0x11a>
 8004816:	e047      	b.n	80048a8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68d9      	ldr	r1, [r3, #12]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f000 f9e6 	bl	8004bf8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800482c:	e040      	b.n	80048b0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d101      	bne.n	800483a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e03b      	b.n	80048b2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004860:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
      break;
 800487e:	e017      	b.n	80048b0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6899      	ldr	r1, [r3, #8]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	461a      	mov	r2, r3
 800488e:	f000 f883 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004892:	e00d      	b.n	80048b0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6899      	ldr	r1, [r3, #8]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f000 f8e5 	bl	8004a70 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80048a6:	e003      	b.n	80048b0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
      break;
 80048ac:	e000      	b.n	80048b0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80048ae:	bf00      	nop
  }

  return status;
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f023 0201 	bic.w	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a26      	ldr	r2, [pc, #152]	; (8004980 <TIM_TI1_SetConfig+0xc4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d017      	beq.n	800491a <TIM_TI1_SetConfig+0x5e>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d013      	beq.n	800491a <TIM_TI1_SetConfig+0x5e>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a23      	ldr	r2, [pc, #140]	; (8004984 <TIM_TI1_SetConfig+0xc8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <TIM_TI1_SetConfig+0x5e>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a22      	ldr	r2, [pc, #136]	; (8004988 <TIM_TI1_SetConfig+0xcc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00b      	beq.n	800491a <TIM_TI1_SetConfig+0x5e>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4a21      	ldr	r2, [pc, #132]	; (800498c <TIM_TI1_SetConfig+0xd0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_TI1_SetConfig+0x5e>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a20      	ldr	r2, [pc, #128]	; (8004990 <TIM_TI1_SetConfig+0xd4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_TI1_SetConfig+0x5e>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <TIM_TI1_SetConfig+0xd8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d101      	bne.n	800491e <TIM_TI1_SetConfig+0x62>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <TIM_TI1_SetConfig+0x64>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e003      	b.n	800493e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	b2db      	uxtb	r3, r3
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f003 030a 	and.w	r3, r3, #10
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40012c00 	.word	0x40012c00
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	40000c00 	.word	0x40000c00
 8004990:	40013400 	.word	0x40013400
 8004994:	40014000 	.word	0x40014000

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b087      	sub	sp, #28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f023 0210 	bic.w	r2, r3, #16
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f023 0210 	bic.w	r2, r3, #16
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	031b      	lsls	r3, r3, #12
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 0303 	bic.w	r3, r3, #3
 8004afc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	031b      	lsls	r3, r3, #12
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	031b      	lsls	r3, r3, #12
 8004ba0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f043 0307 	orr.w	r3, r3, #7
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	609a      	str	r2, [r3, #8]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e068      	b.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2e      	ldr	r2, [pc, #184]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2d      	ldr	r2, [pc, #180]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d108      	bne.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01d      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc2:	d018      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a1a      	ldr	r2, [pc, #104]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d009      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a14      	ldr	r2, [pc, #80]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10c      	bne.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40013400 	.word	0x40013400
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40014000 	.word	0x40014000

08004d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e040      	b.n	8004e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc fa70 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2224      	movs	r2, #36	; 0x24
 8004db0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fbe8 	bl	8005598 <UART_SetConfig>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fe66 	bl	8005aac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 feed 	bl	8005bf0 <UART_CheckIdleState>
 8004e16:	4603      	mov	r3, r0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b08b      	sub	sp, #44	; 0x2c
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d156      	bne.n	8004ee4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_UART_Transmit_IT+0x22>
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e04f      	b.n	8004ee6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_UART_Transmit_IT+0x34>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e048      	b.n	8004ee6 <HAL_UART_Transmit_IT+0xc6>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	88fa      	ldrh	r2, [r7, #6]
 8004e6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2221      	movs	r2, #33	; 0x21
 8004e84:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d107      	bne.n	8004ea0 <HAL_UART_Transmit_IT+0x80>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <HAL_UART_Transmit_IT+0xd4>)
 8004e9c:	669a      	str	r2, [r3, #104]	; 0x68
 8004e9e:	e002      	b.n	8004ea6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <HAL_UART_Transmit_IT+0xd8>)
 8004ea4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	613b      	str	r3, [r7, #16]
   return(result);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	69f9      	ldr	r1, [r7, #28]
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e6      	bne.n	8004eae <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	372c      	adds	r7, #44	; 0x2c
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	0800614b 	.word	0x0800614b
 8004ef8:	08006093 	.word	0x08006093

08004efc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d142      	bne.n	8004f98 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_UART_Receive_IT+0x22>
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e03b      	b.n	8004f9a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_UART_Receive_IT+0x34>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e034      	b.n	8004f9a <HAL_UART_Receive_IT+0x9e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_UART_Receive_IT+0xa8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d01f      	beq.n	8004f88 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	613b      	str	r3, [r7, #16]
   return(result);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	69f9      	ldr	r1, [r7, #28]
 8004f7a:	6a3a      	ldr	r2, [r7, #32]
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e6      	bne.n	8004f56 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 ff3c 	bl	8005e0c <UART_Start_Receive_IT>
 8004f94:	4603      	mov	r3, r0
 8004f96:	e000      	b.n	8004f9a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
  }
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3728      	adds	r7, #40	; 0x28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40008000 	.word	0x40008000

08004fa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b0ba      	sub	sp, #232	; 0xe8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004fd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d115      	bne.n	8005010 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00f      	beq.n	8005010 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 82a6 	beq.w	8005552 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	4798      	blx	r3
      }
      return;
 800500e:	e2a0      	b.n	8005552 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8117 	beq.w	8005248 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800501a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005026:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800502a:	4b85      	ldr	r3, [pc, #532]	; (8005240 <HAL_UART_IRQHandler+0x298>)
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 810a 	beq.w	8005248 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <HAL_UART_IRQHandler+0xbc>
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2201      	movs	r2, #1
 8005052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505a:	f043 0201 	orr.w	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d011      	beq.n	8005094 <HAL_UART_IRQHandler+0xec>
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2202      	movs	r2, #2
 8005082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508a:	f043 0204 	orr.w	r2, r3, #4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d011      	beq.n	80050c4 <HAL_UART_IRQHandler+0x11c>
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2204      	movs	r2, #4
 80050b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ba:	f043 0202 	orr.w	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d017      	beq.n	8005100 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d105      	bne.n	80050e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2208      	movs	r2, #8
 80050ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f6:	f043 0208 	orr.w	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005108:	2b00      	cmp	r3, #0
 800510a:	d012      	beq.n	8005132 <HAL_UART_IRQHandler+0x18a>
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00c      	beq.n	8005132 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005120:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 820c 	beq.w	8005556 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800514a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800516c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d005      	beq.n	800518a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800517e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005182:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005186:	2b00      	cmp	r3, #0
 8005188:	d04f      	beq.n	800522a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 ff08 	bl	8005fa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d141      	bne.n	8005222 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1d9      	bne.n	800519e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d013      	beq.n	800521a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	4a13      	ldr	r2, [pc, #76]	; (8005244 <HAL_UART_IRQHandler+0x29c>)
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fd f84a 	bl	8002298 <HAL_DMA_Abort_IT>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d017      	beq.n	800523a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005214:	4610      	mov	r0, r2
 8005216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	e00f      	b.n	800523a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9a6 	bl	800556c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005220:	e00b      	b.n	800523a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f9a2 	bl	800556c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	e007      	b.n	800523a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f99e 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005238:	e18d      	b.n	8005556 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523a:	bf00      	nop
    return;
 800523c:	e18b      	b.n	8005556 <HAL_UART_IRQHandler+0x5ae>
 800523e:	bf00      	nop
 8005240:	04000120 	.word	0x04000120
 8005244:	08006067 	.word	0x08006067

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524c:	2b01      	cmp	r3, #1
 800524e:	f040 8146 	bne.w	80054de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 813f 	beq.w	80054de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8138 	beq.w	80054de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2210      	movs	r2, #16
 8005274:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	f040 80b4 	bne.w	80053ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005292:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 815f 	beq.w	800555a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052a6:	429a      	cmp	r2, r3
 80052a8:	f080 8157 	bcs.w	800555a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 8085 	bne.w	80053d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800530a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1da      	bne.n	80052c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005336:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800533a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800533e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e1      	bne.n	8005312 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3308      	adds	r3, #8
 8005354:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800535e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005374:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e3      	bne.n	800534e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a2:	f023 0310 	bic.w	r3, r3, #16
 80053a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80053b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e4      	bne.n	8005392 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fc ff25 	bl	800221c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8ca 	bl	8005580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053ec:	e0b5      	b.n	800555a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80a7 	beq.w	800555e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80a2 	beq.w	800555e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800542e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800543c:	647b      	str	r3, [r7, #68]	; 0x44
 800543e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800544a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e4      	bne.n	800541a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	623b      	str	r3, [r7, #32]
   return(result);
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3308      	adds	r3, #8
 8005470:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005474:	633a      	str	r2, [r7, #48]	; 0x30
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800547a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e3      	bne.n	8005450 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0310 	bic.w	r3, r3, #16
 80054ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	69b9      	ldr	r1, [r7, #24]
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e4      	bne.n	800549a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f852 	bl	8005580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054dc:	e03f      	b.n	800555e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00e      	beq.n	8005508 <HAL_UART_IRQHandler+0x560>
 80054ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 f80c 	bl	800651e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005506:	e02d      	b.n	8005564 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00e      	beq.n	8005532 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01c      	beq.n	8005562 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	4798      	blx	r3
    }
    return;
 8005530:	e017      	b.n	8005562 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d012      	beq.n	8005564 <HAL_UART_IRQHandler+0x5bc>
 800553e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00c      	beq.n	8005564 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fe5d 	bl	800620a <UART_EndTransmit_IT>
    return;
 8005550:	e008      	b.n	8005564 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005552:	bf00      	nop
 8005554:	e006      	b.n	8005564 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005556:	bf00      	nop
 8005558:	e004      	b.n	8005564 <HAL_UART_IRQHandler+0x5bc>
      return;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <HAL_UART_IRQHandler+0x5bc>
      return;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005562:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005564:	37e8      	adds	r7, #232	; 0xe8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop

0800556c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005598:	b5b0      	push	{r4, r5, r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4bad      	ldr	r3, [pc, #692]	; (8005878 <UART_SetConfig+0x2e0>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4aa2      	ldr	r2, [pc, #648]	; (800587c <UART_SetConfig+0x2e4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a99      	ldr	r2, [pc, #612]	; (8005880 <UART_SetConfig+0x2e8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d121      	bne.n	8005662 <UART_SetConfig+0xca>
 800561e:	4b99      	ldr	r3, [pc, #612]	; (8005884 <UART_SetConfig+0x2ec>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	2b03      	cmp	r3, #3
 800562a:	d817      	bhi.n	800565c <UART_SetConfig+0xc4>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0x9c>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005645 	.word	0x08005645
 8005638:	08005651 	.word	0x08005651
 800563c:	0800564b 	.word	0x0800564b
 8005640:	08005657 	.word	0x08005657
 8005644:	2301      	movs	r3, #1
 8005646:	76fb      	strb	r3, [r7, #27]
 8005648:	e0e7      	b.n	800581a <UART_SetConfig+0x282>
 800564a:	2302      	movs	r3, #2
 800564c:	76fb      	strb	r3, [r7, #27]
 800564e:	e0e4      	b.n	800581a <UART_SetConfig+0x282>
 8005650:	2304      	movs	r3, #4
 8005652:	76fb      	strb	r3, [r7, #27]
 8005654:	e0e1      	b.n	800581a <UART_SetConfig+0x282>
 8005656:	2308      	movs	r3, #8
 8005658:	76fb      	strb	r3, [r7, #27]
 800565a:	e0de      	b.n	800581a <UART_SetConfig+0x282>
 800565c:	2310      	movs	r3, #16
 800565e:	76fb      	strb	r3, [r7, #27]
 8005660:	e0db      	b.n	800581a <UART_SetConfig+0x282>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a88      	ldr	r2, [pc, #544]	; (8005888 <UART_SetConfig+0x2f0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d132      	bne.n	80056d2 <UART_SetConfig+0x13a>
 800566c:	4b85      	ldr	r3, [pc, #532]	; (8005884 <UART_SetConfig+0x2ec>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b0c      	cmp	r3, #12
 8005678:	d828      	bhi.n	80056cc <UART_SetConfig+0x134>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0xe8>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	080056b5 	.word	0x080056b5
 8005684:	080056cd 	.word	0x080056cd
 8005688:	080056cd 	.word	0x080056cd
 800568c:	080056cd 	.word	0x080056cd
 8005690:	080056c1 	.word	0x080056c1
 8005694:	080056cd 	.word	0x080056cd
 8005698:	080056cd 	.word	0x080056cd
 800569c:	080056cd 	.word	0x080056cd
 80056a0:	080056bb 	.word	0x080056bb
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056cd 	.word	0x080056cd
 80056b0:	080056c7 	.word	0x080056c7
 80056b4:	2300      	movs	r3, #0
 80056b6:	76fb      	strb	r3, [r7, #27]
 80056b8:	e0af      	b.n	800581a <UART_SetConfig+0x282>
 80056ba:	2302      	movs	r3, #2
 80056bc:	76fb      	strb	r3, [r7, #27]
 80056be:	e0ac      	b.n	800581a <UART_SetConfig+0x282>
 80056c0:	2304      	movs	r3, #4
 80056c2:	76fb      	strb	r3, [r7, #27]
 80056c4:	e0a9      	b.n	800581a <UART_SetConfig+0x282>
 80056c6:	2308      	movs	r3, #8
 80056c8:	76fb      	strb	r3, [r7, #27]
 80056ca:	e0a6      	b.n	800581a <UART_SetConfig+0x282>
 80056cc:	2310      	movs	r3, #16
 80056ce:	76fb      	strb	r3, [r7, #27]
 80056d0:	e0a3      	b.n	800581a <UART_SetConfig+0x282>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a6d      	ldr	r2, [pc, #436]	; (800588c <UART_SetConfig+0x2f4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d120      	bne.n	800571e <UART_SetConfig+0x186>
 80056dc:	4b69      	ldr	r3, [pc, #420]	; (8005884 <UART_SetConfig+0x2ec>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056e6:	2b30      	cmp	r3, #48	; 0x30
 80056e8:	d013      	beq.n	8005712 <UART_SetConfig+0x17a>
 80056ea:	2b30      	cmp	r3, #48	; 0x30
 80056ec:	d814      	bhi.n	8005718 <UART_SetConfig+0x180>
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d009      	beq.n	8005706 <UART_SetConfig+0x16e>
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d810      	bhi.n	8005718 <UART_SetConfig+0x180>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <UART_SetConfig+0x168>
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d006      	beq.n	800570c <UART_SetConfig+0x174>
 80056fe:	e00b      	b.n	8005718 <UART_SetConfig+0x180>
 8005700:	2300      	movs	r3, #0
 8005702:	76fb      	strb	r3, [r7, #27]
 8005704:	e089      	b.n	800581a <UART_SetConfig+0x282>
 8005706:	2302      	movs	r3, #2
 8005708:	76fb      	strb	r3, [r7, #27]
 800570a:	e086      	b.n	800581a <UART_SetConfig+0x282>
 800570c:	2304      	movs	r3, #4
 800570e:	76fb      	strb	r3, [r7, #27]
 8005710:	e083      	b.n	800581a <UART_SetConfig+0x282>
 8005712:	2308      	movs	r3, #8
 8005714:	76fb      	strb	r3, [r7, #27]
 8005716:	e080      	b.n	800581a <UART_SetConfig+0x282>
 8005718:	2310      	movs	r3, #16
 800571a:	76fb      	strb	r3, [r7, #27]
 800571c:	e07d      	b.n	800581a <UART_SetConfig+0x282>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a5b      	ldr	r2, [pc, #364]	; (8005890 <UART_SetConfig+0x2f8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d120      	bne.n	800576a <UART_SetConfig+0x1d2>
 8005728:	4b56      	ldr	r3, [pc, #344]	; (8005884 <UART_SetConfig+0x2ec>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005732:	2bc0      	cmp	r3, #192	; 0xc0
 8005734:	d013      	beq.n	800575e <UART_SetConfig+0x1c6>
 8005736:	2bc0      	cmp	r3, #192	; 0xc0
 8005738:	d814      	bhi.n	8005764 <UART_SetConfig+0x1cc>
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d009      	beq.n	8005752 <UART_SetConfig+0x1ba>
 800573e:	2b80      	cmp	r3, #128	; 0x80
 8005740:	d810      	bhi.n	8005764 <UART_SetConfig+0x1cc>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <UART_SetConfig+0x1b4>
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d006      	beq.n	8005758 <UART_SetConfig+0x1c0>
 800574a:	e00b      	b.n	8005764 <UART_SetConfig+0x1cc>
 800574c:	2300      	movs	r3, #0
 800574e:	76fb      	strb	r3, [r7, #27]
 8005750:	e063      	b.n	800581a <UART_SetConfig+0x282>
 8005752:	2302      	movs	r3, #2
 8005754:	76fb      	strb	r3, [r7, #27]
 8005756:	e060      	b.n	800581a <UART_SetConfig+0x282>
 8005758:	2304      	movs	r3, #4
 800575a:	76fb      	strb	r3, [r7, #27]
 800575c:	e05d      	b.n	800581a <UART_SetConfig+0x282>
 800575e:	2308      	movs	r3, #8
 8005760:	76fb      	strb	r3, [r7, #27]
 8005762:	e05a      	b.n	800581a <UART_SetConfig+0x282>
 8005764:	2310      	movs	r3, #16
 8005766:	76fb      	strb	r3, [r7, #27]
 8005768:	e057      	b.n	800581a <UART_SetConfig+0x282>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a49      	ldr	r2, [pc, #292]	; (8005894 <UART_SetConfig+0x2fc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d125      	bne.n	80057c0 <UART_SetConfig+0x228>
 8005774:	4b43      	ldr	r3, [pc, #268]	; (8005884 <UART_SetConfig+0x2ec>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005782:	d017      	beq.n	80057b4 <UART_SetConfig+0x21c>
 8005784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005788:	d817      	bhi.n	80057ba <UART_SetConfig+0x222>
 800578a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800578e:	d00b      	beq.n	80057a8 <UART_SetConfig+0x210>
 8005790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005794:	d811      	bhi.n	80057ba <UART_SetConfig+0x222>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <UART_SetConfig+0x20a>
 800579a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579e:	d006      	beq.n	80057ae <UART_SetConfig+0x216>
 80057a0:	e00b      	b.n	80057ba <UART_SetConfig+0x222>
 80057a2:	2300      	movs	r3, #0
 80057a4:	76fb      	strb	r3, [r7, #27]
 80057a6:	e038      	b.n	800581a <UART_SetConfig+0x282>
 80057a8:	2302      	movs	r3, #2
 80057aa:	76fb      	strb	r3, [r7, #27]
 80057ac:	e035      	b.n	800581a <UART_SetConfig+0x282>
 80057ae:	2304      	movs	r3, #4
 80057b0:	76fb      	strb	r3, [r7, #27]
 80057b2:	e032      	b.n	800581a <UART_SetConfig+0x282>
 80057b4:	2308      	movs	r3, #8
 80057b6:	76fb      	strb	r3, [r7, #27]
 80057b8:	e02f      	b.n	800581a <UART_SetConfig+0x282>
 80057ba:	2310      	movs	r3, #16
 80057bc:	76fb      	strb	r3, [r7, #27]
 80057be:	e02c      	b.n	800581a <UART_SetConfig+0x282>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a2d      	ldr	r2, [pc, #180]	; (800587c <UART_SetConfig+0x2e4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d125      	bne.n	8005816 <UART_SetConfig+0x27e>
 80057ca:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <UART_SetConfig+0x2ec>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057d8:	d017      	beq.n	800580a <UART_SetConfig+0x272>
 80057da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057de:	d817      	bhi.n	8005810 <UART_SetConfig+0x278>
 80057e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e4:	d00b      	beq.n	80057fe <UART_SetConfig+0x266>
 80057e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ea:	d811      	bhi.n	8005810 <UART_SetConfig+0x278>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <UART_SetConfig+0x260>
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d006      	beq.n	8005804 <UART_SetConfig+0x26c>
 80057f6:	e00b      	b.n	8005810 <UART_SetConfig+0x278>
 80057f8:	2300      	movs	r3, #0
 80057fa:	76fb      	strb	r3, [r7, #27]
 80057fc:	e00d      	b.n	800581a <UART_SetConfig+0x282>
 80057fe:	2302      	movs	r3, #2
 8005800:	76fb      	strb	r3, [r7, #27]
 8005802:	e00a      	b.n	800581a <UART_SetConfig+0x282>
 8005804:	2304      	movs	r3, #4
 8005806:	76fb      	strb	r3, [r7, #27]
 8005808:	e007      	b.n	800581a <UART_SetConfig+0x282>
 800580a:	2308      	movs	r3, #8
 800580c:	76fb      	strb	r3, [r7, #27]
 800580e:	e004      	b.n	800581a <UART_SetConfig+0x282>
 8005810:	2310      	movs	r3, #16
 8005812:	76fb      	strb	r3, [r7, #27]
 8005814:	e001      	b.n	800581a <UART_SetConfig+0x282>
 8005816:	2310      	movs	r3, #16
 8005818:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a17      	ldr	r2, [pc, #92]	; (800587c <UART_SetConfig+0x2e4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	f040 8087 	bne.w	8005934 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005826:	7efb      	ldrb	r3, [r7, #27]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d837      	bhi.n	800589c <UART_SetConfig+0x304>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x29c>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005859 	.word	0x08005859
 8005838:	0800589d 	.word	0x0800589d
 800583c:	08005861 	.word	0x08005861
 8005840:	0800589d 	.word	0x0800589d
 8005844:	08005867 	.word	0x08005867
 8005848:	0800589d 	.word	0x0800589d
 800584c:	0800589d 	.word	0x0800589d
 8005850:	0800589d 	.word	0x0800589d
 8005854:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fd fce6 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 800585c:	6178      	str	r0, [r7, #20]
        break;
 800585e:	e022      	b.n	80058a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <UART_SetConfig+0x300>)
 8005862:	617b      	str	r3, [r7, #20]
        break;
 8005864:	e01f      	b.n	80058a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fd fc47 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 800586a:	6178      	str	r0, [r7, #20]
        break;
 800586c:	e01b      	b.n	80058a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	617b      	str	r3, [r7, #20]
        break;
 8005874:	e017      	b.n	80058a6 <UART_SetConfig+0x30e>
 8005876:	bf00      	nop
 8005878:	efff69f3 	.word	0xefff69f3
 800587c:	40008000 	.word	0x40008000
 8005880:	40013800 	.word	0x40013800
 8005884:	40021000 	.word	0x40021000
 8005888:	40004400 	.word	0x40004400
 800588c:	40004800 	.word	0x40004800
 8005890:	40004c00 	.word	0x40004c00
 8005894:	40005000 	.word	0x40005000
 8005898:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	76bb      	strb	r3, [r7, #26]
        break;
 80058a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80f1 	beq.w	8005a90 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4413      	add	r3, r2
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d305      	bcc.n	80058ca <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d902      	bls.n	80058d0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	76bb      	strb	r3, [r7, #26]
 80058ce:	e0df      	b.n	8005a90 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	020b      	lsls	r3, r1, #8
 80058e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058e6:	0202      	lsls	r2, r0, #8
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	6849      	ldr	r1, [r1, #4]
 80058ec:	0849      	lsrs	r1, r1, #1
 80058ee:	4608      	mov	r0, r1
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	1814      	adds	r4, r2, r0
 80058f6:	eb43 0501 	adc.w	r5, r3, r1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	461a      	mov	r2, r3
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	4620      	mov	r0, r4
 8005906:	4629      	mov	r1, r5
 8005908:	f7fa fc6a 	bl	80001e0 <__aeabi_uldivmod>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4613      	mov	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591a:	d308      	bcc.n	800592e <UART_SetConfig+0x396>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005922:	d204      	bcs.n	800592e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	60da      	str	r2, [r3, #12]
 800592c:	e0b0      	b.n	8005a90 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	76bb      	strb	r3, [r7, #26]
 8005932:	e0ad      	b.n	8005a90 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593c:	d15b      	bne.n	80059f6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800593e:	7efb      	ldrb	r3, [r7, #27]
 8005940:	2b08      	cmp	r3, #8
 8005942:	d828      	bhi.n	8005996 <UART_SetConfig+0x3fe>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0x3b4>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	08005971 	.word	0x08005971
 8005950:	08005979 	.word	0x08005979
 8005954:	08005981 	.word	0x08005981
 8005958:	08005997 	.word	0x08005997
 800595c:	08005987 	.word	0x08005987
 8005960:	08005997 	.word	0x08005997
 8005964:	08005997 	.word	0x08005997
 8005968:	08005997 	.word	0x08005997
 800596c:	0800598f 	.word	0x0800598f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fd fc5a 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8005974:	6178      	str	r0, [r7, #20]
        break;
 8005976:	e013      	b.n	80059a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005978:	f7fd fc6c 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 800597c:	6178      	str	r0, [r7, #20]
        break;
 800597e:	e00f      	b.n	80059a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005980:	4b49      	ldr	r3, [pc, #292]	; (8005aa8 <UART_SetConfig+0x510>)
 8005982:	617b      	str	r3, [r7, #20]
        break;
 8005984:	e00c      	b.n	80059a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005986:	f7fd fbb7 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 800598a:	6178      	str	r0, [r7, #20]
        break;
 800598c:	e008      	b.n	80059a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	617b      	str	r3, [r7, #20]
        break;
 8005994:	e004      	b.n	80059a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	76bb      	strb	r3, [r7, #26]
        break;
 800599e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d074      	beq.n	8005a90 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	005a      	lsls	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b0f      	cmp	r3, #15
 80059c0:	d916      	bls.n	80059f0 <UART_SetConfig+0x458>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c8:	d212      	bcs.n	80059f0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f023 030f 	bic.w	r3, r3, #15
 80059d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	b29a      	uxth	r2, r3
 80059e0:	89fb      	ldrh	r3, [r7, #14]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	89fa      	ldrh	r2, [r7, #14]
 80059ec:	60da      	str	r2, [r3, #12]
 80059ee:	e04f      	b.n	8005a90 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	76bb      	strb	r3, [r7, #26]
 80059f4:	e04c      	b.n	8005a90 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059f6:	7efb      	ldrb	r3, [r7, #27]
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d828      	bhi.n	8005a4e <UART_SetConfig+0x4b6>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x46c>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	08005a4f 	.word	0x08005a4f
 8005a14:	08005a3f 	.word	0x08005a3f
 8005a18:	08005a4f 	.word	0x08005a4f
 8005a1c:	08005a4f 	.word	0x08005a4f
 8005a20:	08005a4f 	.word	0x08005a4f
 8005a24:	08005a47 	.word	0x08005a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a28:	f7fd fbfe 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8005a2c:	6178      	str	r0, [r7, #20]
        break;
 8005a2e:	e013      	b.n	8005a58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7fd fc10 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8005a34:	6178      	str	r0, [r7, #20]
        break;
 8005a36:	e00f      	b.n	8005a58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a38:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <UART_SetConfig+0x510>)
 8005a3a:	617b      	str	r3, [r7, #20]
        break;
 8005a3c:	e00c      	b.n	8005a58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3e:	f7fd fb5b 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 8005a42:	6178      	str	r0, [r7, #20]
        break;
 8005a44:	e008      	b.n	8005a58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4a:	617b      	str	r3, [r7, #20]
        break;
 8005a4c:	e004      	b.n	8005a58 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	76bb      	strb	r3, [r7, #26]
        break;
 8005a56:	bf00      	nop
    }

    if (pclk != 0U)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d018      	beq.n	8005a90 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	085a      	lsrs	r2, r3, #1
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	441a      	add	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b0f      	cmp	r3, #15
 8005a76:	d909      	bls.n	8005a8c <UART_SetConfig+0x4f4>
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7e:	d205      	bcs.n	8005a8c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60da      	str	r2, [r3, #12]
 8005a8a:	e001      	b.n	8005a90 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	00f42400 	.word	0x00f42400

08005aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01a      	beq.n	8005bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005baa:	d10a      	bne.n	8005bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
  }
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c00:	f7fb fcae 	bl	8001560 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d10e      	bne.n	8005c32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f82d 	bl	8005c82 <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e023      	b.n	8005c7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d10e      	bne.n	8005c5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f817 	bl	8005c82 <UART_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e00d      	b.n	8005c7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b09c      	sub	sp, #112	; 0x70
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c92:	e0a5      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	f000 80a1 	beq.w	8005de0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9e:	f7fb fc5f 	bl	8001560 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d13e      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e6      	bne.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d06:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e067      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d04f      	beq.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4e:	d147      	bne.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d58:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d78:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e6      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3308      	adds	r3, #8
 8005d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dac:	623a      	str	r2, [r7, #32]
 8005dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69f9      	ldr	r1, [r7, #28]
 8005db2:	6a3a      	ldr	r2, [r7, #32]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e5      	bne.n	8005d8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e010      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4013      	ands	r3, r2
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	f43f af4a 	beq.w	8005c94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3770      	adds	r7, #112	; 0x70
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b097      	sub	sp, #92	; 0x5c
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d10e      	bne.n	8005e5e <UART_Start_Receive_IT+0x52>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <UART_Start_Receive_IT+0x48>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e52:	e02d      	b.n	8005eb0 <UART_Start_Receive_IT+0xa4>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	22ff      	movs	r2, #255	; 0xff
 8005e58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e5c:	e028      	b.n	8005eb0 <UART_Start_Receive_IT+0xa4>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10d      	bne.n	8005e82 <UART_Start_Receive_IT+0x76>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <UART_Start_Receive_IT+0x6c>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	22ff      	movs	r2, #255	; 0xff
 8005e72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e76:	e01b      	b.n	8005eb0 <UART_Start_Receive_IT+0xa4>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	227f      	movs	r2, #127	; 0x7f
 8005e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e80:	e016      	b.n	8005eb0 <UART_Start_Receive_IT+0xa4>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e8a:	d10d      	bne.n	8005ea8 <UART_Start_Receive_IT+0x9c>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <UART_Start_Receive_IT+0x92>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	227f      	movs	r2, #127	; 0x7f
 8005e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e9c:	e008      	b.n	8005eb0 <UART_Start_Receive_IT+0xa4>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	223f      	movs	r2, #63	; 0x3f
 8005ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ea6:	e003      	b.n	8005eb0 <UART_Start_Receive_IT+0xa4>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2222      	movs	r2, #34	; 0x22
 8005ebc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3308      	adds	r3, #8
 8005edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e5      	bne.n	8005ebe <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efa:	d107      	bne.n	8005f0c <UART_Start_Receive_IT+0x100>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <UART_Start_Receive_IT+0x18c>)
 8005f08:	665a      	str	r2, [r3, #100]	; 0x64
 8005f0a:	e002      	b.n	8005f12 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a23      	ldr	r2, [pc, #140]	; (8005f9c <UART_Start_Receive_IT+0x190>)
 8005f10:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d019      	beq.n	8005f56 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
 8005f42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e6      	bne.n	8005f22 <UART_Start_Receive_IT+0x116>
 8005f54:	e018      	b.n	8005f88 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	613b      	str	r3, [r7, #16]
   return(result);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f043 0320 	orr.w	r3, r3, #32
 8005f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	6a3a      	ldr	r2, [r7, #32]
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e6      	bne.n	8005f56 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	375c      	adds	r7, #92	; 0x5c
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	080063bf 	.word	0x080063bf
 8005f9c:	0800625f 	.word	0x0800625f

08005fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b095      	sub	sp, #84	; 0x54
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e6      	bne.n	8005fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e5      	bne.n	8005fda <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006012:	2b01      	cmp	r3, #1
 8006014:	d118      	bne.n	8006048 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60bb      	str	r3, [r7, #8]
   return(result);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	647b      	str	r3, [r7, #68]	; 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6979      	ldr	r1, [r7, #20]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	613b      	str	r3, [r7, #16]
   return(result);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e6      	bne.n	8006016 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	665a      	str	r2, [r3, #100]	; 0x64
}
 800605a:	bf00      	nop
 800605c:	3754      	adds	r7, #84	; 0x54
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff fa71 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006092:	b480      	push	{r7}
 8006094:	b08f      	sub	sp, #60	; 0x3c
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609e:	2b21      	cmp	r3, #33	; 0x21
 80060a0:	d14d      	bne.n	800613e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d132      	bne.n	8006114 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e6      	bne.n	80060ae <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f4:	633b      	str	r3, [r7, #48]	; 0x30
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6979      	ldr	r1, [r7, #20]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	613b      	str	r3, [r7, #16]
   return(result);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e6      	bne.n	80060e0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006112:	e014      	b.n	800613e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	b292      	uxth	r2, r2
 8006120:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800613e:	bf00      	nop
 8006140:	373c      	adds	r7, #60	; 0x3c
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800614a:	b480      	push	{r7}
 800614c:	b091      	sub	sp, #68	; 0x44
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006156:	2b21      	cmp	r3, #33	; 0x21
 8006158:	d151      	bne.n	80061fe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d132      	bne.n	80061cc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	623b      	str	r3, [r7, #32]
   return(result);
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617a:	63bb      	str	r3, [r7, #56]	; 0x38
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	633b      	str	r3, [r7, #48]	; 0x30
 8006186:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800618a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e6      	bne.n	8006166 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	617b      	str	r3, [r7, #20]
   return(result);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e6      	bne.n	8006198 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80061ca:	e018      	b.n	80061fe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80061d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d4:	881a      	ldrh	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061de:	b292      	uxth	r2, r2
 80061e0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80061fe:	bf00      	nop
 8006200:	3744      	adds	r7, #68	; 0x44
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b088      	sub	sp, #32
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6979      	ldr	r1, [r7, #20]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	613b      	str	r3, [r7, #16]
   return(result);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e6      	bne.n	8006212 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fa fddd 	bl	8000e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006256:	bf00      	nop
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b096      	sub	sp, #88	; 0x58
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800626c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006274:	2b22      	cmp	r3, #34	; 0x22
 8006276:	f040 8094 	bne.w	80063a2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006280:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006284:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006288:	b2d9      	uxtb	r1, r3
 800628a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800628e:	b2da      	uxtb	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006294:	400a      	ands	r2, r1
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d179      	bne.n	80063b6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062d6:	653b      	str	r3, [r7, #80]	; 0x50
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e0:	647b      	str	r3, [r7, #68]	; 0x44
 80062e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e6      	bne.n	80062c2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3308      	adds	r3, #8
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	623b      	str	r3, [r7, #32]
   return(result);
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006314:	633a      	str	r2, [r7, #48]	; 0x30
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800631a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e5      	bne.n	80062f4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006338:	2b01      	cmp	r3, #1
 800633a:	d12e      	bne.n	800639a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0310 	bic.w	r3, r3, #16
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	69b9      	ldr	r1, [r7, #24]
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	617b      	str	r3, [r7, #20]
   return(result);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e6      	bne.n	8006342 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b10      	cmp	r3, #16
 8006380:	d103      	bne.n	800638a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2210      	movs	r2, #16
 8006388:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff f8f4 	bl	8005580 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006398:	e00d      	b.n	80063b6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fa fd6e 	bl	8000e7c <HAL_UART_RxCpltCallback>
}
 80063a0:	e009      	b.n	80063b6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	8b1b      	ldrh	r3, [r3, #24]
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0208 	orr.w	r2, r2, #8
 80063b2:	b292      	uxth	r2, r2
 80063b4:	831a      	strh	r2, [r3, #24]
}
 80063b6:	bf00      	nop
 80063b8:	3758      	adds	r7, #88	; 0x58
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b096      	sub	sp, #88	; 0x58
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d4:	2b22      	cmp	r3, #34	; 0x22
 80063d6:	f040 8094 	bne.w	8006502 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80063e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80063ea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80063ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063f2:	4013      	ands	r3, r2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fe:	1c9a      	adds	r2, r3, #2
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d179      	bne.n	8006516 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006440:	643b      	str	r3, [r7, #64]	; 0x40
 8006442:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3308      	adds	r3, #8
 800645a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	61fb      	str	r3, [r7, #28]
   return(result);
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	64bb      	str	r3, [r7, #72]	; 0x48
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3308      	adds	r3, #8
 8006472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800647a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	2b01      	cmp	r3, #1
 800649a:	d12e      	bne.n	80064fa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	647b      	str	r3, [r7, #68]	; 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6979      	ldr	r1, [r7, #20]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	613b      	str	r3, [r7, #16]
   return(result);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e6      	bne.n	80064a2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d103      	bne.n	80064ea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2210      	movs	r2, #16
 80064e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff f844 	bl	8005580 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064f8:	e00d      	b.n	8006516 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fa fcbe 	bl	8000e7c <HAL_UART_RxCpltCallback>
}
 8006500:	e009      	b.n	8006516 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	8b1b      	ldrh	r3, [r3, #24]
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0208 	orr.w	r2, r2, #8
 8006512:	b292      	uxth	r2, r2
 8006514:	831a      	strh	r2, [r3, #24]
}
 8006516:	bf00      	nop
 8006518:	3758      	adds	r7, #88	; 0x58
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <__NVIC_SetPriority>:
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	6039      	str	r1, [r7, #0]
 800653e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006544:	2b00      	cmp	r3, #0
 8006546:	db0a      	blt.n	800655e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	490c      	ldr	r1, [pc, #48]	; (8006580 <__NVIC_SetPriority+0x4c>)
 800654e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006552:	0112      	lsls	r2, r2, #4
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	440b      	add	r3, r1
 8006558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800655c:	e00a      	b.n	8006574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4908      	ldr	r1, [pc, #32]	; (8006584 <__NVIC_SetPriority+0x50>)
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	3b04      	subs	r3, #4
 800656c:	0112      	lsls	r2, r2, #4
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	440b      	add	r3, r1
 8006572:	761a      	strb	r2, [r3, #24]
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	e000e100 	.word	0xe000e100
 8006584:	e000ed00 	.word	0xe000ed00

08006588 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <SysTick_Handler+0x1c>)
 800658e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006590:	f001 fe8e 	bl	80082b0 <xTaskGetSchedulerState>
 8006594:	4603      	mov	r3, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	d001      	beq.n	800659e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800659a:	f002 fead 	bl	80092f8 <xPortSysTickHandler>
  }
}
 800659e:	bf00      	nop
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	e000e010 	.word	0xe000e010

080065a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80065ac:	2100      	movs	r1, #0
 80065ae:	f06f 0004 	mvn.w	r0, #4
 80065b2:	f7ff ffbf 	bl	8006534 <__NVIC_SetPriority>
#endif
}
 80065b6:	bf00      	nop
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c2:	f3ef 8305 	mrs	r3, IPSR
 80065c6:	603b      	str	r3, [r7, #0]
  return(result);
 80065c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80065ce:	f06f 0305 	mvn.w	r3, #5
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	e00c      	b.n	80065f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <osKernelInitialize+0x44>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d105      	bne.n	80065ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80065de:	4b08      	ldr	r3, [pc, #32]	; (8006600 <osKernelInitialize+0x44>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	607b      	str	r3, [r7, #4]
 80065e8:	e002      	b.n	80065f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295
 80065ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065f0:	687b      	ldr	r3, [r7, #4]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000058 	.word	0x20000058

08006604 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800660a:	f3ef 8305 	mrs	r3, IPSR
 800660e:	603b      	str	r3, [r7, #0]
  return(result);
 8006610:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006616:	f06f 0305 	mvn.w	r3, #5
 800661a:	607b      	str	r3, [r7, #4]
 800661c:	e010      	b.n	8006640 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <osKernelStart+0x48>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d109      	bne.n	800663a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006626:	f7ff ffbf 	bl	80065a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800662a:	4b08      	ldr	r3, [pc, #32]	; (800664c <osKernelStart+0x48>)
 800662c:	2202      	movs	r2, #2
 800662e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006630:	f001 f9f6 	bl	8007a20 <vTaskStartScheduler>
      stat = osOK;
 8006634:	2300      	movs	r3, #0
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	e002      	b.n	8006640 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800663a:	f04f 33ff 	mov.w	r3, #4294967295
 800663e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006640:	687b      	ldr	r3, [r7, #4]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000058 	.word	0x20000058

08006650 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b08e      	sub	sp, #56	; 0x38
 8006654:	af04      	add	r7, sp, #16
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006660:	f3ef 8305 	mrs	r3, IPSR
 8006664:	617b      	str	r3, [r7, #20]
  return(result);
 8006666:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006668:	2b00      	cmp	r3, #0
 800666a:	d17e      	bne.n	800676a <osThreadNew+0x11a>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d07b      	beq.n	800676a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006672:	2340      	movs	r3, #64	; 0x40
 8006674:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006676:	2318      	movs	r3, #24
 8006678:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800667e:	f04f 33ff 	mov.w	r3, #4294967295
 8006682:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d045      	beq.n	8006716 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <osThreadNew+0x48>
        name = attr->name;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <osThreadNew+0x6e>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	2b38      	cmp	r3, #56	; 0x38
 80066b0:	d805      	bhi.n	80066be <osThreadNew+0x6e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <osThreadNew+0x72>
        return (NULL);
 80066be:	2300      	movs	r3, #0
 80066c0:	e054      	b.n	800676c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00e      	beq.n	80066f8 <osThreadNew+0xa8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b5b      	cmp	r3, #91	; 0x5b
 80066e0:	d90a      	bls.n	80066f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <osThreadNew+0xa8>
        mem = 1;
 80066f2:	2301      	movs	r3, #1
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	e010      	b.n	800671a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <osThreadNew+0xca>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d108      	bne.n	800671a <osThreadNew+0xca>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d104      	bne.n	800671a <osThreadNew+0xca>
          mem = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	e001      	b.n	800671a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d110      	bne.n	8006742 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006728:	9202      	str	r2, [sp, #8]
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6a3a      	ldr	r2, [r7, #32]
 8006734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 ff9c 	bl	8007674 <xTaskCreateStatic>
 800673c:	4603      	mov	r3, r0
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	e013      	b.n	800676a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d110      	bne.n	800676a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	b29a      	uxth	r2, r3
 800674c:	f107 0310 	add.w	r3, r7, #16
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 ffe7 	bl	800772e <xTaskCreate>
 8006760:	4603      	mov	r3, r0
 8006762:	2b01      	cmp	r3, #1
 8006764:	d001      	beq.n	800676a <osThreadNew+0x11a>
            hTask = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800676a:	693b      	ldr	r3, [r7, #16]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3728      	adds	r7, #40	; 0x28
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800677c:	f3ef 8305 	mrs	r3, IPSR
 8006780:	60bb      	str	r3, [r7, #8]
  return(result);
 8006782:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <osDelay+0x1c>
    stat = osErrorISR;
 8006788:	f06f 0305 	mvn.w	r3, #5
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	e007      	b.n	80067a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 f90c 	bl	80079b8 <vTaskDelay>
    }
  }

  return (stat);
 80067a0:	68fb      	ldr	r3, [r7, #12]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4a07      	ldr	r2, [pc, #28]	; (80067d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80067bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4a06      	ldr	r2, [pc, #24]	; (80067dc <vApplicationGetIdleTaskMemory+0x30>)
 80067c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	601a      	str	r2, [r3, #0]
}
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	2000005c 	.word	0x2000005c
 80067dc:	200000b8 	.word	0x200000b8

080067e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a07      	ldr	r2, [pc, #28]	; (800680c <vApplicationGetTimerTaskMemory+0x2c>)
 80067f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4a06      	ldr	r2, [pc, #24]	; (8006810 <vApplicationGetTimerTaskMemory+0x30>)
 80067f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2280      	movs	r2, #128	; 0x80
 80067fc:	601a      	str	r2, [r3, #0]
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	200001b8 	.word	0x200001b8
 8006810:	20000214 	.word	0x20000214

08006814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f103 0208 	add.w	r2, r3, #8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f103 0208 	add.w	r2, r3, #8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f103 0208 	add.w	r2, r3, #8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	601a      	str	r2, [r3, #0]
}
 80068aa:	bf00      	nop
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d103      	bne.n	80068d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e00c      	b.n	80068f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3308      	adds	r3, #8
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e002      	b.n	80068e4 <vListInsert+0x2e>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d2f6      	bcs.n	80068de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	601a      	str	r2, [r3, #0]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6892      	ldr	r2, [r2, #8]
 800693e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6852      	ldr	r2, [r2, #4]
 8006948:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d103      	bne.n	800695c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	1e5a      	subs	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069a6:	f002 fc15 	bl	80091d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	441a      	add	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	3b01      	subs	r3, #1
 80069d8:	68f9      	ldr	r1, [r7, #12]
 80069da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	22ff      	movs	r2, #255	; 0xff
 80069f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d114      	bne.n	8006a26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01a      	beq.n	8006a3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3310      	adds	r3, #16
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fa93 	bl	8007f34 <xTaskRemoveFromEventList>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d012      	beq.n	8006a3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a14:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <xQueueGenericReset+0xcc>)
 8006a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	e009      	b.n	8006a3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3310      	adds	r3, #16
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fef2 	bl	8006814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3324      	adds	r3, #36	; 0x24
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff feed 	bl	8006814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a3a:	f002 fbfb 	bl	8009234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a3e:	2301      	movs	r3, #1
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08e      	sub	sp, #56	; 0x38
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <xQueueGenericCreateStatic+0x52>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <xQueueGenericCreateStatic+0x56>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e000      	b.n	8006aa4 <xQueueGenericCreateStatic+0x58>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	623b      	str	r3, [r7, #32]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <xQueueGenericCreateStatic+0x7e>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <xQueueGenericCreateStatic+0x82>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <xQueueGenericCreateStatic+0x84>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	61fb      	str	r3, [r7, #28]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aea:	2350      	movs	r3, #80	; 0x50
 8006aec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b50      	cmp	r3, #80	; 0x50
 8006af2:	d00a      	beq.n	8006b0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61bb      	str	r3, [r7, #24]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00d      	beq.n	8006b32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	4613      	mov	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f83f 	bl	8006bb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3730      	adds	r7, #48	; 0x30
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	613b      	str	r3, [r7, #16]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	fb02 f303 	mul.w	r3, r2, r3
 8006b6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	3350      	adds	r3, #80	; 0x50
 8006b74:	4618      	mov	r0, r3
 8006b76:	f002 fc4f 	bl	8009418 <pvPortMalloc>
 8006b7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d011      	beq.n	8006ba6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	3350      	adds	r3, #80	; 0x50
 8006b8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b94:	79fa      	ldrb	r2, [r7, #7]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f805 	bl	8006bb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d103      	bne.n	8006bcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	e002      	b.n	8006bd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bde:	2101      	movs	r1, #1
 8006be0:	69b8      	ldr	r0, [r7, #24]
 8006be2:	f7ff fecb 	bl	800697c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	78fa      	ldrb	r2, [r7, #3]
 8006bea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00e      	beq.n	8006c22 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c16:	2300      	movs	r3, #0
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f81d 	bl	8006c5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b086      	sub	sp, #24
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	4603      	mov	r3, r0
 8006c32:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c34:	2301      	movs	r3, #1
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6939      	ldr	r1, [r7, #16]
 8006c42:	6978      	ldr	r0, [r7, #20]
 8006c44:	f7ff ff7a 	bl	8006b3c <xQueueGenericCreate>
 8006c48:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff ffd3 	bl	8006bf6 <prvInitialiseMutex>

		return xNewQueue;
 8006c50:	68fb      	ldr	r3, [r7, #12]
	}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08e      	sub	sp, #56	; 0x38
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <xQueueGenericSend+0x32>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <xQueueGenericSend+0x40>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <xQueueGenericSend+0x44>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <xQueueGenericSend+0x46>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <xQueueGenericSend+0x60>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d103      	bne.n	8006cca <xQueueGenericSend+0x6e>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <xQueueGenericSend+0x72>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <xQueueGenericSend+0x74>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <xQueueGenericSend+0x8e>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	623b      	str	r3, [r7, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cea:	f001 fae1 	bl	80082b0 <xTaskGetSchedulerState>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <xQueueGenericSend+0x9e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <xQueueGenericSend+0xa2>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <xQueueGenericSend+0xa4>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <xQueueGenericSend+0xbe>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	61fb      	str	r3, [r7, #28]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d1a:	f002 fa5b 	bl	80091d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <xQueueGenericSend+0xd4>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d129      	bne.n	8006d84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d36:	f000 fb2f 	bl	8007398 <prvCopyDataToQueue>
 8006d3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d010      	beq.n	8006d66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	3324      	adds	r3, #36	; 0x24
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 f8f3 	bl	8007f34 <xTaskRemoveFromEventList>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d013      	beq.n	8006d7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d54:	4b3f      	ldr	r3, [pc, #252]	; (8006e54 <xQueueGenericSend+0x1f8>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	e00a      	b.n	8006d7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d6c:	4b39      	ldr	r3, [pc, #228]	; (8006e54 <xQueueGenericSend+0x1f8>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d7c:	f002 fa5a 	bl	8009234 <vPortExitCritical>
				return pdPASS;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e063      	b.n	8006e4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d103      	bne.n	8006d92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d8a:	f002 fa53 	bl	8009234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e05c      	b.n	8006e4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d98:	f107 0314 	add.w	r3, r7, #20
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 f92d 	bl	8007ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006da2:	2301      	movs	r3, #1
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006da6:	f002 fa45 	bl	8009234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006daa:	f000 fe9f 	bl	8007aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dae:	f002 fa11 	bl	80091d4 <vPortEnterCritical>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006db8:	b25b      	sxtb	r3, r3
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbe:	d103      	bne.n	8006dc8 <xQueueGenericSend+0x16c>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dce:	b25b      	sxtb	r3, r3
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d103      	bne.n	8006dde <xQueueGenericSend+0x182>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dde:	f002 fa29 	bl	8009234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006de2:	1d3a      	adds	r2, r7, #4
 8006de4:	f107 0314 	add.w	r3, r7, #20
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 f91c 	bl	8008028 <xTaskCheckForTimeOut>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d124      	bne.n	8006e40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df8:	f000 fbc6 	bl	8007588 <prvIsQueueFull>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d018      	beq.n	8006e34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	3310      	adds	r3, #16
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 f842 	bl	8007e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e12:	f000 fb51 	bl	80074b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e16:	f000 fe77 	bl	8007b08 <xTaskResumeAll>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f47f af7c 	bne.w	8006d1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <xQueueGenericSend+0x1f8>)
 8006e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	e772      	b.n	8006d1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e36:	f000 fb3f 	bl	80074b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e3a:	f000 fe65 	bl	8007b08 <xTaskResumeAll>
 8006e3e:	e76c      	b.n	8006d1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e42:	f000 fb39 	bl	80074b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e46:	f000 fe5f 	bl	8007b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3738      	adds	r7, #56	; 0x38
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b090      	sub	sp, #64	; 0x40
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <xQueueGenericSendFromISR+0x3c>
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <xQueueGenericSendFromISR+0x40>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <xQueueGenericSendFromISR+0x42>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d103      	bne.n	8006ec2 <xQueueGenericSendFromISR+0x6a>
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <xQueueGenericSendFromISR+0x6e>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <xQueueGenericSendFromISR+0x70>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	623b      	str	r3, [r7, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ee2:	f002 fa59 	bl	8009398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	61fa      	str	r2, [r7, #28]
 8006efc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006efe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d302      	bcc.n	8006f14 <xQueueGenericSendFromISR+0xbc>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d12f      	bne.n	8006f74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f2a:	f000 fa35 	bl	8007398 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d112      	bne.n	8006f5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d016      	beq.n	8006f6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	3324      	adds	r3, #36	; 0x24
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fff5 	bl	8007f34 <xTaskRemoveFromEventList>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00e      	beq.n	8006f6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	e007      	b.n	8006f6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f62:	3301      	adds	r3, #1
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	b25a      	sxtb	r2, r3
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f72:	e001      	b.n	8006f78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3740      	adds	r7, #64	; 0x40
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08c      	sub	sp, #48	; 0x30
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <xQueueReceive+0x30>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	623b      	str	r3, [r7, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d103      	bne.n	8006fce <xQueueReceive+0x3e>
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <xQueueReceive+0x42>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <xQueueReceive+0x44>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <xQueueReceive+0x5e>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	61fb      	str	r3, [r7, #28]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fee:	f001 f95f 	bl	80082b0 <xTaskGetSchedulerState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <xQueueReceive+0x6e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <xQueueReceive+0x72>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <xQueueReceive+0x74>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <xQueueReceive+0x8e>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	61bb      	str	r3, [r7, #24]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800701e:	f002 f8d9 	bl	80091d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01f      	beq.n	800706e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007032:	f000 fa1b 	bl	800746c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00f      	beq.n	8007066 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	3310      	adds	r3, #16
 800704a:	4618      	mov	r0, r3
 800704c:	f000 ff72 	bl	8007f34 <xTaskRemoveFromEventList>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007056:	4b3d      	ldr	r3, [pc, #244]	; (800714c <xQueueReceive+0x1bc>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007066:	f002 f8e5 	bl	8009234 <vPortExitCritical>
				return pdPASS;
 800706a:	2301      	movs	r3, #1
 800706c:	e069      	b.n	8007142 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d103      	bne.n	800707c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007074:	f002 f8de 	bl	8009234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007078:	2300      	movs	r3, #0
 800707a:	e062      	b.n	8007142 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d106      	bne.n	8007090 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007082:	f107 0310 	add.w	r3, r7, #16
 8007086:	4618      	mov	r0, r3
 8007088:	f000 ffb8 	bl	8007ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007090:	f002 f8d0 	bl	8009234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007094:	f000 fd2a 	bl	8007aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007098:	f002 f89c 	bl	80091d4 <vPortEnterCritical>
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070a2:	b25b      	sxtb	r3, r3
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a8:	d103      	bne.n	80070b2 <xQueueReceive+0x122>
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070b8:	b25b      	sxtb	r3, r3
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d103      	bne.n	80070c8 <xQueueReceive+0x138>
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070c8:	f002 f8b4 	bl	8009234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070cc:	1d3a      	adds	r2, r7, #4
 80070ce:	f107 0310 	add.w	r3, r7, #16
 80070d2:	4611      	mov	r1, r2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 ffa7 	bl	8008028 <xTaskCheckForTimeOut>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d123      	bne.n	8007128 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e2:	f000 fa3b 	bl	800755c <prvIsQueueEmpty>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d017      	beq.n	800711c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	3324      	adds	r3, #36	; 0x24
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fecd 	bl	8007e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fc:	f000 f9dc 	bl	80074b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007100:	f000 fd02 	bl	8007b08 <xTaskResumeAll>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d189      	bne.n	800701e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800710a:	4b10      	ldr	r3, [pc, #64]	; (800714c <xQueueReceive+0x1bc>)
 800710c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	e780      	b.n	800701e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800711c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711e:	f000 f9cb 	bl	80074b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007122:	f000 fcf1 	bl	8007b08 <xTaskResumeAll>
 8007126:	e77a      	b.n	800701e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800712a:	f000 f9c5 	bl	80074b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800712e:	f000 fceb 	bl	8007b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007134:	f000 fa12 	bl	800755c <prvIsQueueEmpty>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	f43f af6f 	beq.w	800701e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007142:	4618      	mov	r0, r3
 8007144:	3730      	adds	r7, #48	; 0x30
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08e      	sub	sp, #56	; 0x38
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800715a:	2300      	movs	r3, #0
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007162:	2300      	movs	r3, #0
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	623b      	str	r3, [r7, #32]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	61fb      	str	r3, [r7, #28]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071a0:	f001 f886 	bl	80082b0 <xTaskGetSchedulerState>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d102      	bne.n	80071b0 <xQueueSemaphoreTake+0x60>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <xQueueSemaphoreTake+0x64>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <xQueueSemaphoreTake+0x66>
 80071b4:	2300      	movs	r3, #0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10a      	bne.n	80071d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	61bb      	str	r3, [r7, #24]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071d0:	f002 f800 	bl	80091d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d024      	beq.n	800722a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	1e5a      	subs	r2, r3, #1
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80071f0:	f001 f9d4 	bl	800859c <pvTaskIncrementMutexHeldCount>
 80071f4:	4602      	mov	r2, r0
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00f      	beq.n	8007222 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	3310      	adds	r3, #16
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fe94 	bl	8007f34 <xTaskRemoveFromEventList>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007212:	4b54      	ldr	r3, [pc, #336]	; (8007364 <xQueueSemaphoreTake+0x214>)
 8007214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007222:	f002 f807 	bl	8009234 <vPortExitCritical>
				return pdPASS;
 8007226:	2301      	movs	r3, #1
 8007228:	e097      	b.n	800735a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d111      	bne.n	8007254 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	617b      	str	r3, [r7, #20]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800724c:	f001 fff2 	bl	8009234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007250:	2300      	movs	r3, #0
 8007252:	e082      	b.n	800735a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800725a:	f107 030c 	add.w	r3, r7, #12
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fecc 	bl	8007ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007268:	f001 ffe4 	bl	8009234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800726c:	f000 fc3e 	bl	8007aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007270:	f001 ffb0 	bl	80091d4 <vPortEnterCritical>
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800727a:	b25b      	sxtb	r3, r3
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d103      	bne.n	800728a <xQueueSemaphoreTake+0x13a>
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007290:	b25b      	sxtb	r3, r3
 8007292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007296:	d103      	bne.n	80072a0 <xQueueSemaphoreTake+0x150>
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a0:	f001 ffc8 	bl	8009234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072a4:	463a      	mov	r2, r7
 80072a6:	f107 030c 	add.w	r3, r7, #12
 80072aa:	4611      	mov	r1, r2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 febb 	bl	8008028 <xTaskCheckForTimeOut>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d132      	bne.n	800731e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ba:	f000 f94f 	bl	800755c <prvIsQueueEmpty>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d026      	beq.n	8007312 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d109      	bne.n	80072e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80072cc:	f001 ff82 	bl	80091d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 f809 	bl	80082ec <xTaskPriorityInherit>
 80072da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80072dc:	f001 ffaa 	bl	8009234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	3324      	adds	r3, #36	; 0x24
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fdd3 	bl	8007e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072f0:	f000 f8e2 	bl	80074b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072f4:	f000 fc08 	bl	8007b08 <xTaskResumeAll>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f47f af68 	bne.w	80071d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007300:	4b18      	ldr	r3, [pc, #96]	; (8007364 <xQueueSemaphoreTake+0x214>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	e75e      	b.n	80071d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007312:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007314:	f000 f8d0 	bl	80074b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007318:	f000 fbf6 	bl	8007b08 <xTaskResumeAll>
 800731c:	e758      	b.n	80071d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800731e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007320:	f000 f8ca 	bl	80074b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007324:	f000 fbf0 	bl	8007b08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800732a:	f000 f917 	bl	800755c <prvIsQueueEmpty>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	f43f af4d 	beq.w	80071d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00d      	beq.n	8007358 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800733c:	f001 ff4a 	bl	80091d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007342:	f000 f811 	bl	8007368 <prvGetDisinheritPriorityAfterTimeout>
 8007346:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f001 f8a2 	bl	8008498 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007354:	f001 ff6e 	bl	8009234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007358:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800735a:	4618      	mov	r0, r3
 800735c:	3738      	adds	r7, #56	; 0x38
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	d006      	beq.n	8007386 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	e001      	b.n	800738a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800738a:	68fb      	ldr	r3, [r7, #12]
	}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10d      	bne.n	80073d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d14d      	bne.n	800745a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fffa 	bl	80083bc <xTaskPriorityDisinherit>
 80073c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	e043      	b.n	800745a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d119      	bne.n	800740c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6858      	ldr	r0, [r3, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	461a      	mov	r2, r3
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	f002 fa26 	bl	8009834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	441a      	add	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d32b      	bcc.n	800745a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	e026      	b.n	800745a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68d8      	ldr	r0, [r3, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	461a      	mov	r2, r3
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	f002 fa0c 	bl	8009834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	425b      	negs	r3, r3
 8007426:	441a      	add	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d207      	bcs.n	8007448 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	425b      	negs	r3, r3
 8007442:	441a      	add	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d105      	bne.n	800745a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	3b01      	subs	r3, #1
 8007458:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007462:	697b      	ldr	r3, [r7, #20]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d018      	beq.n	80074b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	441a      	add	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	429a      	cmp	r2, r3
 8007496:	d303      	bcc.n	80074a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68d9      	ldr	r1, [r3, #12]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	461a      	mov	r2, r3
 80074aa:	6838      	ldr	r0, [r7, #0]
 80074ac:	f002 f9c2 	bl	8009834 <memcpy>
	}
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074c0:	f001 fe88 	bl	80091d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074cc:	e011      	b.n	80074f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d012      	beq.n	80074fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3324      	adds	r3, #36	; 0x24
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fd2a 	bl	8007f34 <xTaskRemoveFromEventList>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074e6:	f000 fe01 	bl	80080ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	dce9      	bgt.n	80074ce <prvUnlockQueue+0x16>
 80074fa:	e000      	b.n	80074fe <prvUnlockQueue+0x46>
					break;
 80074fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	22ff      	movs	r2, #255	; 0xff
 8007502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007506:	f001 fe95 	bl	8009234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800750a:	f001 fe63 	bl	80091d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007514:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007516:	e011      	b.n	800753c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d012      	beq.n	8007546 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3310      	adds	r3, #16
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fd05 	bl	8007f34 <xTaskRemoveFromEventList>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007530:	f000 fddc 	bl	80080ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	3b01      	subs	r3, #1
 8007538:	b2db      	uxtb	r3, r3
 800753a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800753c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007540:	2b00      	cmp	r3, #0
 8007542:	dce9      	bgt.n	8007518 <prvUnlockQueue+0x60>
 8007544:	e000      	b.n	8007548 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007546:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	22ff      	movs	r2, #255	; 0xff
 800754c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007550:	f001 fe70 	bl	8009234 <vPortExitCritical>
}
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007564:	f001 fe36 	bl	80091d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	2b00      	cmp	r3, #0
 800756e:	d102      	bne.n	8007576 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007570:	2301      	movs	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e001      	b.n	800757a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800757a:	f001 fe5b 	bl	8009234 <vPortExitCritical>

	return xReturn;
 800757e:	68fb      	ldr	r3, [r7, #12]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007590:	f001 fe20 	bl	80091d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759c:	429a      	cmp	r2, r3
 800759e:	d102      	bne.n	80075a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	e001      	b.n	80075aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075aa:	f001 fe43 	bl	8009234 <vPortExitCritical>

	return xReturn;
 80075ae:	68fb      	ldr	r3, [r7, #12]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	e014      	b.n	80075f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075c8:	4a0f      	ldr	r2, [pc, #60]	; (8007608 <vQueueAddToRegistry+0x50>)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10b      	bne.n	80075ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075d4:	490c      	ldr	r1, [pc, #48]	; (8007608 <vQueueAddToRegistry+0x50>)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075de:	4a0a      	ldr	r2, [pc, #40]	; (8007608 <vQueueAddToRegistry+0x50>)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	4413      	add	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075ea:	e006      	b.n	80075fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b07      	cmp	r3, #7
 80075f6:	d9e7      	bls.n	80075c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20001c40 	.word	0x20001c40

0800760c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800761c:	f001 fdda 	bl	80091d4 <vPortEnterCritical>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007626:	b25b      	sxtb	r3, r3
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d103      	bne.n	8007636 <vQueueWaitForMessageRestricted+0x2a>
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800763c:	b25b      	sxtb	r3, r3
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d103      	bne.n	800764c <vQueueWaitForMessageRestricted+0x40>
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800764c:	f001 fdf2 	bl	8009234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	3324      	adds	r3, #36	; 0x24
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 fc3b 	bl	8007edc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007666:	6978      	ldr	r0, [r7, #20]
 8007668:	f7ff ff26 	bl	80074b8 <prvUnlockQueue>
	}
 800766c:	bf00      	nop
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08e      	sub	sp, #56	; 0x38
 8007678:	af04      	add	r7, sp, #16
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	623b      	str	r3, [r7, #32]
}
 800769a:	bf00      	nop
 800769c:	e7fe      	b.n	800769c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <xTaskCreateStatic+0x46>
	__asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	61fb      	str	r3, [r7, #28]
}
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076ba:	235c      	movs	r3, #92	; 0x5c
 80076bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2b5c      	cmp	r3, #92	; 0x5c
 80076c2:	d00a      	beq.n	80076da <xTaskCreateStatic+0x66>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	61bb      	str	r3, [r7, #24]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01e      	beq.n	8007720 <xTaskCreateStatic+0xac>
 80076e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01b      	beq.n	8007720 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076fa:	2300      	movs	r3, #0
 80076fc:	9303      	str	r3, [sp, #12]
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	9302      	str	r3, [sp, #8]
 8007702:	f107 0314 	add.w	r3, r7, #20
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 f850 	bl	80077b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800771a:	f000 f8dd 	bl	80078d8 <prvAddNewTaskToReadyList>
 800771e:	e001      	b.n	8007724 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007724:	697b      	ldr	r3, [r7, #20]
	}
 8007726:	4618      	mov	r0, r3
 8007728:	3728      	adds	r7, #40	; 0x28
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800772e:	b580      	push	{r7, lr}
 8007730:	b08c      	sub	sp, #48	; 0x30
 8007732:	af04      	add	r7, sp, #16
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4618      	mov	r0, r3
 8007744:	f001 fe68 	bl	8009418 <pvPortMalloc>
 8007748:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00e      	beq.n	800776e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007750:	205c      	movs	r0, #92	; 0x5c
 8007752:	f001 fe61 	bl	8009418 <pvPortMalloc>
 8007756:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	631a      	str	r2, [r3, #48]	; 0x30
 8007764:	e005      	b.n	8007772 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007766:	6978      	ldr	r0, [r7, #20]
 8007768:	f001 ff22 	bl	80095b0 <vPortFree>
 800776c:	e001      	b.n	8007772 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d017      	beq.n	80077a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	2300      	movs	r3, #0
 8007784:	9303      	str	r3, [sp, #12]
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	9302      	str	r3, [sp, #8]
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 f80e 	bl	80077b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800779c:	69f8      	ldr	r0, [r7, #28]
 800779e:	f000 f89b 	bl	80078d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077a2:	2301      	movs	r3, #1
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	e002      	b.n	80077ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077a8:	f04f 33ff 	mov.w	r3, #4294967295
 80077ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077ae:	69bb      	ldr	r3, [r7, #24]
	}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	461a      	mov	r2, r3
 80077d0:	21a5      	movs	r1, #165	; 0xa5
 80077d2:	f002 f83d 	bl	8009850 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077e0:	3b01      	subs	r3, #1
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f023 0307 	bic.w	r3, r3, #7
 80077ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <prvInitialiseNewTask+0x58>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	617b      	str	r3, [r7, #20]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01f      	beq.n	8007856 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007816:	2300      	movs	r3, #0
 8007818:	61fb      	str	r3, [r7, #28]
 800781a:	e012      	b.n	8007842 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	4413      	add	r3, r2
 8007822:	7819      	ldrb	r1, [r3, #0]
 8007824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4413      	add	r3, r2
 800782a:	3334      	adds	r3, #52	; 0x34
 800782c:	460a      	mov	r2, r1
 800782e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	4413      	add	r3, r2
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d006      	beq.n	800784a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	3301      	adds	r3, #1
 8007840:	61fb      	str	r3, [r7, #28]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	2b0f      	cmp	r3, #15
 8007846:	d9e9      	bls.n	800781c <prvInitialiseNewTask+0x64>
 8007848:	e000      	b.n	800784c <prvInitialiseNewTask+0x94>
			{
				break;
 800784a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007854:	e003      	b.n	800785e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	2b37      	cmp	r3, #55	; 0x37
 8007862:	d901      	bls.n	8007868 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007864:	2337      	movs	r3, #55	; 0x37
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800786c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007872:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	2200      	movs	r2, #0
 8007878:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	3304      	adds	r3, #4
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe ffe8 	bl	8006854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	3318      	adds	r3, #24
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe ffe3 	bl	8006854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007892:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	2200      	movs	r2, #0
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	68f9      	ldr	r1, [r7, #12]
 80078b6:	69b8      	ldr	r0, [r7, #24]
 80078b8:	f001 fb5c 	bl	8008f74 <pxPortInitialiseStack>
 80078bc:	4602      	mov	r2, r0
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078ce:	bf00      	nop
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078e0:	f001 fc78 	bl	80091d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078e4:	4b2d      	ldr	r3, [pc, #180]	; (800799c <prvAddNewTaskToReadyList+0xc4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	4a2c      	ldr	r2, [pc, #176]	; (800799c <prvAddNewTaskToReadyList+0xc4>)
 80078ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ee:	4b2c      	ldr	r3, [pc, #176]	; (80079a0 <prvAddNewTaskToReadyList+0xc8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078f6:	4a2a      	ldr	r2, [pc, #168]	; (80079a0 <prvAddNewTaskToReadyList+0xc8>)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078fc:	4b27      	ldr	r3, [pc, #156]	; (800799c <prvAddNewTaskToReadyList+0xc4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d110      	bne.n	8007926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007904:	f000 fc16 	bl	8008134 <prvInitialiseTaskLists>
 8007908:	e00d      	b.n	8007926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800790a:	4b26      	ldr	r3, [pc, #152]	; (80079a4 <prvAddNewTaskToReadyList+0xcc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007912:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <prvAddNewTaskToReadyList+0xc8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	429a      	cmp	r2, r3
 800791e:	d802      	bhi.n	8007926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007920:	4a1f      	ldr	r2, [pc, #124]	; (80079a0 <prvAddNewTaskToReadyList+0xc8>)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007926:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <prvAddNewTaskToReadyList+0xd0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <prvAddNewTaskToReadyList+0xd0>)
 800792e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007930:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <prvAddNewTaskToReadyList+0xd0>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793c:	4b1b      	ldr	r3, [pc, #108]	; (80079ac <prvAddNewTaskToReadyList+0xd4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d903      	bls.n	800794c <prvAddNewTaskToReadyList+0x74>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	4a18      	ldr	r2, [pc, #96]	; (80079ac <prvAddNewTaskToReadyList+0xd4>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4a15      	ldr	r2, [pc, #84]	; (80079b0 <prvAddNewTaskToReadyList+0xd8>)
 800795a:	441a      	add	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fe ff83 	bl	800686e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007968:	f001 fc64 	bl	8009234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800796c:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <prvAddNewTaskToReadyList+0xcc>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00e      	beq.n	8007992 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007974:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <prvAddNewTaskToReadyList+0xc8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	429a      	cmp	r2, r3
 8007980:	d207      	bcs.n	8007992 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <prvAddNewTaskToReadyList+0xdc>)
 8007984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	200008e8 	.word	0x200008e8
 80079a0:	20000414 	.word	0x20000414
 80079a4:	200008f4 	.word	0x200008f4
 80079a8:	20000904 	.word	0x20000904
 80079ac:	200008f0 	.word	0x200008f0
 80079b0:	20000418 	.word	0x20000418
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d017      	beq.n	80079fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079ca:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <vTaskDelay+0x60>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <vTaskDelay+0x30>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60bb      	str	r3, [r7, #8]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079e8:	f000 f880 	bl	8007aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079ec:	2100      	movs	r1, #0
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fec2 	bl	8008778 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079f4:	f000 f888 	bl	8007b08 <xTaskResumeAll>
 80079f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d107      	bne.n	8007a10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a00:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <vTaskDelay+0x64>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20000910 	.word	0x20000910
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	; 0x28
 8007a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a2e:	463a      	mov	r2, r7
 8007a30:	1d39      	adds	r1, r7, #4
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe feb8 	bl	80067ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	9202      	str	r2, [sp, #8]
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	2300      	movs	r3, #0
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	460a      	mov	r2, r1
 8007a4e:	4921      	ldr	r1, [pc, #132]	; (8007ad4 <vTaskStartScheduler+0xb4>)
 8007a50:	4821      	ldr	r0, [pc, #132]	; (8007ad8 <vTaskStartScheduler+0xb8>)
 8007a52:	f7ff fe0f 	bl	8007674 <xTaskCreateStatic>
 8007a56:	4603      	mov	r3, r0
 8007a58:	4a20      	ldr	r2, [pc, #128]	; (8007adc <vTaskStartScheduler+0xbc>)
 8007a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a5c:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <vTaskStartScheduler+0xbc>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a64:	2301      	movs	r3, #1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e001      	b.n	8007a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d102      	bne.n	8007a7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a74:	f000 fed4 	bl	8008820 <xTimerCreateTimerTask>
 8007a78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d116      	bne.n	8007aae <vTaskStartScheduler+0x8e>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	613b      	str	r3, [r7, #16]
}
 8007a92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a94:	4b12      	ldr	r3, [pc, #72]	; (8007ae0 <vTaskStartScheduler+0xc0>)
 8007a96:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a9c:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <vTaskStartScheduler+0xc4>)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007aa2:	4b11      	ldr	r3, [pc, #68]	; (8007ae8 <vTaskStartScheduler+0xc8>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007aa8:	f001 faf2 	bl	8009090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007aac:	e00e      	b.n	8007acc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d10a      	bne.n	8007acc <vTaskStartScheduler+0xac>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	60fb      	str	r3, [r7, #12]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <vTaskStartScheduler+0xaa>
}
 8007acc:	bf00      	nop
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	080098d0 	.word	0x080098d0
 8007ad8:	08008105 	.word	0x08008105
 8007adc:	2000090c 	.word	0x2000090c
 8007ae0:	20000908 	.word	0x20000908
 8007ae4:	200008f4 	.word	0x200008f4
 8007ae8:	200008ec 	.word	0x200008ec

08007aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007af0:	4b04      	ldr	r3, [pc, #16]	; (8007b04 <vTaskSuspendAll+0x18>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a03      	ldr	r2, [pc, #12]	; (8007b04 <vTaskSuspendAll+0x18>)
 8007af8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007afa:	bf00      	nop
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	20000910 	.word	0x20000910

08007b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b16:	4b42      	ldr	r3, [pc, #264]	; (8007c20 <xTaskResumeAll+0x118>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	603b      	str	r3, [r7, #0]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b34:	f001 fb4e 	bl	80091d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b38:	4b39      	ldr	r3, [pc, #228]	; (8007c20 <xTaskResumeAll+0x118>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	4a38      	ldr	r2, [pc, #224]	; (8007c20 <xTaskResumeAll+0x118>)
 8007b40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b42:	4b37      	ldr	r3, [pc, #220]	; (8007c20 <xTaskResumeAll+0x118>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d162      	bne.n	8007c10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b4a:	4b36      	ldr	r3, [pc, #216]	; (8007c24 <xTaskResumeAll+0x11c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d05e      	beq.n	8007c10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b52:	e02f      	b.n	8007bb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b54:	4b34      	ldr	r3, [pc, #208]	; (8007c28 <xTaskResumeAll+0x120>)
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3318      	adds	r3, #24
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fee1 	bl	8006928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe fedc 	bl	8006928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	4b2d      	ldr	r3, [pc, #180]	; (8007c2c <xTaskResumeAll+0x124>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d903      	bls.n	8007b84 <xTaskResumeAll+0x7c>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	4a2a      	ldr	r2, [pc, #168]	; (8007c2c <xTaskResumeAll+0x124>)
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4a27      	ldr	r2, [pc, #156]	; (8007c30 <xTaskResumeAll+0x128>)
 8007b92:	441a      	add	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f7fe fe67 	bl	800686e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba4:	4b23      	ldr	r3, [pc, #140]	; (8007c34 <xTaskResumeAll+0x12c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d302      	bcc.n	8007bb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007bae:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <xTaskResumeAll+0x130>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bb4:	4b1c      	ldr	r3, [pc, #112]	; (8007c28 <xTaskResumeAll+0x120>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1cb      	bne.n	8007b54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bc2:	f000 fb55 	bl	8008270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bc6:	4b1d      	ldr	r3, [pc, #116]	; (8007c3c <xTaskResumeAll+0x134>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d010      	beq.n	8007bf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bd2:	f000 f847 	bl	8007c64 <xTaskIncrementTick>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007bdc:	4b16      	ldr	r3, [pc, #88]	; (8007c38 <xTaskResumeAll+0x130>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1f1      	bne.n	8007bd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <xTaskResumeAll+0x134>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bf4:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <xTaskResumeAll+0x130>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c00:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <xTaskResumeAll+0x138>)
 8007c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c10:	f001 fb10 	bl	8009234 <vPortExitCritical>

	return xAlreadyYielded;
 8007c14:	68bb      	ldr	r3, [r7, #8]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000910 	.word	0x20000910
 8007c24:	200008e8 	.word	0x200008e8
 8007c28:	200008a8 	.word	0x200008a8
 8007c2c:	200008f0 	.word	0x200008f0
 8007c30:	20000418 	.word	0x20000418
 8007c34:	20000414 	.word	0x20000414
 8007c38:	200008fc 	.word	0x200008fc
 8007c3c:	200008f8 	.word	0x200008f8
 8007c40:	e000ed04 	.word	0xe000ed04

08007c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c4a:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <xTaskGetTickCount+0x1c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c50:	687b      	ldr	r3, [r7, #4]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	200008ec 	.word	0x200008ec

08007c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6e:	4b4f      	ldr	r3, [pc, #316]	; (8007dac <xTaskIncrementTick+0x148>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f040 808f 	bne.w	8007d96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c78:	4b4d      	ldr	r3, [pc, #308]	; (8007db0 <xTaskIncrementTick+0x14c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c80:	4a4b      	ldr	r2, [pc, #300]	; (8007db0 <xTaskIncrementTick+0x14c>)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d120      	bne.n	8007cce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c8c:	4b49      	ldr	r3, [pc, #292]	; (8007db4 <xTaskIncrementTick+0x150>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <xTaskIncrementTick+0x48>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	603b      	str	r3, [r7, #0]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xTaskIncrementTick+0x46>
 8007cac:	4b41      	ldr	r3, [pc, #260]	; (8007db4 <xTaskIncrementTick+0x150>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	4b41      	ldr	r3, [pc, #260]	; (8007db8 <xTaskIncrementTick+0x154>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a3f      	ldr	r2, [pc, #252]	; (8007db4 <xTaskIncrementTick+0x150>)
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	4a3f      	ldr	r2, [pc, #252]	; (8007db8 <xTaskIncrementTick+0x154>)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	4b3e      	ldr	r3, [pc, #248]	; (8007dbc <xTaskIncrementTick+0x158>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	4a3d      	ldr	r2, [pc, #244]	; (8007dbc <xTaskIncrementTick+0x158>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	f000 fad1 	bl	8008270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cce:	4b3c      	ldr	r3, [pc, #240]	; (8007dc0 <xTaskIncrementTick+0x15c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d349      	bcc.n	8007d6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd8:	4b36      	ldr	r3, [pc, #216]	; (8007db4 <xTaskIncrementTick+0x150>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d104      	bne.n	8007cec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce2:	4b37      	ldr	r3, [pc, #220]	; (8007dc0 <xTaskIncrementTick+0x15c>)
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce8:	601a      	str	r2, [r3, #0]
					break;
 8007cea:	e03f      	b.n	8007d6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cec:	4b31      	ldr	r3, [pc, #196]	; (8007db4 <xTaskIncrementTick+0x150>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d203      	bcs.n	8007d0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d04:	4a2e      	ldr	r2, [pc, #184]	; (8007dc0 <xTaskIncrementTick+0x15c>)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d0a:	e02f      	b.n	8007d6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	3304      	adds	r3, #4
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fe09 	bl	8006928 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	3318      	adds	r3, #24
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fe00 	bl	8006928 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2c:	4b25      	ldr	r3, [pc, #148]	; (8007dc4 <xTaskIncrementTick+0x160>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d903      	bls.n	8007d3c <xTaskIncrementTick+0xd8>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	4a22      	ldr	r2, [pc, #136]	; (8007dc4 <xTaskIncrementTick+0x160>)
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4a1f      	ldr	r2, [pc, #124]	; (8007dc8 <xTaskIncrementTick+0x164>)
 8007d4a:	441a      	add	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f7fe fd8b 	bl	800686e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	4b1b      	ldr	r3, [pc, #108]	; (8007dcc <xTaskIncrementTick+0x168>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d3b8      	bcc.n	8007cd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d66:	2301      	movs	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d6a:	e7b5      	b.n	8007cd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d6c:	4b17      	ldr	r3, [pc, #92]	; (8007dcc <xTaskIncrementTick+0x168>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d72:	4915      	ldr	r1, [pc, #84]	; (8007dc8 <xTaskIncrementTick+0x164>)
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d901      	bls.n	8007d88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d84:	2301      	movs	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d88:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <xTaskIncrementTick+0x16c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007d90:	2301      	movs	r3, #1
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	e004      	b.n	8007da0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d96:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <xTaskIncrementTick+0x170>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	4a0d      	ldr	r2, [pc, #52]	; (8007dd4 <xTaskIncrementTick+0x170>)
 8007d9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007da0:	697b      	ldr	r3, [r7, #20]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000910 	.word	0x20000910
 8007db0:	200008ec 	.word	0x200008ec
 8007db4:	200008a0 	.word	0x200008a0
 8007db8:	200008a4 	.word	0x200008a4
 8007dbc:	20000900 	.word	0x20000900
 8007dc0:	20000908 	.word	0x20000908
 8007dc4:	200008f0 	.word	0x200008f0
 8007dc8:	20000418 	.word	0x20000418
 8007dcc:	20000414 	.word	0x20000414
 8007dd0:	200008fc 	.word	0x200008fc
 8007dd4:	200008f8 	.word	0x200008f8

08007dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dde:	4b28      	ldr	r3, [pc, #160]	; (8007e80 <vTaskSwitchContext+0xa8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007de6:	4b27      	ldr	r3, [pc, #156]	; (8007e84 <vTaskSwitchContext+0xac>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dec:	e041      	b.n	8007e72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007dee:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <vTaskSwitchContext+0xac>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df4:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <vTaskSwitchContext+0xb0>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	e010      	b.n	8007e1e <vTaskSwitchContext+0x46>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	607b      	str	r3, [r7, #4]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <vTaskSwitchContext+0x3e>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	491b      	ldr	r1, [pc, #108]	; (8007e8c <vTaskSwitchContext+0xb4>)
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d0e4      	beq.n	8007dfc <vTaskSwitchContext+0x24>
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <vTaskSwitchContext+0xb4>)
 8007e3e:	4413      	add	r3, r2
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	605a      	str	r2, [r3, #4]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	3308      	adds	r3, #8
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d104      	bne.n	8007e62 <vTaskSwitchContext+0x8a>
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	605a      	str	r2, [r3, #4]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <vTaskSwitchContext+0xb8>)
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	4a06      	ldr	r2, [pc, #24]	; (8007e88 <vTaskSwitchContext+0xb0>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6013      	str	r3, [r2, #0]
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000910 	.word	0x20000910
 8007e84:	200008fc 	.word	0x200008fc
 8007e88:	200008f0 	.word	0x200008f0
 8007e8c:	20000418 	.word	0x20000418
 8007e90:	20000414 	.word	0x20000414

08007e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	60fb      	str	r3, [r7, #12]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eba:	4b07      	ldr	r3, [pc, #28]	; (8007ed8 <vTaskPlaceOnEventList+0x44>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3318      	adds	r3, #24
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fe fcf7 	bl	80068b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ec8:	2101      	movs	r1, #1
 8007eca:	6838      	ldr	r0, [r7, #0]
 8007ecc:	f000 fc54 	bl	8008778 <prvAddCurrentTaskToDelayedList>
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000414 	.word	0x20000414

08007edc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	617b      	str	r3, [r7, #20]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f04:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3318      	adds	r3, #24
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7fe fcae 	bl	800686e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	68b8      	ldr	r0, [r7, #8]
 8007f22:	f000 fc29 	bl	8008778 <prvAddCurrentTaskToDelayedList>
	}
 8007f26:	bf00      	nop
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20000414 	.word	0x20000414

08007f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	60fb      	str	r3, [r7, #12]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	3318      	adds	r3, #24
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fe fcdf 	bl	8006928 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f6a:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <xTaskRemoveFromEventList+0xb0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d11d      	bne.n	8007fae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	3304      	adds	r3, #4
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fcd6 	bl	8006928 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <xTaskRemoveFromEventList+0xb4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d903      	bls.n	8007f90 <xTaskRemoveFromEventList+0x5c>
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	4a16      	ldr	r2, [pc, #88]	; (8007fe8 <xTaskRemoveFromEventList+0xb4>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a13      	ldr	r2, [pc, #76]	; (8007fec <xTaskRemoveFromEventList+0xb8>)
 8007f9e:	441a      	add	r2, r3
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fe fc61 	bl	800686e <vListInsertEnd>
 8007fac:	e005      	b.n	8007fba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	480e      	ldr	r0, [pc, #56]	; (8007ff0 <xTaskRemoveFromEventList+0xbc>)
 8007fb6:	f7fe fc5a 	bl	800686e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <xTaskRemoveFromEventList+0xc0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d905      	bls.n	8007fd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <xTaskRemoveFromEventList+0xc4>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	e001      	b.n	8007fd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fd8:	697b      	ldr	r3, [r7, #20]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000910 	.word	0x20000910
 8007fe8:	200008f0 	.word	0x200008f0
 8007fec:	20000418 	.word	0x20000418
 8007ff0:	200008a8 	.word	0x200008a8
 8007ff4:	20000414 	.word	0x20000414
 8007ff8:	200008fc 	.word	0x200008fc

08007ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <vTaskInternalSetTimeOutState+0x24>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <vTaskInternalSetTimeOutState+0x28>)
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	605a      	str	r2, [r3, #4]
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	20000900 	.word	0x20000900
 8008024:	200008ec 	.word	0x200008ec

08008028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	613b      	str	r3, [r7, #16]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800806a:	f001 f8b3 	bl	80091d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800806e:	4b1d      	ldr	r3, [pc, #116]	; (80080e4 <xTaskCheckForTimeOut+0xbc>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d102      	bne.n	800808e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	e023      	b.n	80080d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <xTaskCheckForTimeOut+0xc0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d007      	beq.n	80080aa <xTaskCheckForTimeOut+0x82>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d302      	bcc.n	80080aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	e015      	b.n	80080d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d20b      	bcs.n	80080cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	1ad2      	subs	r2, r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff ff9b 	bl	8007ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	61fb      	str	r3, [r7, #28]
 80080ca:	e004      	b.n	80080d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080d2:	2301      	movs	r3, #1
 80080d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080d6:	f001 f8ad 	bl	8009234 <vPortExitCritical>

	return xReturn;
 80080da:	69fb      	ldr	r3, [r7, #28]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	200008ec 	.word	0x200008ec
 80080e8:	20000900 	.word	0x20000900

080080ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080f0:	4b03      	ldr	r3, [pc, #12]	; (8008100 <vTaskMissedYield+0x14>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
}
 80080f6:	bf00      	nop
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	200008fc 	.word	0x200008fc

08008104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800810c:	f000 f852 	bl	80081b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008110:	4b06      	ldr	r3, [pc, #24]	; (800812c <prvIdleTask+0x28>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d9f9      	bls.n	800810c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008118:	4b05      	ldr	r3, [pc, #20]	; (8008130 <prvIdleTask+0x2c>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008128:	e7f0      	b.n	800810c <prvIdleTask+0x8>
 800812a:	bf00      	nop
 800812c:	20000418 	.word	0x20000418
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800813a:	2300      	movs	r3, #0
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	e00c      	b.n	800815a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4a12      	ldr	r2, [pc, #72]	; (8008194 <prvInitialiseTaskLists+0x60>)
 800814c:	4413      	add	r3, r2
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fb60 	bl	8006814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3301      	adds	r3, #1
 8008158:	607b      	str	r3, [r7, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b37      	cmp	r3, #55	; 0x37
 800815e:	d9ef      	bls.n	8008140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008160:	480d      	ldr	r0, [pc, #52]	; (8008198 <prvInitialiseTaskLists+0x64>)
 8008162:	f7fe fb57 	bl	8006814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008166:	480d      	ldr	r0, [pc, #52]	; (800819c <prvInitialiseTaskLists+0x68>)
 8008168:	f7fe fb54 	bl	8006814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800816c:	480c      	ldr	r0, [pc, #48]	; (80081a0 <prvInitialiseTaskLists+0x6c>)
 800816e:	f7fe fb51 	bl	8006814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008172:	480c      	ldr	r0, [pc, #48]	; (80081a4 <prvInitialiseTaskLists+0x70>)
 8008174:	f7fe fb4e 	bl	8006814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008178:	480b      	ldr	r0, [pc, #44]	; (80081a8 <prvInitialiseTaskLists+0x74>)
 800817a:	f7fe fb4b 	bl	8006814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <prvInitialiseTaskLists+0x78>)
 8008180:	4a05      	ldr	r2, [pc, #20]	; (8008198 <prvInitialiseTaskLists+0x64>)
 8008182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008184:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <prvInitialiseTaskLists+0x7c>)
 8008186:	4a05      	ldr	r2, [pc, #20]	; (800819c <prvInitialiseTaskLists+0x68>)
 8008188:	601a      	str	r2, [r3, #0]
}
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20000418 	.word	0x20000418
 8008198:	20000878 	.word	0x20000878
 800819c:	2000088c 	.word	0x2000088c
 80081a0:	200008a8 	.word	0x200008a8
 80081a4:	200008bc 	.word	0x200008bc
 80081a8:	200008d4 	.word	0x200008d4
 80081ac:	200008a0 	.word	0x200008a0
 80081b0:	200008a4 	.word	0x200008a4

080081b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081ba:	e019      	b.n	80081f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081bc:	f001 f80a 	bl	80091d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c0:	4b10      	ldr	r3, [pc, #64]	; (8008204 <prvCheckTasksWaitingTermination+0x50>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3304      	adds	r3, #4
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe fbab 	bl	8006928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081d2:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <prvCheckTasksWaitingTermination+0x54>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	4a0b      	ldr	r2, [pc, #44]	; (8008208 <prvCheckTasksWaitingTermination+0x54>)
 80081da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081dc:	4b0b      	ldr	r3, [pc, #44]	; (800820c <prvCheckTasksWaitingTermination+0x58>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	4a0a      	ldr	r2, [pc, #40]	; (800820c <prvCheckTasksWaitingTermination+0x58>)
 80081e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081e6:	f001 f825 	bl	8009234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f810 	bl	8008210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081f0:	4b06      	ldr	r3, [pc, #24]	; (800820c <prvCheckTasksWaitingTermination+0x58>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e1      	bne.n	80081bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200008bc 	.word	0x200008bc
 8008208:	200008e8 	.word	0x200008e8
 800820c:	200008d0 	.word	0x200008d0

08008210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800821e:	2b00      	cmp	r3, #0
 8008220:	d108      	bne.n	8008234 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008226:	4618      	mov	r0, r3
 8008228:	f001 f9c2 	bl	80095b0 <vPortFree>
				vPortFree( pxTCB );
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f9bf 	bl	80095b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008232:	e018      	b.n	8008266 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800823a:	2b01      	cmp	r3, #1
 800823c:	d103      	bne.n	8008246 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 f9b6 	bl	80095b0 <vPortFree>
	}
 8008244:	e00f      	b.n	8008266 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800824c:	2b02      	cmp	r3, #2
 800824e:	d00a      	beq.n	8008266 <prvDeleteTCB+0x56>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	60fb      	str	r3, [r7, #12]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <prvDeleteTCB+0x54>
	}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <prvResetNextTaskUnblockTime+0x38>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d104      	bne.n	800828a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <prvResetNextTaskUnblockTime+0x3c>)
 8008282:	f04f 32ff 	mov.w	r2, #4294967295
 8008286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008288:	e008      	b.n	800829c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <prvResetNextTaskUnblockTime+0x38>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	4a04      	ldr	r2, [pc, #16]	; (80082ac <prvResetNextTaskUnblockTime+0x3c>)
 800829a:	6013      	str	r3, [r2, #0]
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	200008a0 	.word	0x200008a0
 80082ac:	20000908 	.word	0x20000908

080082b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082b6:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <xTaskGetSchedulerState+0x34>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d102      	bne.n	80082c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082be:	2301      	movs	r3, #1
 80082c0:	607b      	str	r3, [r7, #4]
 80082c2:	e008      	b.n	80082d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c4:	4b08      	ldr	r3, [pc, #32]	; (80082e8 <xTaskGetSchedulerState+0x38>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082cc:	2302      	movs	r3, #2
 80082ce:	607b      	str	r3, [r7, #4]
 80082d0:	e001      	b.n	80082d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082d6:	687b      	ldr	r3, [r7, #4]
	}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	200008f4 	.word	0x200008f4
 80082e8:	20000910 	.word	0x20000910

080082ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d051      	beq.n	80083a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008306:	4b2a      	ldr	r3, [pc, #168]	; (80083b0 <xTaskPriorityInherit+0xc4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	429a      	cmp	r2, r3
 800830e:	d241      	bcs.n	8008394 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	db06      	blt.n	8008326 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008318:	4b25      	ldr	r3, [pc, #148]	; (80083b0 <xTaskPriorityInherit+0xc4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6959      	ldr	r1, [r3, #20]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4a1f      	ldr	r2, [pc, #124]	; (80083b4 <xTaskPriorityInherit+0xc8>)
 8008338:	4413      	add	r3, r2
 800833a:	4299      	cmp	r1, r3
 800833c:	d122      	bne.n	8008384 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	3304      	adds	r3, #4
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe faf0 	bl	8006928 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008348:	4b19      	ldr	r3, [pc, #100]	; (80083b0 <xTaskPriorityInherit+0xc4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008356:	4b18      	ldr	r3, [pc, #96]	; (80083b8 <xTaskPriorityInherit+0xcc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d903      	bls.n	8008366 <xTaskPriorityInherit+0x7a>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <xTaskPriorityInherit+0xcc>)
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4a10      	ldr	r2, [pc, #64]	; (80083b4 <xTaskPriorityInherit+0xc8>)
 8008374:	441a      	add	r2, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	3304      	adds	r3, #4
 800837a:	4619      	mov	r1, r3
 800837c:	4610      	mov	r0, r2
 800837e:	f7fe fa76 	bl	800686e <vListInsertEnd>
 8008382:	e004      	b.n	800838e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <xTaskPriorityInherit+0xc4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800838e:	2301      	movs	r3, #1
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e008      	b.n	80083a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <xTaskPriorityInherit+0xc4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	429a      	cmp	r2, r3
 80083a0:	d201      	bcs.n	80083a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80083a2:	2301      	movs	r3, #1
 80083a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083a6:	68fb      	ldr	r3, [r7, #12]
	}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000414 	.word	0x20000414
 80083b4:	20000418 	.word	0x20000418
 80083b8:	200008f0 	.word	0x200008f0

080083bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d056      	beq.n	8008480 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083d2:	4b2e      	ldr	r3, [pc, #184]	; (800848c <xTaskPriorityDisinherit+0xd0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d00a      	beq.n	80083f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	60fb      	str	r3, [r7, #12]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10a      	bne.n	8008410 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	60bb      	str	r3, [r7, #8]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	1e5a      	subs	r2, r3, #1
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008422:	429a      	cmp	r2, r3
 8008424:	d02c      	beq.n	8008480 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842a:	2b00      	cmp	r3, #0
 800842c:	d128      	bne.n	8008480 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	3304      	adds	r3, #4
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fa78 	bl	8006928 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008450:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <xTaskPriorityDisinherit+0xd4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d903      	bls.n	8008460 <xTaskPriorityDisinherit+0xa4>
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	4a0c      	ldr	r2, [pc, #48]	; (8008490 <xTaskPriorityDisinherit+0xd4>)
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4a09      	ldr	r2, [pc, #36]	; (8008494 <xTaskPriorityDisinherit+0xd8>)
 800846e:	441a      	add	r2, r3
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	3304      	adds	r3, #4
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f7fe f9f9 	bl	800686e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800847c:	2301      	movs	r3, #1
 800847e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008480:	697b      	ldr	r3, [r7, #20]
	}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000414 	.word	0x20000414
 8008490:	200008f0 	.word	0x200008f0
 8008494:	20000418 	.word	0x20000418

08008498 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80084a6:	2301      	movs	r3, #1
 80084a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d06a      	beq.n	8008586 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	60fb      	str	r3, [r7, #12]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d902      	bls.n	80084de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	e002      	b.n	80084e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d04b      	beq.n	8008586 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d146      	bne.n	8008586 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80084f8:	4b25      	ldr	r3, [pc, #148]	; (8008590 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d10a      	bne.n	8008518 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	60bb      	str	r3, [r7, #8]
}
 8008514:	bf00      	nop
 8008516:	e7fe      	b.n	8008516 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	69fa      	ldr	r2, [r7, #28]
 8008522:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	2b00      	cmp	r3, #0
 800852a:	db04      	blt.n	8008536 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	6959      	ldr	r1, [r3, #20]
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4a13      	ldr	r2, [pc, #76]	; (8008594 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008546:	4413      	add	r3, r2
 8008548:	4299      	cmp	r1, r3
 800854a:	d11c      	bne.n	8008586 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	3304      	adds	r3, #4
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe f9e9 	bl	8006928 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855a:	4b0f      	ldr	r3, [pc, #60]	; (8008598 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d903      	bls.n	800856a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4a07      	ldr	r2, [pc, #28]	; (8008594 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008578:	441a      	add	r2, r3
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	3304      	adds	r3, #4
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f7fe f974 	bl	800686e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008586:	bf00      	nop
 8008588:	3720      	adds	r7, #32
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000414 	.word	0x20000414
 8008594:	20000418 	.word	0x20000418
 8008598:	200008f0 	.word	0x200008f0

0800859c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d004      	beq.n	80085b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80085a8:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ae:	3201      	adds	r2, #1
 80085b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80085b2:	4b03      	ldr	r3, [pc, #12]	; (80085c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085b4:	681b      	ldr	r3, [r3, #0]
	}
 80085b6:	4618      	mov	r0, r3
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	20000414 	.word	0x20000414

080085c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80085ce:	f000 fe01 	bl	80091d4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80085d2:	4b1e      	ldr	r3, [pc, #120]	; (800864c <ulTaskNotifyTake+0x88>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d113      	bne.n	8008604 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <ulTaskNotifyTake+0x88>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085ec:	2101      	movs	r1, #1
 80085ee:	6838      	ldr	r0, [r7, #0]
 80085f0:	f000 f8c2 	bl	8008778 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80085f4:	4b16      	ldr	r3, [pc, #88]	; (8008650 <ulTaskNotifyTake+0x8c>)
 80085f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008604:	f000 fe16 	bl	8009234 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008608:	f000 fde4 	bl	80091d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800860c:	4b0f      	ldr	r3, [pc, #60]	; (800864c <ulTaskNotifyTake+0x88>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008612:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00c      	beq.n	8008634 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <ulTaskNotifyTake+0x88>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2200      	movs	r2, #0
 8008626:	655a      	str	r2, [r3, #84]	; 0x54
 8008628:	e004      	b.n	8008634 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800862a:	4b08      	ldr	r3, [pc, #32]	; (800864c <ulTaskNotifyTake+0x88>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	3a01      	subs	r2, #1
 8008632:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <ulTaskNotifyTake+0x88>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800863e:	f000 fdf9 	bl	8009234 <vPortExitCritical>

		return ulReturn;
 8008642:	68fb      	ldr	r3, [r7, #12]
	}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20000414 	.word	0x20000414
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08a      	sub	sp, #40	; 0x28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	61bb      	str	r3, [r7, #24]
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800867a:	f000 fe8d 	bl	8009398 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8008682:	f3ef 8211 	mrs	r2, BASEPRI
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	617a      	str	r2, [r7, #20]
 8008698:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800869a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800869c:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80086a4:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	2202      	movs	r2, #2
 80086aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80086b8:	7ffb      	ldrb	r3, [r7, #31]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d146      	bne.n	800874c <vTaskNotifyGiveFromISR+0xf8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	60fb      	str	r3, [r7, #12]
}
 80086d8:	bf00      	nop
 80086da:	e7fe      	b.n	80086da <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086dc:	4b20      	ldr	r3, [pc, #128]	; (8008760 <vTaskNotifyGiveFromISR+0x10c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d11d      	bne.n	8008720 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	3304      	adds	r3, #4
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe f91d 	bl	8006928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f2:	4b1c      	ldr	r3, [pc, #112]	; (8008764 <vTaskNotifyGiveFromISR+0x110>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d903      	bls.n	8008702 <vTaskNotifyGiveFromISR+0xae>
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	4a19      	ldr	r2, [pc, #100]	; (8008764 <vTaskNotifyGiveFromISR+0x110>)
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a16      	ldr	r2, [pc, #88]	; (8008768 <vTaskNotifyGiveFromISR+0x114>)
 8008710:	441a      	add	r2, r3
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fe f8a8 	bl	800686e <vListInsertEnd>
 800871e:	e005      	b.n	800872c <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	3318      	adds	r3, #24
 8008724:	4619      	mov	r1, r3
 8008726:	4811      	ldr	r0, [pc, #68]	; (800876c <vTaskNotifyGiveFromISR+0x118>)
 8008728:	f7fe f8a1 	bl	800686e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008730:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <vTaskNotifyGiveFromISR+0x11c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	429a      	cmp	r2, r3
 8008738:	d908      	bls.n	800874c <vTaskNotifyGiveFromISR+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <vTaskNotifyGiveFromISR+0xf2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2201      	movs	r2, #1
 8008744:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <vTaskNotifyGiveFromISR+0x120>)
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f383 8811 	msr	BASEPRI, r3
}
 8008756:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8008758:	bf00      	nop
 800875a:	3728      	adds	r7, #40	; 0x28
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000910 	.word	0x20000910
 8008764:	200008f0 	.word	0x200008f0
 8008768:	20000418 	.word	0x20000418
 800876c:	200008a8 	.word	0x200008a8
 8008770:	20000414 	.word	0x20000414
 8008774:	200008fc 	.word	0x200008fc

08008778 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008782:	4b21      	ldr	r3, [pc, #132]	; (8008808 <prvAddCurrentTaskToDelayedList+0x90>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008788:	4b20      	ldr	r3, [pc, #128]	; (800880c <prvAddCurrentTaskToDelayedList+0x94>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3304      	adds	r3, #4
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe f8ca 	bl	8006928 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879a:	d10a      	bne.n	80087b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d007      	beq.n	80087b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087a2:	4b1a      	ldr	r3, [pc, #104]	; (800880c <prvAddCurrentTaskToDelayedList+0x94>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3304      	adds	r3, #4
 80087a8:	4619      	mov	r1, r3
 80087aa:	4819      	ldr	r0, [pc, #100]	; (8008810 <prvAddCurrentTaskToDelayedList+0x98>)
 80087ac:	f7fe f85f 	bl	800686e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087b0:	e026      	b.n	8008800 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087ba:	4b14      	ldr	r3, [pc, #80]	; (800880c <prvAddCurrentTaskToDelayedList+0x94>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d209      	bcs.n	80087de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087ca:	4b12      	ldr	r3, [pc, #72]	; (8008814 <prvAddCurrentTaskToDelayedList+0x9c>)
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	4b0f      	ldr	r3, [pc, #60]	; (800880c <prvAddCurrentTaskToDelayedList+0x94>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7fe f86d 	bl	80068b6 <vListInsert>
}
 80087dc:	e010      	b.n	8008800 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087de:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4b0a      	ldr	r3, [pc, #40]	; (800880c <prvAddCurrentTaskToDelayedList+0x94>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3304      	adds	r3, #4
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f7fe f863 	bl	80068b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087f0:	4b0a      	ldr	r3, [pc, #40]	; (800881c <prvAddCurrentTaskToDelayedList+0xa4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d202      	bcs.n	8008800 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087fa:	4a08      	ldr	r2, [pc, #32]	; (800881c <prvAddCurrentTaskToDelayedList+0xa4>)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6013      	str	r3, [r2, #0]
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	200008ec 	.word	0x200008ec
 800880c:	20000414 	.word	0x20000414
 8008810:	200008d4 	.word	0x200008d4
 8008814:	200008a4 	.word	0x200008a4
 8008818:	200008a0 	.word	0x200008a0
 800881c:	20000908 	.word	0x20000908

08008820 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08a      	sub	sp, #40	; 0x28
 8008824:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800882a:	f000 fb63 	bl	8008ef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800882e:	4b1c      	ldr	r3, [pc, #112]	; (80088a0 <xTimerCreateTimerTask+0x80>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d021      	beq.n	800887a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800883a:	2300      	movs	r3, #0
 800883c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800883e:	1d3a      	adds	r2, r7, #4
 8008840:	f107 0108 	add.w	r1, r7, #8
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	4618      	mov	r0, r3
 800884a:	f7fd ffc9 	bl	80067e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	9202      	str	r2, [sp, #8]
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	2302      	movs	r3, #2
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	2300      	movs	r3, #0
 800885e:	460a      	mov	r2, r1
 8008860:	4910      	ldr	r1, [pc, #64]	; (80088a4 <xTimerCreateTimerTask+0x84>)
 8008862:	4811      	ldr	r0, [pc, #68]	; (80088a8 <xTimerCreateTimerTask+0x88>)
 8008864:	f7fe ff06 	bl	8007674 <xTaskCreateStatic>
 8008868:	4603      	mov	r3, r0
 800886a:	4a10      	ldr	r2, [pc, #64]	; (80088ac <xTimerCreateTimerTask+0x8c>)
 800886c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800886e:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <xTimerCreateTimerTask+0x8c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008876:	2301      	movs	r3, #1
 8008878:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	613b      	str	r3, [r7, #16]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008896:	697b      	ldr	r3, [r7, #20]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000944 	.word	0x20000944
 80088a4:	080098d8 	.word	0x080098d8
 80088a8:	08008a9d 	.word	0x08008a9d
 80088ac:	20000948 	.word	0x20000948

080088b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80088be:	202c      	movs	r0, #44	; 0x2c
 80088c0:	f000 fdaa 	bl	8009418 <pvPortMalloc>
 80088c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00d      	beq.n	80088e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f805 	bl	80088f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80088e8:	697b      	ldr	r3, [r7, #20]
	}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
 80088fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	617b      	str	r3, [r7, #20]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	2b00      	cmp	r3, #0
 8008920:	d01e      	beq.n	8008960 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008922:	f000 fae7 	bl	8008ef4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	6a3a      	ldr	r2, [r7, #32]
 800893c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	3304      	adds	r3, #4
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd ff86 	bl	8006854 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008954:	f043 0304 	orr.w	r3, r3, #4
 8008958:	b2da      	uxtb	r2, r3
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008960:	bf00      	nop
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08a      	sub	sp, #40	; 0x28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008976:	2300      	movs	r3, #0
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	623b      	str	r3, [r7, #32]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008996:	4b1a      	ldr	r3, [pc, #104]	; (8008a00 <xTimerGenericCommand+0x98>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d02a      	beq.n	80089f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	dc18      	bgt.n	80089e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089b0:	f7ff fc7e 	bl	80082b0 <xTaskGetSchedulerState>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d109      	bne.n	80089ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089ba:	4b11      	ldr	r3, [pc, #68]	; (8008a00 <xTimerGenericCommand+0x98>)
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f107 0110 	add.w	r1, r7, #16
 80089c2:	2300      	movs	r3, #0
 80089c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c6:	f7fe f949 	bl	8006c5c <xQueueGenericSend>
 80089ca:	6278      	str	r0, [r7, #36]	; 0x24
 80089cc:	e012      	b.n	80089f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089ce:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <xTimerGenericCommand+0x98>)
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	f107 0110 	add.w	r1, r7, #16
 80089d6:	2300      	movs	r3, #0
 80089d8:	2200      	movs	r2, #0
 80089da:	f7fe f93f 	bl	8006c5c <xQueueGenericSend>
 80089de:	6278      	str	r0, [r7, #36]	; 0x24
 80089e0:	e008      	b.n	80089f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089e2:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <xTimerGenericCommand+0x98>)
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f107 0110 	add.w	r1, r7, #16
 80089ea:	2300      	movs	r3, #0
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	f7fe fa33 	bl	8006e58 <xQueueGenericSendFromISR>
 80089f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3728      	adds	r7, #40	; 0x28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000944 	.word	0x20000944

08008a04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a0e:	4b22      	ldr	r3, [pc, #136]	; (8008a98 <prvProcessExpiredTimer+0x94>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fd ff83 	bl	8006928 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d022      	beq.n	8008a76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	699a      	ldr	r2, [r3, #24]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	18d1      	adds	r1, r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	6978      	ldr	r0, [r7, #20]
 8008a3e:	f000 f8d1 	bl	8008be4 <prvInsertTimerInActiveList>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01f      	beq.n	8008a88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	2100      	movs	r1, #0
 8008a52:	6978      	ldr	r0, [r7, #20]
 8008a54:	f7ff ff88 	bl	8008968 <xTimerGenericCommand>
 8008a58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d113      	bne.n	8008a88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60fb      	str	r3, [r7, #12]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	6978      	ldr	r0, [r7, #20]
 8008a8e:	4798      	blx	r3
}
 8008a90:	bf00      	nop
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	2000093c 	.word	0x2000093c

08008a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f857 	bl	8008b5c <prvGetNextExpireTime>
 8008aae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f803 	bl	8008ac0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008aba:	f000 f8d5 	bl	8008c68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008abe:	e7f1      	b.n	8008aa4 <prvTimerTask+0x8>

08008ac0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008aca:	f7ff f80f 	bl	8007aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 f866 	bl	8008ba4 <prvSampleTimeNow>
 8008ad8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d130      	bne.n	8008b42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <prvProcessTimerOrBlockTask+0x3c>
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d806      	bhi.n	8008afc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008aee:	f7ff f80b 	bl	8007b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008af2:	68f9      	ldr	r1, [r7, #12]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff ff85 	bl	8008a04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008afa:	e024      	b.n	8008b46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d008      	beq.n	8008b14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b02:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <prvProcessTimerOrBlockTask+0x90>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <prvProcessTimerOrBlockTask+0x50>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <prvProcessTimerOrBlockTask+0x52>
 8008b10:	2300      	movs	r3, #0
 8008b12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <prvProcessTimerOrBlockTask+0x94>)
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	4619      	mov	r1, r3
 8008b22:	f7fe fd73 	bl	800760c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b26:	f7fe ffef 	bl	8007b08 <xTaskResumeAll>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10a      	bne.n	8008b46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b30:	4b09      	ldr	r3, [pc, #36]	; (8008b58 <prvProcessTimerOrBlockTask+0x98>)
 8008b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	f3bf 8f6f 	isb	sy
}
 8008b40:	e001      	b.n	8008b46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b42:	f7fe ffe1 	bl	8007b08 <xTaskResumeAll>
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000940 	.word	0x20000940
 8008b54:	20000944 	.word	0x20000944
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b64:	4b0e      	ldr	r3, [pc, #56]	; (8008ba0 <prvGetNextExpireTime+0x44>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <prvGetNextExpireTime+0x16>
 8008b6e:	2201      	movs	r2, #1
 8008b70:	e000      	b.n	8008b74 <prvGetNextExpireTime+0x18>
 8008b72:	2200      	movs	r2, #0
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d105      	bne.n	8008b8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <prvGetNextExpireTime+0x44>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e001      	b.n	8008b90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b90:	68fb      	ldr	r3, [r7, #12]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	2000093c 	.word	0x2000093c

08008ba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bac:	f7ff f84a 	bl	8007c44 <xTaskGetTickCount>
 8008bb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bb2:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <prvSampleTimeNow+0x3c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d205      	bcs.n	8008bc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008bbc:	f000 f936 	bl	8008e2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	e002      	b.n	8008bce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bce:	4a04      	ldr	r2, [pc, #16]	; (8008be0 <prvSampleTimeNow+0x3c>)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	2000094c 	.word	0x2000094c

08008be4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d812      	bhi.n	8008c30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d302      	bcc.n	8008c1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e01b      	b.n	8008c56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c1e:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <prvInsertTimerInActiveList+0x7c>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f7fd fe44 	bl	80068b6 <vListInsert>
 8008c2e:	e012      	b.n	8008c56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d206      	bcs.n	8008c46 <prvInsertTimerInActiveList+0x62>
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d302      	bcc.n	8008c46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e007      	b.n	8008c56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c46:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <prvInsertTimerInActiveList+0x80>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f7fd fe30 	bl	80068b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c56:	697b      	ldr	r3, [r7, #20]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000940 	.word	0x20000940
 8008c64:	2000093c 	.word	0x2000093c

08008c68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08e      	sub	sp, #56	; 0x38
 8008c6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c6e:	e0ca      	b.n	8008e06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da18      	bge.n	8008ca8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c76:	1d3b      	adds	r3, r7, #4
 8008c78:	3304      	adds	r3, #4
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	61fb      	str	r3, [r7, #28]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c9e:	6850      	ldr	r0, [r2, #4]
 8008ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca2:	6892      	ldr	r2, [r2, #8]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f2c0 80aa 	blt.w	8008e04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd fe31 	bl	8006928 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff ff6b 	bl	8008ba4 <prvSampleTimeNow>
 8008cce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b09      	cmp	r3, #9
 8008cd4:	f200 8097 	bhi.w	8008e06 <prvProcessReceivedCommands+0x19e>
 8008cd8:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <prvProcessReceivedCommands+0x78>)
 8008cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cde:	bf00      	nop
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d09 	.word	0x08008d09
 8008cec:	08008d7d 	.word	0x08008d7d
 8008cf0:	08008d91 	.word	0x08008d91
 8008cf4:	08008ddb 	.word	0x08008ddb
 8008cf8:	08008d09 	.word	0x08008d09
 8008cfc:	08008d09 	.word	0x08008d09
 8008d00:	08008d7d 	.word	0x08008d7d
 8008d04:	08008d91 	.word	0x08008d91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d0e:	f043 0301 	orr.w	r3, r3, #1
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	18d1      	adds	r1, r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d28:	f7ff ff5c 	bl	8008be4 <prvInsertTimerInActiveList>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d069      	beq.n	8008e06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d05e      	beq.n	8008e06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	441a      	add	r2, r3
 8008d50:	2300      	movs	r3, #0
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	2300      	movs	r3, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5a:	f7ff fe05 	bl	8008968 <xTimerGenericCommand>
 8008d5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d14f      	bne.n	8008e06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	61bb      	str	r3, [r7, #24]
}
 8008d78:	bf00      	nop
 8008d7a:	e7fe      	b.n	8008d7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d82:	f023 0301 	bic.w	r3, r3, #1
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008d8e:	e03a      	b.n	8008e06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d96:	f043 0301 	orr.w	r3, r3, #1
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	617b      	str	r3, [r7, #20]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	18d1      	adds	r1, r2, r3
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd4:	f7ff ff06 	bl	8008be4 <prvInsertTimerInActiveList>
					break;
 8008dd8:	e015      	b.n	8008e06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dea:	f000 fbe1 	bl	80095b0 <vPortFree>
 8008dee:	e00a      	b.n	8008e06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e02:	e000      	b.n	8008e06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e06:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <prvProcessReceivedCommands+0x1c0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	1d39      	adds	r1, r7, #4
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe f8be 	bl	8006f90 <xQueueReceive>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f47f af2a 	bne.w	8008c70 <prvProcessReceivedCommands+0x8>
	}
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	3730      	adds	r7, #48	; 0x30
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000944 	.word	0x20000944

08008e2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e32:	e048      	b.n	8008ec6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e34:	4b2d      	ldr	r3, [pc, #180]	; (8008eec <prvSwitchTimerLists+0xc0>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <prvSwitchTimerLists+0xc0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fd fd6b 	bl	8006928 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d02e      	beq.n	8008ec6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4413      	add	r3, r2
 8008e70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d90e      	bls.n	8008e98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e86:	4b19      	ldr	r3, [pc, #100]	; (8008eec <prvSwitchTimerLists+0xc0>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f7fd fd10 	bl	80068b6 <vListInsert>
 8008e96:	e016      	b.n	8008ec6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff fd60 	bl	8008968 <xTimerGenericCommand>
 8008ea8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	603b      	str	r3, [r7, #0]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ec6:	4b09      	ldr	r3, [pc, #36]	; (8008eec <prvSwitchTimerLists+0xc0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1b1      	bne.n	8008e34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ed0:	4b06      	ldr	r3, [pc, #24]	; (8008eec <prvSwitchTimerLists+0xc0>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <prvSwitchTimerLists+0xc4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a04      	ldr	r2, [pc, #16]	; (8008eec <prvSwitchTimerLists+0xc0>)
 8008edc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ede:	4a04      	ldr	r2, [pc, #16]	; (8008ef0 <prvSwitchTimerLists+0xc4>)
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	6013      	str	r3, [r2, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	2000093c 	.word	0x2000093c
 8008ef0:	20000940 	.word	0x20000940

08008ef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008efa:	f000 f96b 	bl	80091d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <prvCheckForValidListAndQueue+0x60>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d120      	bne.n	8008f48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f06:	4814      	ldr	r0, [pc, #80]	; (8008f58 <prvCheckForValidListAndQueue+0x64>)
 8008f08:	f7fd fc84 	bl	8006814 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f0c:	4813      	ldr	r0, [pc, #76]	; (8008f5c <prvCheckForValidListAndQueue+0x68>)
 8008f0e:	f7fd fc81 	bl	8006814 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f12:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <prvCheckForValidListAndQueue+0x6c>)
 8008f14:	4a10      	ldr	r2, [pc, #64]	; (8008f58 <prvCheckForValidListAndQueue+0x64>)
 8008f16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f18:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <prvCheckForValidListAndQueue+0x70>)
 8008f1a:	4a10      	ldr	r2, [pc, #64]	; (8008f5c <prvCheckForValidListAndQueue+0x68>)
 8008f1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	4b11      	ldr	r3, [pc, #68]	; (8008f68 <prvCheckForValidListAndQueue+0x74>)
 8008f24:	4a11      	ldr	r2, [pc, #68]	; (8008f6c <prvCheckForValidListAndQueue+0x78>)
 8008f26:	2110      	movs	r1, #16
 8008f28:	200a      	movs	r0, #10
 8008f2a:	f7fd fd8f 	bl	8006a4c <xQueueGenericCreateStatic>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4a08      	ldr	r2, [pc, #32]	; (8008f54 <prvCheckForValidListAndQueue+0x60>)
 8008f32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f34:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <prvCheckForValidListAndQueue+0x60>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <prvCheckForValidListAndQueue+0x60>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	490b      	ldr	r1, [pc, #44]	; (8008f70 <prvCheckForValidListAndQueue+0x7c>)
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fb38 	bl	80075b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f48:	f000 f974 	bl	8009234 <vPortExitCritical>
}
 8008f4c:	bf00      	nop
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000944 	.word	0x20000944
 8008f58:	20000914 	.word	0x20000914
 8008f5c:	20000928 	.word	0x20000928
 8008f60:	2000093c 	.word	0x2000093c
 8008f64:	20000940 	.word	0x20000940
 8008f68:	200009f0 	.word	0x200009f0
 8008f6c:	20000950 	.word	0x20000950
 8008f70:	080098e0 	.word	0x080098e0

08008f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3b04      	subs	r3, #4
 8008f84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3b04      	subs	r3, #4
 8008f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f023 0201 	bic.w	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3b04      	subs	r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fa4:	4a0c      	ldr	r2, [pc, #48]	; (8008fd8 <pxPortInitialiseStack+0x64>)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3b14      	subs	r3, #20
 8008fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f06f 0202 	mvn.w	r2, #2
 8008fc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3b20      	subs	r3, #32
 8008fc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fca:	68fb      	ldr	r3, [r7, #12]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	08008fdd 	.word	0x08008fdd

08008fdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fe6:	4b12      	ldr	r3, [pc, #72]	; (8009030 <prvTaskExitError+0x54>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fee:	d00a      	beq.n	8009006 <prvTaskExitError+0x2a>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	60fb      	str	r3, [r7, #12]
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <prvTaskExitError+0x28>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60bb      	str	r3, [r7, #8]
}
 8009018:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800901a:	bf00      	nop
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0fc      	beq.n	800901c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009022:	bf00      	nop
 8009024:	bf00      	nop
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	2000000c 	.word	0x2000000c
	...

08009040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <pxCurrentTCBConst2>)
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	6808      	ldr	r0, [r1, #0]
 8009046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	f380 8809 	msr	PSP, r0
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f04f 0000 	mov.w	r0, #0
 8009056:	f380 8811 	msr	BASEPRI, r0
 800905a:	4770      	bx	lr
 800905c:	f3af 8000 	nop.w

08009060 <pxCurrentTCBConst2>:
 8009060:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop

08009068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009068:	4808      	ldr	r0, [pc, #32]	; (800908c <prvPortStartFirstTask+0x24>)
 800906a:	6800      	ldr	r0, [r0, #0]
 800906c:	6800      	ldr	r0, [r0, #0]
 800906e:	f380 8808 	msr	MSP, r0
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8814 	msr	CONTROL, r0
 800907a:	b662      	cpsie	i
 800907c:	b661      	cpsie	f
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	df00      	svc	0
 8009088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800908a:	bf00      	nop
 800908c:	e000ed08 	.word	0xe000ed08

08009090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009096:	4b46      	ldr	r3, [pc, #280]	; (80091b0 <xPortStartScheduler+0x120>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a46      	ldr	r2, [pc, #280]	; (80091b4 <xPortStartScheduler+0x124>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10a      	bne.n	80090b6 <xPortStartScheduler+0x26>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	613b      	str	r3, [r7, #16]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090b6:	4b3e      	ldr	r3, [pc, #248]	; (80091b0 <xPortStartScheduler+0x120>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a3f      	ldr	r2, [pc, #252]	; (80091b8 <xPortStartScheduler+0x128>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d10a      	bne.n	80090d6 <xPortStartScheduler+0x46>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60fb      	str	r3, [r7, #12]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090d6:	4b39      	ldr	r3, [pc, #228]	; (80091bc <xPortStartScheduler+0x12c>)
 80090d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	22ff      	movs	r2, #255	; 0xff
 80090e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	4b31      	ldr	r3, [pc, #196]	; (80091c0 <xPortStartScheduler+0x130>)
 80090fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090fe:	4b31      	ldr	r3, [pc, #196]	; (80091c4 <xPortStartScheduler+0x134>)
 8009100:	2207      	movs	r2, #7
 8009102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009104:	e009      	b.n	800911a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009106:	4b2f      	ldr	r3, [pc, #188]	; (80091c4 <xPortStartScheduler+0x134>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3b01      	subs	r3, #1
 800910c:	4a2d      	ldr	r2, [pc, #180]	; (80091c4 <xPortStartScheduler+0x134>)
 800910e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	b2db      	uxtb	r3, r3
 8009118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	b2db      	uxtb	r3, r3
 800911e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009122:	2b80      	cmp	r3, #128	; 0x80
 8009124:	d0ef      	beq.n	8009106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009126:	4b27      	ldr	r3, [pc, #156]	; (80091c4 <xPortStartScheduler+0x134>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f1c3 0307 	rsb	r3, r3, #7
 800912e:	2b04      	cmp	r3, #4
 8009130:	d00a      	beq.n	8009148 <xPortStartScheduler+0xb8>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60bb      	str	r3, [r7, #8]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009148:	4b1e      	ldr	r3, [pc, #120]	; (80091c4 <xPortStartScheduler+0x134>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <xPortStartScheduler+0x134>)
 8009150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009152:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <xPortStartScheduler+0x134>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800915a:	4a1a      	ldr	r2, [pc, #104]	; (80091c4 <xPortStartScheduler+0x134>)
 800915c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	b2da      	uxtb	r2, r3
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009166:	4b18      	ldr	r3, [pc, #96]	; (80091c8 <xPortStartScheduler+0x138>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a17      	ldr	r2, [pc, #92]	; (80091c8 <xPortStartScheduler+0x138>)
 800916c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <xPortStartScheduler+0x138>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <xPortStartScheduler+0x138>)
 8009178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800917c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800917e:	f000 f8dd 	bl	800933c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009182:	4b12      	ldr	r3, [pc, #72]	; (80091cc <xPortStartScheduler+0x13c>)
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009188:	f000 f8fc 	bl	8009384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800918c:	4b10      	ldr	r3, [pc, #64]	; (80091d0 <xPortStartScheduler+0x140>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a0f      	ldr	r2, [pc, #60]	; (80091d0 <xPortStartScheduler+0x140>)
 8009192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009198:	f7ff ff66 	bl	8009068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800919c:	f7fe fe1c 	bl	8007dd8 <vTaskSwitchContext>
	prvTaskExitError();
 80091a0:	f7ff ff1c 	bl	8008fdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	e000ed00 	.word	0xe000ed00
 80091b4:	410fc271 	.word	0x410fc271
 80091b8:	410fc270 	.word	0x410fc270
 80091bc:	e000e400 	.word	0xe000e400
 80091c0:	20000a40 	.word	0x20000a40
 80091c4:	20000a44 	.word	0x20000a44
 80091c8:	e000ed20 	.word	0xe000ed20
 80091cc:	2000000c 	.word	0x2000000c
 80091d0:	e000ef34 	.word	0xe000ef34

080091d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	607b      	str	r3, [r7, #4]
}
 80091ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <vPortEnterCritical+0x58>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a0d      	ldr	r2, [pc, #52]	; (800922c <vPortEnterCritical+0x58>)
 80091f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <vPortEnterCritical+0x58>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d10f      	bne.n	8009220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009200:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <vPortEnterCritical+0x5c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <vPortEnterCritical+0x4c>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	603b      	str	r3, [r7, #0]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <vPortEnterCritical+0x4a>
	}
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	2000000c 	.word	0x2000000c
 8009230:	e000ed04 	.word	0xe000ed04

08009234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800923a:	4b12      	ldr	r3, [pc, #72]	; (8009284 <vPortExitCritical+0x50>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <vPortExitCritical+0x24>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	607b      	str	r3, [r7, #4]
}
 8009254:	bf00      	nop
 8009256:	e7fe      	b.n	8009256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009258:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <vPortExitCritical+0x50>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3b01      	subs	r3, #1
 800925e:	4a09      	ldr	r2, [pc, #36]	; (8009284 <vPortExitCritical+0x50>)
 8009260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009262:	4b08      	ldr	r3, [pc, #32]	; (8009284 <vPortExitCritical+0x50>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <vPortExitCritical+0x42>
 800926a:	2300      	movs	r3, #0
 800926c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	f383 8811 	msr	BASEPRI, r3
}
 8009274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	2000000c 	.word	0x2000000c
	...

08009290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009290:	f3ef 8009 	mrs	r0, PSP
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <pxCurrentTCBConst>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	f01e 0f10 	tst.w	lr, #16
 80092a0:	bf08      	it	eq
 80092a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092aa:	6010      	str	r0, [r2, #0]
 80092ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092b4:	f380 8811 	msr	BASEPRI, r0
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f7fe fd8a 	bl	8007dd8 <vTaskSwitchContext>
 80092c4:	f04f 0000 	mov.w	r0, #0
 80092c8:	f380 8811 	msr	BASEPRI, r0
 80092cc:	bc09      	pop	{r0, r3}
 80092ce:	6819      	ldr	r1, [r3, #0]
 80092d0:	6808      	ldr	r0, [r1, #0]
 80092d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d6:	f01e 0f10 	tst.w	lr, #16
 80092da:	bf08      	it	eq
 80092dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092e0:	f380 8809 	msr	PSP, r0
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	f3af 8000 	nop.w

080092f0 <pxCurrentTCBConst>:
 80092f0:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop

080092f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
}
 8009310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009312:	f7fe fca7 	bl	8007c64 <xTaskIncrementTick>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800931c:	4b06      	ldr	r3, [pc, #24]	; (8009338 <xPortSysTickHandler+0x40>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	2300      	movs	r3, #0
 8009326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f383 8811 	msr	BASEPRI, r3
}
 800932e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <vPortSetupTimerInterrupt+0x34>)
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009346:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <vPortSetupTimerInterrupt+0x38>)
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800934c:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <vPortSetupTimerInterrupt+0x3c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a0a      	ldr	r2, [pc, #40]	; (800937c <vPortSetupTimerInterrupt+0x40>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	099b      	lsrs	r3, r3, #6
 8009358:	4a09      	ldr	r2, [pc, #36]	; (8009380 <vPortSetupTimerInterrupt+0x44>)
 800935a:	3b01      	subs	r3, #1
 800935c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800935e:	4b04      	ldr	r3, [pc, #16]	; (8009370 <vPortSetupTimerInterrupt+0x34>)
 8009360:	2207      	movs	r2, #7
 8009362:	601a      	str	r2, [r3, #0]
}
 8009364:	bf00      	nop
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	e000e010 	.word	0xe000e010
 8009374:	e000e018 	.word	0xe000e018
 8009378:	20000000 	.word	0x20000000
 800937c:	10624dd3 	.word	0x10624dd3
 8009380:	e000e014 	.word	0xe000e014

08009384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009394 <vPortEnableVFP+0x10>
 8009388:	6801      	ldr	r1, [r0, #0]
 800938a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800938e:	6001      	str	r1, [r0, #0]
 8009390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009392:	bf00      	nop
 8009394:	e000ed88 	.word	0xe000ed88

08009398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800939e:	f3ef 8305 	mrs	r3, IPSR
 80093a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b0f      	cmp	r3, #15
 80093a8:	d914      	bls.n	80093d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093aa:	4a17      	ldr	r2, [pc, #92]	; (8009408 <vPortValidateInterruptPriority+0x70>)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093b4:	4b15      	ldr	r3, [pc, #84]	; (800940c <vPortValidateInterruptPriority+0x74>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	7afa      	ldrb	r2, [r7, #11]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d20a      	bcs.n	80093d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	607b      	str	r3, [r7, #4]
}
 80093d0:	bf00      	nop
 80093d2:	e7fe      	b.n	80093d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093d4:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <vPortValidateInterruptPriority+0x78>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093dc:	4b0d      	ldr	r3, [pc, #52]	; (8009414 <vPortValidateInterruptPriority+0x7c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d90a      	bls.n	80093fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	603b      	str	r3, [r7, #0]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <vPortValidateInterruptPriority+0x60>
	}
 80093fa:	bf00      	nop
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	e000e3f0 	.word	0xe000e3f0
 800940c:	20000a40 	.word	0x20000a40
 8009410:	e000ed0c 	.word	0xe000ed0c
 8009414:	20000a44 	.word	0x20000a44

08009418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08a      	sub	sp, #40	; 0x28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009420:	2300      	movs	r3, #0
 8009422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009424:	f7fe fb62 	bl	8007aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009428:	4b5b      	ldr	r3, [pc, #364]	; (8009598 <pvPortMalloc+0x180>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009430:	f000 f920 	bl	8009674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009434:	4b59      	ldr	r3, [pc, #356]	; (800959c <pvPortMalloc+0x184>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4013      	ands	r3, r2
 800943c:	2b00      	cmp	r3, #0
 800943e:	f040 8093 	bne.w	8009568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01d      	beq.n	8009484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009448:	2208      	movs	r2, #8
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4413      	add	r3, r2
 800944e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	2b00      	cmp	r3, #0
 8009458:	d014      	beq.n	8009484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f023 0307 	bic.w	r3, r3, #7
 8009460:	3308      	adds	r3, #8
 8009462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <pvPortMalloc+0x6c>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	617b      	str	r3, [r7, #20]
}
 8009480:	bf00      	nop
 8009482:	e7fe      	b.n	8009482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d06e      	beq.n	8009568 <pvPortMalloc+0x150>
 800948a:	4b45      	ldr	r3, [pc, #276]	; (80095a0 <pvPortMalloc+0x188>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	429a      	cmp	r2, r3
 8009492:	d869      	bhi.n	8009568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009494:	4b43      	ldr	r3, [pc, #268]	; (80095a4 <pvPortMalloc+0x18c>)
 8009496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009498:	4b42      	ldr	r3, [pc, #264]	; (80095a4 <pvPortMalloc+0x18c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800949e:	e004      	b.n	80094aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d903      	bls.n	80094bc <pvPortMalloc+0xa4>
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1f1      	bne.n	80094a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094bc:	4b36      	ldr	r3, [pc, #216]	; (8009598 <pvPortMalloc+0x180>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d050      	beq.n	8009568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2208      	movs	r2, #8
 80094cc:	4413      	add	r3, r2
 80094ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	1ad2      	subs	r2, r2, r3
 80094e0:	2308      	movs	r3, #8
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d91f      	bls.n	8009528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <pvPortMalloc+0xf8>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	613b      	str	r3, [r7, #16]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009522:	69b8      	ldr	r0, [r7, #24]
 8009524:	f000 f908 	bl	8009738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009528:	4b1d      	ldr	r3, [pc, #116]	; (80095a0 <pvPortMalloc+0x188>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	4a1b      	ldr	r2, [pc, #108]	; (80095a0 <pvPortMalloc+0x188>)
 8009534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009536:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <pvPortMalloc+0x188>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <pvPortMalloc+0x190>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d203      	bcs.n	800954a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009542:	4b17      	ldr	r3, [pc, #92]	; (80095a0 <pvPortMalloc+0x188>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a18      	ldr	r2, [pc, #96]	; (80095a8 <pvPortMalloc+0x190>)
 8009548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	4b13      	ldr	r3, [pc, #76]	; (800959c <pvPortMalloc+0x184>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	431a      	orrs	r2, r3
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800955e:	4b13      	ldr	r3, [pc, #76]	; (80095ac <pvPortMalloc+0x194>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	4a11      	ldr	r2, [pc, #68]	; (80095ac <pvPortMalloc+0x194>)
 8009566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009568:	f7fe face 	bl	8007b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <pvPortMalloc+0x174>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	60fb      	str	r3, [r7, #12]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <pvPortMalloc+0x172>
	return pvReturn;
 800958c:	69fb      	ldr	r3, [r7, #28]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3728      	adds	r7, #40	; 0x28
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	200019f0 	.word	0x200019f0
 800959c:	20001a04 	.word	0x20001a04
 80095a0:	200019f4 	.word	0x200019f4
 80095a4:	200019e8 	.word	0x200019e8
 80095a8:	200019f8 	.word	0x200019f8
 80095ac:	200019fc 	.word	0x200019fc

080095b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d04d      	beq.n	800965e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80095c2:	2308      	movs	r3, #8
 80095c4:	425b      	negs	r3, r3
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	4b24      	ldr	r3, [pc, #144]	; (8009668 <vPortFree+0xb8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4013      	ands	r3, r2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <vPortFree+0x44>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	60fb      	str	r3, [r7, #12]
}
 80095f0:	bf00      	nop
 80095f2:	e7fe      	b.n	80095f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <vPortFree+0x62>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60bb      	str	r3, [r7, #8]
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <vPortFree+0xb8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4013      	ands	r3, r2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d01e      	beq.n	800965e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d11a      	bne.n	800965e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <vPortFree+0xb8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	43db      	mvns	r3, r3
 8009632:	401a      	ands	r2, r3
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009638:	f7fe fa58 	bl	8007aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	4b0a      	ldr	r3, [pc, #40]	; (800966c <vPortFree+0xbc>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4413      	add	r3, r2
 8009646:	4a09      	ldr	r2, [pc, #36]	; (800966c <vPortFree+0xbc>)
 8009648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800964a:	6938      	ldr	r0, [r7, #16]
 800964c:	f000 f874 	bl	8009738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009650:	4b07      	ldr	r3, [pc, #28]	; (8009670 <vPortFree+0xc0>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3301      	adds	r3, #1
 8009656:	4a06      	ldr	r2, [pc, #24]	; (8009670 <vPortFree+0xc0>)
 8009658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800965a:	f7fe fa55 	bl	8007b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800965e:	bf00      	nop
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20001a04 	.word	0x20001a04
 800966c:	200019f4 	.word	0x200019f4
 8009670:	20001a00 	.word	0x20001a00

08009674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800967a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800967e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009680:	4b27      	ldr	r3, [pc, #156]	; (8009720 <prvHeapInit+0xac>)
 8009682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00c      	beq.n	80096a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3307      	adds	r3, #7
 8009692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0307 	bic.w	r3, r3, #7
 800969a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	4a1f      	ldr	r2, [pc, #124]	; (8009720 <prvHeapInit+0xac>)
 80096a4:	4413      	add	r3, r2
 80096a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096ac:	4a1d      	ldr	r2, [pc, #116]	; (8009724 <prvHeapInit+0xb0>)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096b2:	4b1c      	ldr	r3, [pc, #112]	; (8009724 <prvHeapInit+0xb0>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	4413      	add	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80096c0:	2208      	movs	r2, #8
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4a15      	ldr	r2, [pc, #84]	; (8009728 <prvHeapInit+0xb4>)
 80096d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80096d6:	4b14      	ldr	r3, [pc, #80]	; (8009728 <prvHeapInit+0xb4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2200      	movs	r2, #0
 80096dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80096de:	4b12      	ldr	r3, [pc, #72]	; (8009728 <prvHeapInit+0xb4>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	1ad2      	subs	r2, r2, r3
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096f4:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <prvHeapInit+0xb4>)
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <prvHeapInit+0xb8>)
 8009702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	4a09      	ldr	r2, [pc, #36]	; (8009730 <prvHeapInit+0xbc>)
 800970a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800970c:	4b09      	ldr	r3, [pc, #36]	; (8009734 <prvHeapInit+0xc0>)
 800970e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009712:	601a      	str	r2, [r3, #0]
}
 8009714:	bf00      	nop
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	20000a48 	.word	0x20000a48
 8009724:	200019e8 	.word	0x200019e8
 8009728:	200019f0 	.word	0x200019f0
 800972c:	200019f8 	.word	0x200019f8
 8009730:	200019f4 	.word	0x200019f4
 8009734:	20001a04 	.word	0x20001a04

08009738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009740:	4b28      	ldr	r3, [pc, #160]	; (80097e4 <prvInsertBlockIntoFreeList+0xac>)
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	e002      	b.n	800974c <prvInsertBlockIntoFreeList+0x14>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	429a      	cmp	r2, r3
 8009754:	d8f7      	bhi.n	8009746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	429a      	cmp	r2, r3
 8009766:	d108      	bne.n	800977a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	441a      	add	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	441a      	add	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	429a      	cmp	r2, r3
 800978c:	d118      	bne.n	80097c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d00d      	beq.n	80097b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	441a      	add	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	e008      	b.n	80097c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097b6:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <prvInsertBlockIntoFreeList+0xb0>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	e003      	b.n	80097c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d002      	beq.n	80097d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097d6:	bf00      	nop
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	200019e8 	.word	0x200019e8
 80097e8:	200019f0 	.word	0x200019f0

080097ec <__libc_init_array>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4d0d      	ldr	r5, [pc, #52]	; (8009824 <__libc_init_array+0x38>)
 80097f0:	4c0d      	ldr	r4, [pc, #52]	; (8009828 <__libc_init_array+0x3c>)
 80097f2:	1b64      	subs	r4, r4, r5
 80097f4:	10a4      	asrs	r4, r4, #2
 80097f6:	2600      	movs	r6, #0
 80097f8:	42a6      	cmp	r6, r4
 80097fa:	d109      	bne.n	8009810 <__libc_init_array+0x24>
 80097fc:	4d0b      	ldr	r5, [pc, #44]	; (800982c <__libc_init_array+0x40>)
 80097fe:	4c0c      	ldr	r4, [pc, #48]	; (8009830 <__libc_init_array+0x44>)
 8009800:	f000 f82e 	bl	8009860 <_init>
 8009804:	1b64      	subs	r4, r4, r5
 8009806:	10a4      	asrs	r4, r4, #2
 8009808:	2600      	movs	r6, #0
 800980a:	42a6      	cmp	r6, r4
 800980c:	d105      	bne.n	800981a <__libc_init_array+0x2e>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	f855 3b04 	ldr.w	r3, [r5], #4
 8009814:	4798      	blx	r3
 8009816:	3601      	adds	r6, #1
 8009818:	e7ee      	b.n	80097f8 <__libc_init_array+0xc>
 800981a:	f855 3b04 	ldr.w	r3, [r5], #4
 800981e:	4798      	blx	r3
 8009820:	3601      	adds	r6, #1
 8009822:	e7f2      	b.n	800980a <__libc_init_array+0x1e>
 8009824:	0800995c 	.word	0x0800995c
 8009828:	0800995c 	.word	0x0800995c
 800982c:	0800995c 	.word	0x0800995c
 8009830:	08009960 	.word	0x08009960

08009834 <memcpy>:
 8009834:	440a      	add	r2, r1
 8009836:	4291      	cmp	r1, r2
 8009838:	f100 33ff 	add.w	r3, r0, #4294967295
 800983c:	d100      	bne.n	8009840 <memcpy+0xc>
 800983e:	4770      	bx	lr
 8009840:	b510      	push	{r4, lr}
 8009842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800984a:	4291      	cmp	r1, r2
 800984c:	d1f9      	bne.n	8009842 <memcpy+0xe>
 800984e:	bd10      	pop	{r4, pc}

08009850 <memset>:
 8009850:	4402      	add	r2, r0
 8009852:	4603      	mov	r3, r0
 8009854:	4293      	cmp	r3, r2
 8009856:	d100      	bne.n	800985a <memset+0xa>
 8009858:	4770      	bx	lr
 800985a:	f803 1b01 	strb.w	r1, [r3], #1
 800985e:	e7f9      	b.n	8009854 <memset+0x4>

08009860 <_init>:
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009862:	bf00      	nop
 8009864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009866:	bc08      	pop	{r3}
 8009868:	469e      	mov	lr, r3
 800986a:	4770      	bx	lr

0800986c <_fini>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	bf00      	nop
 8009870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009872:	bc08      	pop	{r3}
 8009874:	469e      	mov	lr, r3
 8009876:	4770      	bx	lr
